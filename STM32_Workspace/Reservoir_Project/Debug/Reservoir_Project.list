
Reservoir_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060f8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b4  08006298  08006298  00007298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a4c  08006a4c  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  08006a4c  08006a4c  00007a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a54  08006a54  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a54  08006a54  00007a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a58  08006a58  00007a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006a5c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  2000005c  08006ab8  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08006ab8  00008378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e442  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f63  00000000  00000000  000164ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00018438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a8c  00000000  00000000  000191a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a11  00000000  00000000  00019c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe91  00000000  00000000  00031645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a49e  00000000  00000000  000414d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db974  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e98  00000000  00000000  000db9b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000df850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006280 	.word	0x08006280

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08006280 	.word	0x08006280

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ADC_Select_CH>:
volatile uint32_t time_edge1 = 0;
volatile uint32_t time_edge2 = 0;
volatile uint32_t time_diff = 0;

void ADC_Select_CH(int CH)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
ADC_ChannelConfTypeDef sConfig = {0};
 8000588:	f107 0308 	add.w	r3, r7, #8
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
switch(CH)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2b0f      	cmp	r3, #15
 800059a:	f200 814b 	bhi.w	8000834 <ADC_Select_CH+0x2b4>
 800059e:	a201      	add	r2, pc, #4	@ (adr r2, 80005a4 <ADC_Select_CH+0x24>)
 80005a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a4:	080005e5 	.word	0x080005e5
 80005a8:	08000607 	.word	0x08000607
 80005ac:	08000629 	.word	0x08000629
 80005b0:	0800064b 	.word	0x0800064b
 80005b4:	0800066d 	.word	0x0800066d
 80005b8:	0800068f 	.word	0x0800068f
 80005bc:	080006b1 	.word	0x080006b1
 80005c0:	080006d3 	.word	0x080006d3
 80005c4:	080006f5 	.word	0x080006f5
 80005c8:	08000717 	.word	0x08000717
 80005cc:	08000737 	.word	0x08000737
 80005d0:	08000757 	.word	0x08000757
 80005d4:	08000777 	.word	0x08000777
 80005d8:	08000797 	.word	0x08000797
 80005dc:	080007b7 	.word	0x080007b7
 80005e0:	080007d7 	.word	0x080007d7
{
case 0:
sConfig.Channel = ADC_CHANNEL_0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
sConfig.Rank = 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	60fb      	str	r3, [r7, #12]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	4619      	mov	r1, r3
 80005f2:	4892      	ldr	r0, [pc, #584]	@ (800083c <ADC_Select_CH+0x2bc>)
 80005f4:	f001 ff12 	bl	800241c <HAL_ADC_ConfigChannel>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	f000 80fb 	beq.w	80007f6 <ADC_Select_CH+0x276>
{
Error_Handler();
 8000600:	f001 fa6e 	bl	8001ae0 <Error_Handler>
}
break;
 8000604:	e0f7      	b.n	80007f6 <ADC_Select_CH+0x276>
case 1:
sConfig.Channel = ADC_CHANNEL_1;
 8000606:	2301      	movs	r3, #1
 8000608:	60bb      	str	r3, [r7, #8]
sConfig.Rank = 1;
 800060a:	2301      	movs	r3, #1
 800060c:	60fb      	str	r3, [r7, #12]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	4619      	mov	r1, r3
 8000614:	4889      	ldr	r0, [pc, #548]	@ (800083c <ADC_Select_CH+0x2bc>)
 8000616:	f001 ff01 	bl	800241c <HAL_ADC_ConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	f000 80ec 	beq.w	80007fa <ADC_Select_CH+0x27a>
{
Error_Handler();
 8000622:	f001 fa5d 	bl	8001ae0 <Error_Handler>
}
break;
 8000626:	e0e8      	b.n	80007fa <ADC_Select_CH+0x27a>
case 2:
sConfig.Channel = ADC_CHANNEL_2;
 8000628:	2302      	movs	r3, #2
 800062a:	60bb      	str	r3, [r7, #8]
sConfig.Rank = 1;
 800062c:	2301      	movs	r3, #1
 800062e:	60fb      	str	r3, [r7, #12]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000630:	f107 0308 	add.w	r3, r7, #8
 8000634:	4619      	mov	r1, r3
 8000636:	4881      	ldr	r0, [pc, #516]	@ (800083c <ADC_Select_CH+0x2bc>)
 8000638:	f001 fef0 	bl	800241c <HAL_ADC_ConfigChannel>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	f000 80dd 	beq.w	80007fe <ADC_Select_CH+0x27e>
{
Error_Handler();
 8000644:	f001 fa4c 	bl	8001ae0 <Error_Handler>
}
break;
 8000648:	e0d9      	b.n	80007fe <ADC_Select_CH+0x27e>
case 3:
sConfig.Channel = ADC_CHANNEL_3;
 800064a:	2303      	movs	r3, #3
 800064c:	60bb      	str	r3, [r7, #8]
sConfig.Rank = 1;
 800064e:	2301      	movs	r3, #1
 8000650:	60fb      	str	r3, [r7, #12]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	4619      	mov	r1, r3
 8000658:	4878      	ldr	r0, [pc, #480]	@ (800083c <ADC_Select_CH+0x2bc>)
 800065a:	f001 fedf 	bl	800241c <HAL_ADC_ConfigChannel>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	f000 80ce 	beq.w	8000802 <ADC_Select_CH+0x282>
{
Error_Handler();
 8000666:	f001 fa3b 	bl	8001ae0 <Error_Handler>
}
break;
 800066a:	e0ca      	b.n	8000802 <ADC_Select_CH+0x282>
case 4:
sConfig.Channel = ADC_CHANNEL_4;
 800066c:	2304      	movs	r3, #4
 800066e:	60bb      	str	r3, [r7, #8]
sConfig.Rank = 1;
 8000670:	2301      	movs	r3, #1
 8000672:	60fb      	str	r3, [r7, #12]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	4619      	mov	r1, r3
 800067a:	4870      	ldr	r0, [pc, #448]	@ (800083c <ADC_Select_CH+0x2bc>)
 800067c:	f001 fece 	bl	800241c <HAL_ADC_ConfigChannel>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	f000 80bf 	beq.w	8000806 <ADC_Select_CH+0x286>
{
Error_Handler();
 8000688:	f001 fa2a 	bl	8001ae0 <Error_Handler>
}
break;
 800068c:	e0bb      	b.n	8000806 <ADC_Select_CH+0x286>
case 5:
sConfig.Channel = ADC_CHANNEL_5;
 800068e:	2305      	movs	r3, #5
 8000690:	60bb      	str	r3, [r7, #8]
sConfig.Rank = 1;
 8000692:	2301      	movs	r3, #1
 8000694:	60fb      	str	r3, [r7, #12]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000696:	f107 0308 	add.w	r3, r7, #8
 800069a:	4619      	mov	r1, r3
 800069c:	4867      	ldr	r0, [pc, #412]	@ (800083c <ADC_Select_CH+0x2bc>)
 800069e:	f001 febd 	bl	800241c <HAL_ADC_ConfigChannel>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	f000 80b0 	beq.w	800080a <ADC_Select_CH+0x28a>
{
Error_Handler();
 80006aa:	f001 fa19 	bl	8001ae0 <Error_Handler>
}
break;
 80006ae:	e0ac      	b.n	800080a <ADC_Select_CH+0x28a>
case 6:
sConfig.Channel = ADC_CHANNEL_6;
 80006b0:	2306      	movs	r3, #6
 80006b2:	60bb      	str	r3, [r7, #8]
sConfig.Rank = 1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	60fb      	str	r3, [r7, #12]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	4619      	mov	r1, r3
 80006be:	485f      	ldr	r0, [pc, #380]	@ (800083c <ADC_Select_CH+0x2bc>)
 80006c0:	f001 feac 	bl	800241c <HAL_ADC_ConfigChannel>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	f000 80a1 	beq.w	800080e <ADC_Select_CH+0x28e>
{
Error_Handler();
 80006cc:	f001 fa08 	bl	8001ae0 <Error_Handler>
}
break;
 80006d0:	e09d      	b.n	800080e <ADC_Select_CH+0x28e>
case 7:
sConfig.Channel = ADC_CHANNEL_7;
 80006d2:	2307      	movs	r3, #7
 80006d4:	60bb      	str	r3, [r7, #8]
sConfig.Rank = 1;
 80006d6:	2301      	movs	r3, #1
 80006d8:	60fb      	str	r3, [r7, #12]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006da:	f107 0308 	add.w	r3, r7, #8
 80006de:	4619      	mov	r1, r3
 80006e0:	4856      	ldr	r0, [pc, #344]	@ (800083c <ADC_Select_CH+0x2bc>)
 80006e2:	f001 fe9b 	bl	800241c <HAL_ADC_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	f000 8092 	beq.w	8000812 <ADC_Select_CH+0x292>
{
Error_Handler();
 80006ee:	f001 f9f7 	bl	8001ae0 <Error_Handler>
}
break;
 80006f2:	e08e      	b.n	8000812 <ADC_Select_CH+0x292>
case 8:
sConfig.Channel = ADC_CHANNEL_8;
 80006f4:	2308      	movs	r3, #8
 80006f6:	60bb      	str	r3, [r7, #8]
sConfig.Rank = 1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006fc:	f107 0308 	add.w	r3, r7, #8
 8000700:	4619      	mov	r1, r3
 8000702:	484e      	ldr	r0, [pc, #312]	@ (800083c <ADC_Select_CH+0x2bc>)
 8000704:	f001 fe8a 	bl	800241c <HAL_ADC_ConfigChannel>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	f000 8083 	beq.w	8000816 <ADC_Select_CH+0x296>
{
Error_Handler();
 8000710:	f001 f9e6 	bl	8001ae0 <Error_Handler>
}
break;
 8000714:	e07f      	b.n	8000816 <ADC_Select_CH+0x296>
case 9:
sConfig.Channel = ADC_CHANNEL_9;
 8000716:	2309      	movs	r3, #9
 8000718:	60bb      	str	r3, [r7, #8]
sConfig.Rank = 1;
 800071a:	2301      	movs	r3, #1
 800071c:	60fb      	str	r3, [r7, #12]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800071e:	f107 0308 	add.w	r3, r7, #8
 8000722:	4619      	mov	r1, r3
 8000724:	4845      	ldr	r0, [pc, #276]	@ (800083c <ADC_Select_CH+0x2bc>)
 8000726:	f001 fe79 	bl	800241c <HAL_ADC_ConfigChannel>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d074      	beq.n	800081a <ADC_Select_CH+0x29a>
{
Error_Handler();
 8000730:	f001 f9d6 	bl	8001ae0 <Error_Handler>
}
break;
 8000734:	e071      	b.n	800081a <ADC_Select_CH+0x29a>
case 10:
sConfig.Channel = ADC_CHANNEL_10;
 8000736:	230a      	movs	r3, #10
 8000738:	60bb      	str	r3, [r7, #8]
sConfig.Rank = 1;
 800073a:	2301      	movs	r3, #1
 800073c:	60fb      	str	r3, [r7, #12]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073e:	f107 0308 	add.w	r3, r7, #8
 8000742:	4619      	mov	r1, r3
 8000744:	483d      	ldr	r0, [pc, #244]	@ (800083c <ADC_Select_CH+0x2bc>)
 8000746:	f001 fe69 	bl	800241c <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d066      	beq.n	800081e <ADC_Select_CH+0x29e>
{
Error_Handler();
 8000750:	f001 f9c6 	bl	8001ae0 <Error_Handler>
}
break;
 8000754:	e063      	b.n	800081e <ADC_Select_CH+0x29e>
case 11:
sConfig.Channel = ADC_CHANNEL_11;
 8000756:	230b      	movs	r3, #11
 8000758:	60bb      	str	r3, [r7, #8]
sConfig.Rank = 1;
 800075a:	2301      	movs	r3, #1
 800075c:	60fb      	str	r3, [r7, #12]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	4619      	mov	r1, r3
 8000764:	4835      	ldr	r0, [pc, #212]	@ (800083c <ADC_Select_CH+0x2bc>)
 8000766:	f001 fe59 	bl	800241c <HAL_ADC_ConfigChannel>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d058      	beq.n	8000822 <ADC_Select_CH+0x2a2>
{
Error_Handler();
 8000770:	f001 f9b6 	bl	8001ae0 <Error_Handler>
}
break;
 8000774:	e055      	b.n	8000822 <ADC_Select_CH+0x2a2>
case 12:
sConfig.Channel = ADC_CHANNEL_12;
 8000776:	230c      	movs	r3, #12
 8000778:	60bb      	str	r3, [r7, #8]
sConfig.Rank = 1;
 800077a:	2301      	movs	r3, #1
 800077c:	60fb      	str	r3, [r7, #12]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077e:	f107 0308 	add.w	r3, r7, #8
 8000782:	4619      	mov	r1, r3
 8000784:	482d      	ldr	r0, [pc, #180]	@ (800083c <ADC_Select_CH+0x2bc>)
 8000786:	f001 fe49 	bl	800241c <HAL_ADC_ConfigChannel>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d04a      	beq.n	8000826 <ADC_Select_CH+0x2a6>
{
Error_Handler();
 8000790:	f001 f9a6 	bl	8001ae0 <Error_Handler>
}
break;
 8000794:	e047      	b.n	8000826 <ADC_Select_CH+0x2a6>
case 13:
sConfig.Channel = ADC_CHANNEL_13;
 8000796:	230d      	movs	r3, #13
 8000798:	60bb      	str	r3, [r7, #8]
sConfig.Rank = 1;
 800079a:	2301      	movs	r3, #1
 800079c:	60fb      	str	r3, [r7, #12]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079e:	f107 0308 	add.w	r3, r7, #8
 80007a2:	4619      	mov	r1, r3
 80007a4:	4825      	ldr	r0, [pc, #148]	@ (800083c <ADC_Select_CH+0x2bc>)
 80007a6:	f001 fe39 	bl	800241c <HAL_ADC_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d03c      	beq.n	800082a <ADC_Select_CH+0x2aa>
{
Error_Handler();
 80007b0:	f001 f996 	bl	8001ae0 <Error_Handler>
}
break;
 80007b4:	e039      	b.n	800082a <ADC_Select_CH+0x2aa>
case 14:
sConfig.Channel = ADC_CHANNEL_14;
 80007b6:	230e      	movs	r3, #14
 80007b8:	60bb      	str	r3, [r7, #8]
sConfig.Rank = 1;
 80007ba:	2301      	movs	r3, #1
 80007bc:	60fb      	str	r3, [r7, #12]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007be:	f107 0308 	add.w	r3, r7, #8
 80007c2:	4619      	mov	r1, r3
 80007c4:	481d      	ldr	r0, [pc, #116]	@ (800083c <ADC_Select_CH+0x2bc>)
 80007c6:	f001 fe29 	bl	800241c <HAL_ADC_ConfigChannel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d02e      	beq.n	800082e <ADC_Select_CH+0x2ae>
{
Error_Handler();
 80007d0:	f001 f986 	bl	8001ae0 <Error_Handler>
}
break;
 80007d4:	e02b      	b.n	800082e <ADC_Select_CH+0x2ae>
case 15:
sConfig.Channel = ADC_CHANNEL_15;
 80007d6:	230f      	movs	r3, #15
 80007d8:	60bb      	str	r3, [r7, #8]
sConfig.Rank = 1;
 80007da:	2301      	movs	r3, #1
 80007dc:	60fb      	str	r3, [r7, #12]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	4619      	mov	r1, r3
 80007e4:	4815      	ldr	r0, [pc, #84]	@ (800083c <ADC_Select_CH+0x2bc>)
 80007e6:	f001 fe19 	bl	800241c <HAL_ADC_ConfigChannel>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d020      	beq.n	8000832 <ADC_Select_CH+0x2b2>
{
Error_Handler();
 80007f0:	f001 f976 	bl	8001ae0 <Error_Handler>
}
break;
 80007f4:	e01d      	b.n	8000832 <ADC_Select_CH+0x2b2>
break;
 80007f6:	bf00      	nop
 80007f8:	e01c      	b.n	8000834 <ADC_Select_CH+0x2b4>
break;
 80007fa:	bf00      	nop
 80007fc:	e01a      	b.n	8000834 <ADC_Select_CH+0x2b4>
break;
 80007fe:	bf00      	nop
 8000800:	e018      	b.n	8000834 <ADC_Select_CH+0x2b4>
break;
 8000802:	bf00      	nop
 8000804:	e016      	b.n	8000834 <ADC_Select_CH+0x2b4>
break;
 8000806:	bf00      	nop
 8000808:	e014      	b.n	8000834 <ADC_Select_CH+0x2b4>
break;
 800080a:	bf00      	nop
 800080c:	e012      	b.n	8000834 <ADC_Select_CH+0x2b4>
break;
 800080e:	bf00      	nop
 8000810:	e010      	b.n	8000834 <ADC_Select_CH+0x2b4>
break;
 8000812:	bf00      	nop
 8000814:	e00e      	b.n	8000834 <ADC_Select_CH+0x2b4>
break;
 8000816:	bf00      	nop
 8000818:	e00c      	b.n	8000834 <ADC_Select_CH+0x2b4>
break;
 800081a:	bf00      	nop
 800081c:	e00a      	b.n	8000834 <ADC_Select_CH+0x2b4>
break;
 800081e:	bf00      	nop
 8000820:	e008      	b.n	8000834 <ADC_Select_CH+0x2b4>
break;
 8000822:	bf00      	nop
 8000824:	e006      	b.n	8000834 <ADC_Select_CH+0x2b4>
break;
 8000826:	bf00      	nop
 8000828:	e004      	b.n	8000834 <ADC_Select_CH+0x2b4>
break;
 800082a:	bf00      	nop
 800082c:	e002      	b.n	8000834 <ADC_Select_CH+0x2b4>
break;
 800082e:	bf00      	nop
 8000830:	e000      	b.n	8000834 <ADC_Select_CH+0x2b4>
break;
 8000832:	bf00      	nop
}
}
 8000834:	bf00      	nop
 8000836:	3718      	adds	r7, #24
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	200000bc 	.word	0x200000bc

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b092      	sub	sp, #72	@ 0x48
 8000844:	af04      	add	r7, sp, #16
int main(void)
 8000846:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800084a:	61fb      	str	r3, [r7, #28]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800084c:	f001 fb8c 	bl	8001f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000850:	f000 fe3c 	bl	80014cc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  int TIM1_Ch1_DCVAL = 500;
 8000854:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000858:	62bb      	str	r3, [r7, #40]	@ 0x28
  int TIM1_CH1_STEP = 20;
 800085a:	2314      	movs	r3, #20
 800085c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085e:	f001 f86d 	bl	800193c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000862:	f001 f817 	bl	8001894 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000866:	f000 fe9b 	bl	80015a0 <MX_ADC1_Init>
  MX_TIM1_Init();
 800086a:	f000 feed 	bl	8001648 <MX_TIM1_Init>
  MX_TIM3_Init();
 800086e:	f000 ff8d 	bl	800178c <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8000872:	f001 f839 	bl	80018e8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000876:	48c7      	ldr	r0, [pc, #796]	@ (8000b94 <main+0x354>)
 8000878:	f003 f858 	bl	800392c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800087c:	2100      	movs	r1, #0
 800087e:	48c5      	ldr	r0, [pc, #788]	@ (8000b94 <main+0x354>)
 8000880:	f003 f908 	bl	8003a94 <HAL_TIM_PWM_Start>

  TIM1->PSC = 16-1;
 8000884:	4bc4      	ldr	r3, [pc, #784]	@ (8000b98 <main+0x358>)
 8000886:	220f      	movs	r2, #15
 8000888:	629a      	str	r2, [r3, #40]	@ 0x28
  TIM1->ARR = 20000-1;
 800088a:	4bc3      	ldr	r3, [pc, #780]	@ (8000b98 <main+0x358>)
 800088c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000890:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM1->CCR1 = 00;
 8000892:	4bc1      	ldr	r3, [pc, #772]	@ (8000b98 <main+0x358>)
 8000894:	2200      	movs	r2, #0
 8000896:	635a      	str	r2, [r3, #52]	@ 0x34

  clock_hours = 0;
 8000898:	4bc0      	ldr	r3, [pc, #768]	@ (8000b9c <main+0x35c>)
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  HCSR04_TRIG_PULSE();
  TIM1->CCR1 = 2500;
 800089e:	4bbe      	ldr	r3, [pc, #760]	@ (8000b98 <main+0x358>)
 80008a0:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80008a4:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2120      	movs	r1, #32
 80008aa:	48bd      	ldr	r0, [pc, #756]	@ (8000ba0 <main+0x360>)
 80008ac:	f002 fb24 	bl	8002ef8 <HAL_GPIO_WritePin>

 // * SETUP CODE
  // Array to store inputs
    uint8_t setupInputs[17];
    char buffer[2] = {0};
 80008b0:	2300      	movs	r3, #0
 80008b2:	80bb      	strh	r3, [r7, #4]

    // Prompt and collect inputs
    sprintf((char*)txd_message_buffer, "\r SETUP MODE \n\n");
 80008b4:	49bb      	ldr	r1, [pc, #748]	@ (8000ba4 <main+0x364>)
 80008b6:	48bc      	ldr	r0, [pc, #752]	@ (8000ba8 <main+0x368>)
 80008b8:	f005 f842 	bl	8005940 <siprintf>
    HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 80008bc:	48ba      	ldr	r0, [pc, #744]	@ (8000ba8 <main+0x368>)
 80008be:	f7ff fc8f 	bl	80001e0 <strlen>
 80008c2:	4603      	mov	r3, r0
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ca:	49b7      	ldr	r1, [pc, #732]	@ (8000ba8 <main+0x368>)
 80008cc:	48b7      	ldr	r0, [pc, #732]	@ (8000bac <main+0x36c>)
 80008ce:	f003 ff67 	bl	80047a0 <HAL_UART_Transmit>
    HAL_Delay(500);
 80008d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008d6:	f001 fbb9 	bl	800204c <HAL_Delay>

    sprintf((char*)txd_message_buffer, "\r Enter SETUP Params \n\n");
 80008da:	49b5      	ldr	r1, [pc, #724]	@ (8000bb0 <main+0x370>)
 80008dc:	48b2      	ldr	r0, [pc, #712]	@ (8000ba8 <main+0x368>)
 80008de:	f005 f82f 	bl	8005940 <siprintf>
    HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 80008e2:	48b1      	ldr	r0, [pc, #708]	@ (8000ba8 <main+0x368>)
 80008e4:	f7ff fc7c 	bl	80001e0 <strlen>
 80008e8:	4603      	mov	r3, r0
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	f04f 33ff 	mov.w	r3, #4294967295
 80008f0:	49ad      	ldr	r1, [pc, #692]	@ (8000ba8 <main+0x368>)
 80008f2:	48ae      	ldr	r0, [pc, #696]	@ (8000bac <main+0x36c>)
 80008f4:	f003 ff54 	bl	80047a0 <HAL_UART_Transmit>

    sprintf((char*)txd_message_buffer, "\r\n Enter FIRST PIPELINE CHOICE FOR CONNECTION (0 for DEMO): ");
 80008f8:	49ae      	ldr	r1, [pc, #696]	@ (8000bb4 <main+0x374>)
 80008fa:	48ab      	ldr	r0, [pc, #684]	@ (8000ba8 <main+0x368>)
 80008fc:	f005 f820 	bl	8005940 <siprintf>
    HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 8000900:	48a9      	ldr	r0, [pc, #676]	@ (8000ba8 <main+0x368>)
 8000902:	f7ff fc6d 	bl	80001e0 <strlen>
 8000906:	4603      	mov	r3, r0
 8000908:	b29a      	uxth	r2, r3
 800090a:	f04f 33ff 	mov.w	r3, #4294967295
 800090e:	49a6      	ldr	r1, [pc, #664]	@ (8000ba8 <main+0x368>)
 8000910:	48a6      	ldr	r0, [pc, #664]	@ (8000bac <main+0x36c>)
 8000912:	f003 ff45 	bl	80047a0 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart6, (uint8_t *)buffer, 1, HAL_MAX_DELAY);
 8000916:	1d39      	adds	r1, r7, #4
 8000918:	f04f 33ff 	mov.w	r3, #4294967295
 800091c:	2201      	movs	r2, #1
 800091e:	48a3      	ldr	r0, [pc, #652]	@ (8000bac <main+0x36c>)
 8000920:	f003 ffc9 	bl	80048b6 <HAL_UART_Receive>
    HAL_UART_Transmit(&huart6, (uint8_t *)buffer, 1, HAL_MAX_DELAY);
 8000924:	1d39      	adds	r1, r7, #4
 8000926:	f04f 33ff 	mov.w	r3, #4294967295
 800092a:	2201      	movs	r2, #1
 800092c:	489f      	ldr	r0, [pc, #636]	@ (8000bac <main+0x36c>)
 800092e:	f003 ff37 	bl	80047a0 <HAL_UART_Transmit>
    setupInputs[0] = atoi(buffer);
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	4618      	mov	r0, r3
 8000936:	f004 ff7b 	bl	8005830 <atoi>
 800093a:	4603      	mov	r3, r0
 800093c:	b2db      	uxtb	r3, r3
 800093e:	723b      	strb	r3, [r7, #8]

    sprintf((char*)txd_message_buffer, "\r\n Enter FIRST PIPELINE CHOICE FOR MOTOR PWM (0 for DEMO): ");
 8000940:	499d      	ldr	r1, [pc, #628]	@ (8000bb8 <main+0x378>)
 8000942:	4899      	ldr	r0, [pc, #612]	@ (8000ba8 <main+0x368>)
 8000944:	f004 fffc 	bl	8005940 <siprintf>
    HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 8000948:	4897      	ldr	r0, [pc, #604]	@ (8000ba8 <main+0x368>)
 800094a:	f7ff fc49 	bl	80001e0 <strlen>
 800094e:	4603      	mov	r3, r0
 8000950:	b29a      	uxth	r2, r3
 8000952:	f04f 33ff 	mov.w	r3, #4294967295
 8000956:	4994      	ldr	r1, [pc, #592]	@ (8000ba8 <main+0x368>)
 8000958:	4894      	ldr	r0, [pc, #592]	@ (8000bac <main+0x36c>)
 800095a:	f003 ff21 	bl	80047a0 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart6, (uint8_t *)buffer, 1, HAL_MAX_DELAY);
 800095e:	1d39      	adds	r1, r7, #4
 8000960:	f04f 33ff 	mov.w	r3, #4294967295
 8000964:	2201      	movs	r2, #1
 8000966:	4891      	ldr	r0, [pc, #580]	@ (8000bac <main+0x36c>)
 8000968:	f003 ffa5 	bl	80048b6 <HAL_UART_Receive>
    HAL_UART_Transmit(&huart6, (uint8_t *)buffer, 1, HAL_MAX_DELAY);
 800096c:	1d39      	adds	r1, r7, #4
 800096e:	f04f 33ff 	mov.w	r3, #4294967295
 8000972:	2201      	movs	r2, #1
 8000974:	488d      	ldr	r0, [pc, #564]	@ (8000bac <main+0x36c>)
 8000976:	f003 ff13 	bl	80047a0 <HAL_UART_Transmit>
    setupInputs[1] = atoi(buffer);
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	4618      	mov	r0, r3
 800097e:	f004 ff57 	bl	8005830 <atoi>
 8000982:	4603      	mov	r3, r0
 8000984:	b2db      	uxtb	r3, r3
 8000986:	727b      	strb	r3, [r7, #9]

    sprintf((char*)txd_message_buffer, "\r\n Enter SECOND ZONE CHOICE FOR CONNECTION (1-3): ");
 8000988:	498c      	ldr	r1, [pc, #560]	@ (8000bbc <main+0x37c>)
 800098a:	4887      	ldr	r0, [pc, #540]	@ (8000ba8 <main+0x368>)
 800098c:	f004 ffd8 	bl	8005940 <siprintf>
    HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 8000990:	4885      	ldr	r0, [pc, #532]	@ (8000ba8 <main+0x368>)
 8000992:	f7ff fc25 	bl	80001e0 <strlen>
 8000996:	4603      	mov	r3, r0
 8000998:	b29a      	uxth	r2, r3
 800099a:	f04f 33ff 	mov.w	r3, #4294967295
 800099e:	4982      	ldr	r1, [pc, #520]	@ (8000ba8 <main+0x368>)
 80009a0:	4882      	ldr	r0, [pc, #520]	@ (8000bac <main+0x36c>)
 80009a2:	f003 fefd 	bl	80047a0 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart6, (uint8_t *)buffer, 1, HAL_MAX_DELAY);
 80009a6:	1d39      	adds	r1, r7, #4
 80009a8:	f04f 33ff 	mov.w	r3, #4294967295
 80009ac:	2201      	movs	r2, #1
 80009ae:	487f      	ldr	r0, [pc, #508]	@ (8000bac <main+0x36c>)
 80009b0:	f003 ff81 	bl	80048b6 <HAL_UART_Receive>
    HAL_UART_Transmit(&huart6, (uint8_t *)buffer, 1, HAL_MAX_DELAY);
 80009b4:	1d39      	adds	r1, r7, #4
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	2201      	movs	r2, #1
 80009bc:	487b      	ldr	r0, [pc, #492]	@ (8000bac <main+0x36c>)
 80009be:	f003 feef 	bl	80047a0 <HAL_UART_Transmit>
    setupInputs[2] = atoi(buffer);
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	4618      	mov	r0, r3
 80009c6:	f004 ff33 	bl	8005830 <atoi>
 80009ca:	4603      	mov	r3, r0
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	72bb      	strb	r3, [r7, #10]

    sprintf((char*)txd_message_buffer, "\r\n Enter SECOND ZONE CHOICE FOR MOTOR PWM (1-3): ");
 80009d0:	497b      	ldr	r1, [pc, #492]	@ (8000bc0 <main+0x380>)
 80009d2:	4875      	ldr	r0, [pc, #468]	@ (8000ba8 <main+0x368>)
 80009d4:	f004 ffb4 	bl	8005940 <siprintf>
    HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 80009d8:	4873      	ldr	r0, [pc, #460]	@ (8000ba8 <main+0x368>)
 80009da:	f7ff fc01 	bl	80001e0 <strlen>
 80009de:	4603      	mov	r3, r0
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
 80009e6:	4970      	ldr	r1, [pc, #448]	@ (8000ba8 <main+0x368>)
 80009e8:	4870      	ldr	r0, [pc, #448]	@ (8000bac <main+0x36c>)
 80009ea:	f003 fed9 	bl	80047a0 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart6, (uint8_t *)buffer, 1, HAL_MAX_DELAY);
 80009ee:	1d39      	adds	r1, r7, #4
 80009f0:	f04f 33ff 	mov.w	r3, #4294967295
 80009f4:	2201      	movs	r2, #1
 80009f6:	486d      	ldr	r0, [pc, #436]	@ (8000bac <main+0x36c>)
 80009f8:	f003 ff5d 	bl	80048b6 <HAL_UART_Receive>
    HAL_UART_Transmit(&huart6, (uint8_t *)buffer, 1, HAL_MAX_DELAY);
 80009fc:	1d39      	adds	r1, r7, #4
 80009fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000a02:	2201      	movs	r2, #1
 8000a04:	4869      	ldr	r0, [pc, #420]	@ (8000bac <main+0x36c>)
 8000a06:	f003 fecb 	bl	80047a0 <HAL_UART_Transmit>
    setupInputs[3] = atoi(buffer);
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f004 ff0f 	bl	8005830 <atoi>
 8000a12:	4603      	mov	r3, r0
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	72fb      	strb	r3, [r7, #11]

    sprintf((char*)txd_message_buffer, "\r\n Enter THIRD ZONE CHOICE FOR CONNECTION (1-3): ");
 8000a18:	496a      	ldr	r1, [pc, #424]	@ (8000bc4 <main+0x384>)
 8000a1a:	4863      	ldr	r0, [pc, #396]	@ (8000ba8 <main+0x368>)
 8000a1c:	f004 ff90 	bl	8005940 <siprintf>
    HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 8000a20:	4861      	ldr	r0, [pc, #388]	@ (8000ba8 <main+0x368>)
 8000a22:	f7ff fbdd 	bl	80001e0 <strlen>
 8000a26:	4603      	mov	r3, r0
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2e:	495e      	ldr	r1, [pc, #376]	@ (8000ba8 <main+0x368>)
 8000a30:	485e      	ldr	r0, [pc, #376]	@ (8000bac <main+0x36c>)
 8000a32:	f003 feb5 	bl	80047a0 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart6, (uint8_t *)buffer, 1, HAL_MAX_DELAY);
 8000a36:	1d39      	adds	r1, r7, #4
 8000a38:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	485b      	ldr	r0, [pc, #364]	@ (8000bac <main+0x36c>)
 8000a40:	f003 ff39 	bl	80048b6 <HAL_UART_Receive>
    HAL_UART_Transmit(&huart6, (uint8_t *)buffer, 1, HAL_MAX_DELAY);
 8000a44:	1d39      	adds	r1, r7, #4
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	4857      	ldr	r0, [pc, #348]	@ (8000bac <main+0x36c>)
 8000a4e:	f003 fea7 	bl	80047a0 <HAL_UART_Transmit>
    setupInputs[4] = atoi(buffer);
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	4618      	mov	r0, r3
 8000a56:	f004 feeb 	bl	8005830 <atoi>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	733b      	strb	r3, [r7, #12]

    sprintf((char*)txd_message_buffer, "\r\n Enter THIRD ZONE CHOICE FOR MOTOR PWM (1-3): ");
 8000a60:	4959      	ldr	r1, [pc, #356]	@ (8000bc8 <main+0x388>)
 8000a62:	4851      	ldr	r0, [pc, #324]	@ (8000ba8 <main+0x368>)
 8000a64:	f004 ff6c 	bl	8005940 <siprintf>
    HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 8000a68:	484f      	ldr	r0, [pc, #316]	@ (8000ba8 <main+0x368>)
 8000a6a:	f7ff fbb9 	bl	80001e0 <strlen>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295
 8000a76:	494c      	ldr	r1, [pc, #304]	@ (8000ba8 <main+0x368>)
 8000a78:	484c      	ldr	r0, [pc, #304]	@ (8000bac <main+0x36c>)
 8000a7a:	f003 fe91 	bl	80047a0 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart6, (uint8_t *)buffer, 1, HAL_MAX_DELAY);
 8000a7e:	1d39      	adds	r1, r7, #4
 8000a80:	f04f 33ff 	mov.w	r3, #4294967295
 8000a84:	2201      	movs	r2, #1
 8000a86:	4849      	ldr	r0, [pc, #292]	@ (8000bac <main+0x36c>)
 8000a88:	f003 ff15 	bl	80048b6 <HAL_UART_Receive>
    HAL_UART_Transmit(&huart6, (uint8_t *)buffer, 1, HAL_MAX_DELAY);
 8000a8c:	1d39      	adds	r1, r7, #4
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a92:	2201      	movs	r2, #1
 8000a94:	4845      	ldr	r0, [pc, #276]	@ (8000bac <main+0x36c>)
 8000a96:	f003 fe83 	bl	80047a0 <HAL_UART_Transmit>
    setupInputs[5] = atoi(buffer);
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f004 fec7 	bl	8005830 <atoi>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	737b      	strb	r3, [r7, #13]

    sprintf((char*)txd_message_buffer, "\r\n Enter FORTH ZONE CHOICE FOR CONNECTION (1-3): ");
 8000aa8:	4948      	ldr	r1, [pc, #288]	@ (8000bcc <main+0x38c>)
 8000aaa:	483f      	ldr	r0, [pc, #252]	@ (8000ba8 <main+0x368>)
 8000aac:	f004 ff48 	bl	8005940 <siprintf>
    HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 8000ab0:	483d      	ldr	r0, [pc, #244]	@ (8000ba8 <main+0x368>)
 8000ab2:	f7ff fb95 	bl	80001e0 <strlen>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	f04f 33ff 	mov.w	r3, #4294967295
 8000abe:	493a      	ldr	r1, [pc, #232]	@ (8000ba8 <main+0x368>)
 8000ac0:	483a      	ldr	r0, [pc, #232]	@ (8000bac <main+0x36c>)
 8000ac2:	f003 fe6d 	bl	80047a0 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart6, (uint8_t *)buffer, 1, HAL_MAX_DELAY);
 8000ac6:	1d39      	adds	r1, r7, #4
 8000ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8000acc:	2201      	movs	r2, #1
 8000ace:	4837      	ldr	r0, [pc, #220]	@ (8000bac <main+0x36c>)
 8000ad0:	f003 fef1 	bl	80048b6 <HAL_UART_Receive>
    HAL_UART_Transmit(&huart6, (uint8_t *)buffer, 1, HAL_MAX_DELAY);
 8000ad4:	1d39      	adds	r1, r7, #4
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ada:	2201      	movs	r2, #1
 8000adc:	4833      	ldr	r0, [pc, #204]	@ (8000bac <main+0x36c>)
 8000ade:	f003 fe5f 	bl	80047a0 <HAL_UART_Transmit>
    setupInputs[6] = atoi(buffer);
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f004 fea3 	bl	8005830 <atoi>
 8000aea:	4603      	mov	r3, r0
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	73bb      	strb	r3, [r7, #14]

    sprintf((char*)txd_message_buffer, "\r\n Enter FORTH ZONE CHOICE FOR MOTOR PWM (1-3): ");
 8000af0:	4937      	ldr	r1, [pc, #220]	@ (8000bd0 <main+0x390>)
 8000af2:	482d      	ldr	r0, [pc, #180]	@ (8000ba8 <main+0x368>)
 8000af4:	f004 ff24 	bl	8005940 <siprintf>
    HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 8000af8:	482b      	ldr	r0, [pc, #172]	@ (8000ba8 <main+0x368>)
 8000afa:	f7ff fb71 	bl	80001e0 <strlen>
 8000afe:	4603      	mov	r3, r0
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295
 8000b06:	4928      	ldr	r1, [pc, #160]	@ (8000ba8 <main+0x368>)
 8000b08:	4828      	ldr	r0, [pc, #160]	@ (8000bac <main+0x36c>)
 8000b0a:	f003 fe49 	bl	80047a0 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart6, (uint8_t *)buffer, 1, HAL_MAX_DELAY);
 8000b0e:	1d39      	adds	r1, r7, #4
 8000b10:	f04f 33ff 	mov.w	r3, #4294967295
 8000b14:	2201      	movs	r2, #1
 8000b16:	4825      	ldr	r0, [pc, #148]	@ (8000bac <main+0x36c>)
 8000b18:	f003 fecd 	bl	80048b6 <HAL_UART_Receive>
    HAL_UART_Transmit(&huart6, (uint8_t *)buffer, 1, HAL_MAX_DELAY);
 8000b1c:	1d39      	adds	r1, r7, #4
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b22:	2201      	movs	r2, #1
 8000b24:	4821      	ldr	r0, [pc, #132]	@ (8000bac <main+0x36c>)
 8000b26:	f003 fe3b 	bl	80047a0 <HAL_UART_Transmit>
    setupInputs[7] = atoi(buffer);
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f004 fe7f 	bl	8005830 <atoi>
 8000b32:	4603      	mov	r3, r0
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	73fb      	strb	r3, [r7, #15]

    sprintf((char*)txd_message_buffer, "\r\n Enter CURRENT WALL CLOCK TIME (00 for DEMO): ");
 8000b38:	4926      	ldr	r1, [pc, #152]	@ (8000bd4 <main+0x394>)
 8000b3a:	481b      	ldr	r0, [pc, #108]	@ (8000ba8 <main+0x368>)
 8000b3c:	f004 ff00 	bl	8005940 <siprintf>
    HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 8000b40:	4819      	ldr	r0, [pc, #100]	@ (8000ba8 <main+0x368>)
 8000b42:	f7ff fb4d 	bl	80001e0 <strlen>
 8000b46:	4603      	mov	r3, r0
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4e:	4916      	ldr	r1, [pc, #88]	@ (8000ba8 <main+0x368>)
 8000b50:	4816      	ldr	r0, [pc, #88]	@ (8000bac <main+0x36c>)
 8000b52:	f003 fe25 	bl	80047a0 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart6, (uint8_t *)buffer, 2, HAL_MAX_DELAY);
 8000b56:	1d39      	adds	r1, r7, #4
 8000b58:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5c:	2202      	movs	r2, #2
 8000b5e:	4813      	ldr	r0, [pc, #76]	@ (8000bac <main+0x36c>)
 8000b60:	f003 fea9 	bl	80048b6 <HAL_UART_Receive>
    HAL_UART_Transmit(&huart6, (uint8_t *)buffer, 2, HAL_MAX_DELAY);
 8000b64:	1d39      	adds	r1, r7, #4
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6a:	2202      	movs	r2, #2
 8000b6c:	480f      	ldr	r0, [pc, #60]	@ (8000bac <main+0x36c>)
 8000b6e:	f003 fe17 	bl	80047a0 <HAL_UART_Transmit>
    setupInputs[8] = atoi(buffer);
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	4618      	mov	r0, r3
 8000b76:	f004 fe5b 	bl	8005830 <atoi>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	743b      	strb	r3, [r7, #16]

    sprintf((char*)txd_message_buffer, "\r\n Enter INLET WALL CLOCK START TIME (00 for DEMO): ");
 8000b80:	4915      	ldr	r1, [pc, #84]	@ (8000bd8 <main+0x398>)
 8000b82:	4809      	ldr	r0, [pc, #36]	@ (8000ba8 <main+0x368>)
 8000b84:	f004 fedc 	bl	8005940 <siprintf>
    HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 8000b88:	4807      	ldr	r0, [pc, #28]	@ (8000ba8 <main+0x368>)
 8000b8a:	f7ff fb29 	bl	80001e0 <strlen>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	e023      	b.n	8000bdc <main+0x39c>
 8000b94:	20000104 	.word	0x20000104
 8000b98:	40010000 	.word	0x40010000
 8000b9c:	20000224 	.word	0x20000224
 8000ba0:	40020000 	.word	0x40020000
 8000ba4:	08006298 	.word	0x08006298
 8000ba8:	20000078 	.word	0x20000078
 8000bac:	200001dc 	.word	0x200001dc
 8000bb0:	080062a8 	.word	0x080062a8
 8000bb4:	080062c0 	.word	0x080062c0
 8000bb8:	08006300 	.word	0x08006300
 8000bbc:	0800633c 	.word	0x0800633c
 8000bc0:	08006370 	.word	0x08006370
 8000bc4:	080063a4 	.word	0x080063a4
 8000bc8:	080063d8 	.word	0x080063d8
 8000bcc:	0800640c 	.word	0x0800640c
 8000bd0:	08006440 	.word	0x08006440
 8000bd4:	08006474 	.word	0x08006474
 8000bd8:	080064a8 	.word	0x080064a8
 8000bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000be0:	49c4      	ldr	r1, [pc, #784]	@ (8000ef4 <main+0x6b4>)
 8000be2:	48c5      	ldr	r0, [pc, #788]	@ (8000ef8 <main+0x6b8>)
 8000be4:	f003 fddc 	bl	80047a0 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart6, (uint8_t *)buffer, 2, HAL_MAX_DELAY);
 8000be8:	1d39      	adds	r1, r7, #4
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295
 8000bee:	2202      	movs	r2, #2
 8000bf0:	48c1      	ldr	r0, [pc, #772]	@ (8000ef8 <main+0x6b8>)
 8000bf2:	f003 fe60 	bl	80048b6 <HAL_UART_Receive>
    HAL_UART_Transmit(&huart6, (uint8_t *)buffer, 2, HAL_MAX_DELAY);
 8000bf6:	1d39      	adds	r1, r7, #4
 8000bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	48be      	ldr	r0, [pc, #760]	@ (8000ef8 <main+0x6b8>)
 8000c00:	f003 fdce 	bl	80047a0 <HAL_UART_Transmit>
    setupInputs[9] = atoi(buffer);
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	4618      	mov	r0, r3
 8000c08:	f004 fe12 	bl	8005830 <atoi>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	747b      	strb	r3, [r7, #17]

    sprintf((char*)txd_message_buffer, "\r\n Enter INLET WALL CLOCK STOP TIME (07 for DEMO): ");
 8000c12:	49ba      	ldr	r1, [pc, #744]	@ (8000efc <main+0x6bc>)
 8000c14:	48b7      	ldr	r0, [pc, #732]	@ (8000ef4 <main+0x6b4>)
 8000c16:	f004 fe93 	bl	8005940 <siprintf>
    HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 8000c1a:	48b6      	ldr	r0, [pc, #728]	@ (8000ef4 <main+0x6b4>)
 8000c1c:	f7ff fae0 	bl	80001e0 <strlen>
 8000c20:	4603      	mov	r3, r0
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	f04f 33ff 	mov.w	r3, #4294967295
 8000c28:	49b2      	ldr	r1, [pc, #712]	@ (8000ef4 <main+0x6b4>)
 8000c2a:	48b3      	ldr	r0, [pc, #716]	@ (8000ef8 <main+0x6b8>)
 8000c2c:	f003 fdb8 	bl	80047a0 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart6, (uint8_t *)buffer, 2, HAL_MAX_DELAY);
 8000c30:	1d39      	adds	r1, r7, #4
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
 8000c36:	2202      	movs	r2, #2
 8000c38:	48af      	ldr	r0, [pc, #700]	@ (8000ef8 <main+0x6b8>)
 8000c3a:	f003 fe3c 	bl	80048b6 <HAL_UART_Receive>
    HAL_UART_Transmit(&huart6, (uint8_t *)buffer, 2, HAL_MAX_DELAY);
 8000c3e:	1d39      	adds	r1, r7, #4
 8000c40:	f04f 33ff 	mov.w	r3, #4294967295
 8000c44:	2202      	movs	r2, #2
 8000c46:	48ac      	ldr	r0, [pc, #688]	@ (8000ef8 <main+0x6b8>)
 8000c48:	f003 fdaa 	bl	80047a0 <HAL_UART_Transmit>
    setupInputs[10] = atoi(buffer);
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f004 fdee 	bl	8005830 <atoi>
 8000c54:	4603      	mov	r3, r0
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	74bb      	strb	r3, [r7, #18]

    sprintf((char*)txd_message_buffer, "\r\n Enter FIRST ZONE CHOICE WALL CLOCK START TIME (08-23): ");
 8000c5a:	49a9      	ldr	r1, [pc, #676]	@ (8000f00 <main+0x6c0>)
 8000c5c:	48a5      	ldr	r0, [pc, #660]	@ (8000ef4 <main+0x6b4>)
 8000c5e:	f004 fe6f 	bl	8005940 <siprintf>
    HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 8000c62:	48a4      	ldr	r0, [pc, #656]	@ (8000ef4 <main+0x6b4>)
 8000c64:	f7ff fabc 	bl	80001e0 <strlen>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c70:	49a0      	ldr	r1, [pc, #640]	@ (8000ef4 <main+0x6b4>)
 8000c72:	48a1      	ldr	r0, [pc, #644]	@ (8000ef8 <main+0x6b8>)
 8000c74:	f003 fd94 	bl	80047a0 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart6, (uint8_t *)buffer, 2, HAL_MAX_DELAY);
 8000c78:	1d39      	adds	r1, r7, #4
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7e:	2202      	movs	r2, #2
 8000c80:	489d      	ldr	r0, [pc, #628]	@ (8000ef8 <main+0x6b8>)
 8000c82:	f003 fe18 	bl	80048b6 <HAL_UART_Receive>
    HAL_UART_Transmit(&huart6, (uint8_t *)buffer, 2, HAL_MAX_DELAY);
 8000c86:	1d39      	adds	r1, r7, #4
 8000c88:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	489a      	ldr	r0, [pc, #616]	@ (8000ef8 <main+0x6b8>)
 8000c90:	f003 fd86 	bl	80047a0 <HAL_UART_Transmit>
    setupInputs[11] = atoi(buffer);
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	4618      	mov	r0, r3
 8000c98:	f004 fdca 	bl	8005830 <atoi>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	74fb      	strb	r3, [r7, #19]

    sprintf((char*)txd_message_buffer, "\r\n Enter FIRST ZONE CHOICE WALL CLOCK STOP TIME (09-23): ");
 8000ca2:	4998      	ldr	r1, [pc, #608]	@ (8000f04 <main+0x6c4>)
 8000ca4:	4893      	ldr	r0, [pc, #588]	@ (8000ef4 <main+0x6b4>)
 8000ca6:	f004 fe4b 	bl	8005940 <siprintf>
    HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 8000caa:	4892      	ldr	r0, [pc, #584]	@ (8000ef4 <main+0x6b4>)
 8000cac:	f7ff fa98 	bl	80001e0 <strlen>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb8:	498e      	ldr	r1, [pc, #568]	@ (8000ef4 <main+0x6b4>)
 8000cba:	488f      	ldr	r0, [pc, #572]	@ (8000ef8 <main+0x6b8>)
 8000cbc:	f003 fd70 	bl	80047a0 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart6, (uint8_t *)buffer, 2, HAL_MAX_DELAY);
 8000cc0:	1d39      	adds	r1, r7, #4
 8000cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc6:	2202      	movs	r2, #2
 8000cc8:	488b      	ldr	r0, [pc, #556]	@ (8000ef8 <main+0x6b8>)
 8000cca:	f003 fdf4 	bl	80048b6 <HAL_UART_Receive>
    HAL_UART_Transmit(&huart6, (uint8_t *)buffer, 2, HAL_MAX_DELAY);
 8000cce:	1d39      	adds	r1, r7, #4
 8000cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	4888      	ldr	r0, [pc, #544]	@ (8000ef8 <main+0x6b8>)
 8000cd8:	f003 fd62 	bl	80047a0 <HAL_UART_Transmit>
    setupInputs[12] = atoi(buffer);
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f004 fda6 	bl	8005830 <atoi>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	753b      	strb	r3, [r7, #20]

    sprintf((char*)txd_message_buffer, "\r\n Enter SECOND ZONE CHOICE WALL CLOCK START TIME (08-23): ");
 8000cea:	4987      	ldr	r1, [pc, #540]	@ (8000f08 <main+0x6c8>)
 8000cec:	4881      	ldr	r0, [pc, #516]	@ (8000ef4 <main+0x6b4>)
 8000cee:	f004 fe27 	bl	8005940 <siprintf>
    HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 8000cf2:	4880      	ldr	r0, [pc, #512]	@ (8000ef4 <main+0x6b4>)
 8000cf4:	f7ff fa74 	bl	80001e0 <strlen>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000d00:	497c      	ldr	r1, [pc, #496]	@ (8000ef4 <main+0x6b4>)
 8000d02:	487d      	ldr	r0, [pc, #500]	@ (8000ef8 <main+0x6b8>)
 8000d04:	f003 fd4c 	bl	80047a0 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart6, (uint8_t *)buffer, 2, HAL_MAX_DELAY);
 8000d08:	1d39      	adds	r1, r7, #4
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0e:	2202      	movs	r2, #2
 8000d10:	4879      	ldr	r0, [pc, #484]	@ (8000ef8 <main+0x6b8>)
 8000d12:	f003 fdd0 	bl	80048b6 <HAL_UART_Receive>
    HAL_UART_Transmit(&huart6, (uint8_t *)buffer, 2, HAL_MAX_DELAY);
 8000d16:	1d39      	adds	r1, r7, #4
 8000d18:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	4876      	ldr	r0, [pc, #472]	@ (8000ef8 <main+0x6b8>)
 8000d20:	f003 fd3e 	bl	80047a0 <HAL_UART_Transmit>
    setupInputs[13] = atoi(buffer);
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	4618      	mov	r0, r3
 8000d28:	f004 fd82 	bl	8005830 <atoi>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	757b      	strb	r3, [r7, #21]

    sprintf((char*)txd_message_buffer, "\r\n Enter SECOND ZONE CHOICE WALL CLOCK STOP TIME (09-23): ");
 8000d32:	4976      	ldr	r1, [pc, #472]	@ (8000f0c <main+0x6cc>)
 8000d34:	486f      	ldr	r0, [pc, #444]	@ (8000ef4 <main+0x6b4>)
 8000d36:	f004 fe03 	bl	8005940 <siprintf>
    HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 8000d3a:	486e      	ldr	r0, [pc, #440]	@ (8000ef4 <main+0x6b4>)
 8000d3c:	f7ff fa50 	bl	80001e0 <strlen>
 8000d40:	4603      	mov	r3, r0
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	f04f 33ff 	mov.w	r3, #4294967295
 8000d48:	496a      	ldr	r1, [pc, #424]	@ (8000ef4 <main+0x6b4>)
 8000d4a:	486b      	ldr	r0, [pc, #428]	@ (8000ef8 <main+0x6b8>)
 8000d4c:	f003 fd28 	bl	80047a0 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart6, (uint8_t *)buffer, 2, HAL_MAX_DELAY);
 8000d50:	1d39      	adds	r1, r7, #4
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295
 8000d56:	2202      	movs	r2, #2
 8000d58:	4867      	ldr	r0, [pc, #412]	@ (8000ef8 <main+0x6b8>)
 8000d5a:	f003 fdac 	bl	80048b6 <HAL_UART_Receive>
    HAL_UART_Transmit(&huart6, (uint8_t *)buffer, 2, HAL_MAX_DELAY);
 8000d5e:	1d39      	adds	r1, r7, #4
 8000d60:	f04f 33ff 	mov.w	r3, #4294967295
 8000d64:	2202      	movs	r2, #2
 8000d66:	4864      	ldr	r0, [pc, #400]	@ (8000ef8 <main+0x6b8>)
 8000d68:	f003 fd1a 	bl	80047a0 <HAL_UART_Transmit>
    setupInputs[14] = atoi(buffer);
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f004 fd5e 	bl	8005830 <atoi>
 8000d74:	4603      	mov	r3, r0
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	75bb      	strb	r3, [r7, #22]

    sprintf((char*)txd_message_buffer, "\r\n Enter THIRD ZONE CHOICE WALL CLOCK START TIME (08-23): ");
 8000d7a:	4965      	ldr	r1, [pc, #404]	@ (8000f10 <main+0x6d0>)
 8000d7c:	485d      	ldr	r0, [pc, #372]	@ (8000ef4 <main+0x6b4>)
 8000d7e:	f004 fddf 	bl	8005940 <siprintf>
    HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 8000d82:	485c      	ldr	r0, [pc, #368]	@ (8000ef4 <main+0x6b4>)
 8000d84:	f7ff fa2c 	bl	80001e0 <strlen>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d90:	4958      	ldr	r1, [pc, #352]	@ (8000ef4 <main+0x6b4>)
 8000d92:	4859      	ldr	r0, [pc, #356]	@ (8000ef8 <main+0x6b8>)
 8000d94:	f003 fd04 	bl	80047a0 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart6, (uint8_t *)buffer, 2, HAL_MAX_DELAY);
 8000d98:	1d39      	adds	r1, r7, #4
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9e:	2202      	movs	r2, #2
 8000da0:	4855      	ldr	r0, [pc, #340]	@ (8000ef8 <main+0x6b8>)
 8000da2:	f003 fd88 	bl	80048b6 <HAL_UART_Receive>
    HAL_UART_Transmit(&huart6, (uint8_t *)buffer, 2, HAL_MAX_DELAY);
 8000da6:	1d39      	adds	r1, r7, #4
 8000da8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dac:	2202      	movs	r2, #2
 8000dae:	4852      	ldr	r0, [pc, #328]	@ (8000ef8 <main+0x6b8>)
 8000db0:	f003 fcf6 	bl	80047a0 <HAL_UART_Transmit>
    setupInputs[15] = atoi(buffer);
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	4618      	mov	r0, r3
 8000db8:	f004 fd3a 	bl	8005830 <atoi>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	75fb      	strb	r3, [r7, #23]

    sprintf((char*)txd_message_buffer, "\r\n Enter THIRD ZONE CHOICE WALL CLOCK STOP TIME (09-23): ");
 8000dc2:	4954      	ldr	r1, [pc, #336]	@ (8000f14 <main+0x6d4>)
 8000dc4:	484b      	ldr	r0, [pc, #300]	@ (8000ef4 <main+0x6b4>)
 8000dc6:	f004 fdbb 	bl	8005940 <siprintf>
    HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 8000dca:	484a      	ldr	r0, [pc, #296]	@ (8000ef4 <main+0x6b4>)
 8000dcc:	f7ff fa08 	bl	80001e0 <strlen>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd8:	4946      	ldr	r1, [pc, #280]	@ (8000ef4 <main+0x6b4>)
 8000dda:	4847      	ldr	r0, [pc, #284]	@ (8000ef8 <main+0x6b8>)
 8000ddc:	f003 fce0 	bl	80047a0 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart6, (uint8_t *)buffer, 2, HAL_MAX_DELAY);
 8000de0:	1d39      	adds	r1, r7, #4
 8000de2:	f04f 33ff 	mov.w	r3, #4294967295
 8000de6:	2202      	movs	r2, #2
 8000de8:	4843      	ldr	r0, [pc, #268]	@ (8000ef8 <main+0x6b8>)
 8000dea:	f003 fd64 	bl	80048b6 <HAL_UART_Receive>
    HAL_UART_Transmit(&huart6, (uint8_t *)buffer, 2, HAL_MAX_DELAY);
 8000dee:	1d39      	adds	r1, r7, #4
 8000df0:	f04f 33ff 	mov.w	r3, #4294967295
 8000df4:	2202      	movs	r2, #2
 8000df6:	4840      	ldr	r0, [pc, #256]	@ (8000ef8 <main+0x6b8>)
 8000df8:	f003 fcd2 	bl	80047a0 <HAL_UART_Transmit>
    setupInputs[16] = atoi(buffer);
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f004 fd16 	bl	8005830 <atoi>
 8000e04:	4603      	mov	r3, r0
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	763b      	strb	r3, [r7, #24]

    sprintf((char*)txd_message_buffer, "\r\n\n Printing Set Up Parameters \n");
 8000e0a:	4943      	ldr	r1, [pc, #268]	@ (8000f18 <main+0x6d8>)
 8000e0c:	4839      	ldr	r0, [pc, #228]	@ (8000ef4 <main+0x6b4>)
 8000e0e:	f004 fd97 	bl	8005940 <siprintf>
    HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 8000e12:	4838      	ldr	r0, [pc, #224]	@ (8000ef4 <main+0x6b4>)
 8000e14:	f7ff f9e4 	bl	80001e0 <strlen>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e20:	4934      	ldr	r1, [pc, #208]	@ (8000ef4 <main+0x6b4>)
 8000e22:	4835      	ldr	r0, [pc, #212]	@ (8000ef8 <main+0x6b8>)
 8000e24:	f003 fcbc 	bl	80047a0 <HAL_UART_Transmit>

    sprintf((char*)txd_message_buffer, "\r\n FIRST PIPELINE CHOICE: 0 \t");
 8000e28:	493c      	ldr	r1, [pc, #240]	@ (8000f1c <main+0x6dc>)
 8000e2a:	4832      	ldr	r0, [pc, #200]	@ (8000ef4 <main+0x6b4>)
 8000e2c:	f004 fd88 	bl	8005940 <siprintf>
    HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 8000e30:	4830      	ldr	r0, [pc, #192]	@ (8000ef4 <main+0x6b4>)
 8000e32:	f7ff f9d5 	bl	80001e0 <strlen>
 8000e36:	4603      	mov	r3, r0
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3e:	492d      	ldr	r1, [pc, #180]	@ (8000ef4 <main+0x6b4>)
 8000e40:	482d      	ldr	r0, [pc, #180]	@ (8000ef8 <main+0x6b8>)
 8000e42:	f003 fcad 	bl	80047a0 <HAL_UART_Transmit>
    sprintf((char*)txd_message_buffer, "Pump PWR: %d\t", setupInputs[1]);
 8000e46:	7a7b      	ldrb	r3, [r7, #9]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4935      	ldr	r1, [pc, #212]	@ (8000f20 <main+0x6e0>)
 8000e4c:	4829      	ldr	r0, [pc, #164]	@ (8000ef4 <main+0x6b4>)
 8000e4e:	f004 fd77 	bl	8005940 <siprintf>
    HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 8000e52:	4828      	ldr	r0, [pc, #160]	@ (8000ef4 <main+0x6b4>)
 8000e54:	f7ff f9c4 	bl	80001e0 <strlen>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e60:	4924      	ldr	r1, [pc, #144]	@ (8000ef4 <main+0x6b4>)
 8000e62:	4825      	ldr	r0, [pc, #148]	@ (8000ef8 <main+0x6b8>)
 8000e64:	f003 fc9c 	bl	80047a0 <HAL_UART_Transmit>
    sprintf((char*)txd_message_buffer, "FIRST ZONE CHOICE WALL CLOCK START TIME: %d\t", setupInputs[11]);
 8000e68:	7cfb      	ldrb	r3, [r7, #19]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	492d      	ldr	r1, [pc, #180]	@ (8000f24 <main+0x6e4>)
 8000e6e:	4821      	ldr	r0, [pc, #132]	@ (8000ef4 <main+0x6b4>)
 8000e70:	f004 fd66 	bl	8005940 <siprintf>
    HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 8000e74:	481f      	ldr	r0, [pc, #124]	@ (8000ef4 <main+0x6b4>)
 8000e76:	f7ff f9b3 	bl	80001e0 <strlen>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e82:	491c      	ldr	r1, [pc, #112]	@ (8000ef4 <main+0x6b4>)
 8000e84:	481c      	ldr	r0, [pc, #112]	@ (8000ef8 <main+0x6b8>)
 8000e86:	f003 fc8b 	bl	80047a0 <HAL_UART_Transmit>
    sprintf((char*)txd_message_buffer, "FIRST ZONE CHOICE WALL CLOCK STOP TIME: %d\t", setupInputs[12]);
 8000e8a:	7d3b      	ldrb	r3, [r7, #20]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4926      	ldr	r1, [pc, #152]	@ (8000f28 <main+0x6e8>)
 8000e90:	4818      	ldr	r0, [pc, #96]	@ (8000ef4 <main+0x6b4>)
 8000e92:	f004 fd55 	bl	8005940 <siprintf>
    HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 8000e96:	4817      	ldr	r0, [pc, #92]	@ (8000ef4 <main+0x6b4>)
 8000e98:	f7ff f9a2 	bl	80001e0 <strlen>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea4:	4913      	ldr	r1, [pc, #76]	@ (8000ef4 <main+0x6b4>)
 8000ea6:	4814      	ldr	r0, [pc, #80]	@ (8000ef8 <main+0x6b8>)
 8000ea8:	f003 fc7a 	bl	80047a0 <HAL_UART_Transmit>

    sprintf((char*)txd_message_buffer, "\r\n SECOND ZONE CHOICE: %d \t", setupInputs[2]);
 8000eac:	7abb      	ldrb	r3, [r7, #10]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	491e      	ldr	r1, [pc, #120]	@ (8000f2c <main+0x6ec>)
 8000eb2:	4810      	ldr	r0, [pc, #64]	@ (8000ef4 <main+0x6b4>)
 8000eb4:	f004 fd44 	bl	8005940 <siprintf>
    HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 8000eb8:	480e      	ldr	r0, [pc, #56]	@ (8000ef4 <main+0x6b4>)
 8000eba:	f7ff f991 	bl	80001e0 <strlen>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec6:	490b      	ldr	r1, [pc, #44]	@ (8000ef4 <main+0x6b4>)
 8000ec8:	480b      	ldr	r0, [pc, #44]	@ (8000ef8 <main+0x6b8>)
 8000eca:	f003 fc69 	bl	80047a0 <HAL_UART_Transmit>
    sprintf((char*)txd_message_buffer, "Pump PWR: %d\t", setupInputs[3]);
 8000ece:	7afb      	ldrb	r3, [r7, #11]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4913      	ldr	r1, [pc, #76]	@ (8000f20 <main+0x6e0>)
 8000ed4:	4807      	ldr	r0, [pc, #28]	@ (8000ef4 <main+0x6b4>)
 8000ed6:	f004 fd33 	bl	8005940 <siprintf>
    HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 8000eda:	4806      	ldr	r0, [pc, #24]	@ (8000ef4 <main+0x6b4>)
 8000edc:	f7ff f980 	bl	80001e0 <strlen>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee8:	4902      	ldr	r1, [pc, #8]	@ (8000ef4 <main+0x6b4>)
 8000eea:	4803      	ldr	r0, [pc, #12]	@ (8000ef8 <main+0x6b8>)
 8000eec:	f003 fc58 	bl	80047a0 <HAL_UART_Transmit>
 8000ef0:	e01e      	b.n	8000f30 <main+0x6f0>
 8000ef2:	bf00      	nop
 8000ef4:	20000078 	.word	0x20000078
 8000ef8:	200001dc 	.word	0x200001dc
 8000efc:	080064e0 	.word	0x080064e0
 8000f00:	08006514 	.word	0x08006514
 8000f04:	08006550 	.word	0x08006550
 8000f08:	0800658c 	.word	0x0800658c
 8000f0c:	080065c8 	.word	0x080065c8
 8000f10:	08006604 	.word	0x08006604
 8000f14:	08006640 	.word	0x08006640
 8000f18:	0800667c 	.word	0x0800667c
 8000f1c:	080066a0 	.word	0x080066a0
 8000f20:	080066c0 	.word	0x080066c0
 8000f24:	080066d0 	.word	0x080066d0
 8000f28:	08006700 	.word	0x08006700
 8000f2c:	0800672c 	.word	0x0800672c
    sprintf((char*)txd_message_buffer, "SECOND ZONE CHOICE WALL CLOCK START TIME: %d\t", setupInputs[13]);
 8000f30:	7d7b      	ldrb	r3, [r7, #21]
 8000f32:	461a      	mov	r2, r3
 8000f34:	49aa      	ldr	r1, [pc, #680]	@ (80011e0 <main+0x9a0>)
 8000f36:	48ab      	ldr	r0, [pc, #684]	@ (80011e4 <main+0x9a4>)
 8000f38:	f004 fd02 	bl	8005940 <siprintf>
    HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 8000f3c:	48a9      	ldr	r0, [pc, #676]	@ (80011e4 <main+0x9a4>)
 8000f3e:	f7ff f94f 	bl	80001e0 <strlen>
 8000f42:	4603      	mov	r3, r0
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4a:	49a6      	ldr	r1, [pc, #664]	@ (80011e4 <main+0x9a4>)
 8000f4c:	48a6      	ldr	r0, [pc, #664]	@ (80011e8 <main+0x9a8>)
 8000f4e:	f003 fc27 	bl	80047a0 <HAL_UART_Transmit>
    sprintf((char*)txd_message_buffer, "SECOND ZONE CHOICE WALL CLOCK STOP TIME: %d\t", setupInputs[14]);
 8000f52:	7dbb      	ldrb	r3, [r7, #22]
 8000f54:	461a      	mov	r2, r3
 8000f56:	49a5      	ldr	r1, [pc, #660]	@ (80011ec <main+0x9ac>)
 8000f58:	48a2      	ldr	r0, [pc, #648]	@ (80011e4 <main+0x9a4>)
 8000f5a:	f004 fcf1 	bl	8005940 <siprintf>
    HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 8000f5e:	48a1      	ldr	r0, [pc, #644]	@ (80011e4 <main+0x9a4>)
 8000f60:	f7ff f93e 	bl	80001e0 <strlen>
 8000f64:	4603      	mov	r3, r0
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6c:	499d      	ldr	r1, [pc, #628]	@ (80011e4 <main+0x9a4>)
 8000f6e:	489e      	ldr	r0, [pc, #632]	@ (80011e8 <main+0x9a8>)
 8000f70:	f003 fc16 	bl	80047a0 <HAL_UART_Transmit>

    sprintf((char*)txd_message_buffer, "\r\n THIRD ZONE CHOICE: %d \t", setupInputs[4]);
 8000f74:	7b3b      	ldrb	r3, [r7, #12]
 8000f76:	461a      	mov	r2, r3
 8000f78:	499d      	ldr	r1, [pc, #628]	@ (80011f0 <main+0x9b0>)
 8000f7a:	489a      	ldr	r0, [pc, #616]	@ (80011e4 <main+0x9a4>)
 8000f7c:	f004 fce0 	bl	8005940 <siprintf>
    HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 8000f80:	4898      	ldr	r0, [pc, #608]	@ (80011e4 <main+0x9a4>)
 8000f82:	f7ff f92d 	bl	80001e0 <strlen>
 8000f86:	4603      	mov	r3, r0
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8e:	4995      	ldr	r1, [pc, #596]	@ (80011e4 <main+0x9a4>)
 8000f90:	4895      	ldr	r0, [pc, #596]	@ (80011e8 <main+0x9a8>)
 8000f92:	f003 fc05 	bl	80047a0 <HAL_UART_Transmit>
    sprintf((char*)txd_message_buffer, "Pump PWR: %d\t", setupInputs[5]);
 8000f96:	7b7b      	ldrb	r3, [r7, #13]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4996      	ldr	r1, [pc, #600]	@ (80011f4 <main+0x9b4>)
 8000f9c:	4891      	ldr	r0, [pc, #580]	@ (80011e4 <main+0x9a4>)
 8000f9e:	f004 fccf 	bl	8005940 <siprintf>
    HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 8000fa2:	4890      	ldr	r0, [pc, #576]	@ (80011e4 <main+0x9a4>)
 8000fa4:	f7ff f91c 	bl	80001e0 <strlen>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb0:	498c      	ldr	r1, [pc, #560]	@ (80011e4 <main+0x9a4>)
 8000fb2:	488d      	ldr	r0, [pc, #564]	@ (80011e8 <main+0x9a8>)
 8000fb4:	f003 fbf4 	bl	80047a0 <HAL_UART_Transmit>
    sprintf((char*)txd_message_buffer, "THIRD ZONE CHOICE WALL CLOCK START TIME: %d\t", setupInputs[15]);
 8000fb8:	7dfb      	ldrb	r3, [r7, #23]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	498e      	ldr	r1, [pc, #568]	@ (80011f8 <main+0x9b8>)
 8000fbe:	4889      	ldr	r0, [pc, #548]	@ (80011e4 <main+0x9a4>)
 8000fc0:	f004 fcbe 	bl	8005940 <siprintf>
    HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 8000fc4:	4887      	ldr	r0, [pc, #540]	@ (80011e4 <main+0x9a4>)
 8000fc6:	f7ff f90b 	bl	80001e0 <strlen>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd2:	4984      	ldr	r1, [pc, #528]	@ (80011e4 <main+0x9a4>)
 8000fd4:	4884      	ldr	r0, [pc, #528]	@ (80011e8 <main+0x9a8>)
 8000fd6:	f003 fbe3 	bl	80047a0 <HAL_UART_Transmit>
    sprintf((char*)txd_message_buffer, "THIRD ZONE CHOICE WALL CLOCK STOP TIME: %d\t", setupInputs[16]);
 8000fda:	7e3b      	ldrb	r3, [r7, #24]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4987      	ldr	r1, [pc, #540]	@ (80011fc <main+0x9bc>)
 8000fe0:	4880      	ldr	r0, [pc, #512]	@ (80011e4 <main+0x9a4>)
 8000fe2:	f004 fcad 	bl	8005940 <siprintf>
    HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 8000fe6:	487f      	ldr	r0, [pc, #508]	@ (80011e4 <main+0x9a4>)
 8000fe8:	f7ff f8fa 	bl	80001e0 <strlen>
 8000fec:	4603      	mov	r3, r0
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff4:	497b      	ldr	r1, [pc, #492]	@ (80011e4 <main+0x9a4>)
 8000ff6:	487c      	ldr	r0, [pc, #496]	@ (80011e8 <main+0x9a8>)
 8000ff8:	f003 fbd2 	bl	80047a0 <HAL_UART_Transmit>

    uint8_t percent_full = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	  sprintf((char*)txd_message_buffer, "\r\n\n SETUP is done. Press BLUE BUTTON for RUN MODE. ");
 8001002:	497f      	ldr	r1, [pc, #508]	@ (8001200 <main+0x9c0>)
 8001004:	4877      	ldr	r0, [pc, #476]	@ (80011e4 <main+0x9a4>)
 8001006:	f004 fc9b 	bl	8005940 <siprintf>
	  HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 800100a:	4876      	ldr	r0, [pc, #472]	@ (80011e4 <main+0x9a4>)
 800100c:	f7ff f8e8 	bl	80001e0 <strlen>
 8001010:	4603      	mov	r3, r0
 8001012:	b29a      	uxth	r2, r3
 8001014:	f04f 33ff 	mov.w	r3, #4294967295
 8001018:	4972      	ldr	r1, [pc, #456]	@ (80011e4 <main+0x9a4>)
 800101a:	4873      	ldr	r0, [pc, #460]	@ (80011e8 <main+0x9a8>)
 800101c:	f003 fbc0 	bl	80047a0 <HAL_UART_Transmit>
	  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1){
 8001020:	e017      	b.n	8001052 <main+0x812>
		  HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 8001022:	2201      	movs	r2, #1
 8001024:	2120      	movs	r1, #32
 8001026:	4877      	ldr	r0, [pc, #476]	@ (8001204 <main+0x9c4>)
 8001028:	f001 ff66 	bl	8002ef8 <HAL_GPIO_WritePin>
		  HAL_Delay(50);
 800102c:	2032      	movs	r0, #50	@ 0x32
 800102e:	f001 f80d 	bl	800204c <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	2120      	movs	r1, #32
 8001036:	4873      	ldr	r0, [pc, #460]	@ (8001204 <main+0x9c4>)
 8001038:	f001 ff5e 	bl	8002ef8 <HAL_GPIO_WritePin>
		  HAL_Delay(50);
 800103c:	2032      	movs	r0, #50	@ 0x32
 800103e:	f001 f805 	bl	800204c <HAL_Delay>
		  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0){
 8001042:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001046:	4870      	ldr	r0, [pc, #448]	@ (8001208 <main+0x9c8>)
 8001048:	f001 ff3e 	bl	8002ec8 <HAL_GPIO_ReadPin>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d008      	beq.n	8001064 <main+0x824>
	  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1){
 8001052:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001056:	486c      	ldr	r0, [pc, #432]	@ (8001208 <main+0x9c8>)
 8001058:	f001 ff36 	bl	8002ec8 <HAL_GPIO_ReadPin>
 800105c:	4603      	mov	r3, r0
 800105e:	2b01      	cmp	r3, #1
 8001060:	d0df      	beq.n	8001022 <main+0x7e2>
 8001062:	e000      	b.n	8001066 <main+0x826>
			  break;
 8001064:	bf00      	nop
		  }
	  }

	  HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 8001066:	2201      	movs	r2, #1
 8001068:	2120      	movs	r1, #32
 800106a:	4866      	ldr	r0, [pc, #408]	@ (8001204 <main+0x9c4>)
 800106c:	f001 ff44 	bl	8002ef8 <HAL_GPIO_WritePin>
	  sprintf((char*)txd_message_buffer, "\r\n\n RUN MODE \n\n");
 8001070:	4966      	ldr	r1, [pc, #408]	@ (800120c <main+0x9cc>)
 8001072:	485c      	ldr	r0, [pc, #368]	@ (80011e4 <main+0x9a4>)
 8001074:	f004 fc64 	bl	8005940 <siprintf>
	  HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 8001078:	485a      	ldr	r0, [pc, #360]	@ (80011e4 <main+0x9a4>)
 800107a:	f7ff f8b1 	bl	80001e0 <strlen>
 800107e:	4603      	mov	r3, r0
 8001080:	b29a      	uxth	r2, r3
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
 8001086:	4957      	ldr	r1, [pc, #348]	@ (80011e4 <main+0x9a4>)
 8001088:	4857      	ldr	r0, [pc, #348]	@ (80011e8 <main+0x9a8>)
 800108a:	f003 fb89 	bl	80047a0 <HAL_UART_Transmit>

  // RUN MODE CODE WITH TITLES

	  sprintf((char*)txd_message_buffer, "\r WALL CLOCK (hr): | ZONE/INLET: | MOTOR %%PWM: | RPM: | WATER DEPTH (%%): \n");
 800108e:	4960      	ldr	r1, [pc, #384]	@ (8001210 <main+0x9d0>)
 8001090:	4854      	ldr	r0, [pc, #336]	@ (80011e4 <main+0x9a4>)
 8001092:	f004 fc55 	bl	8005940 <siprintf>
	  HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 8001096:	4853      	ldr	r0, [pc, #332]	@ (80011e4 <main+0x9a4>)
 8001098:	f7ff f8a2 	bl	80001e0 <strlen>
 800109c:	4603      	mov	r3, r0
 800109e:	b29a      	uxth	r2, r3
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295
 80010a4:	494f      	ldr	r1, [pc, #316]	@ (80011e4 <main+0x9a4>)
 80010a6:	4850      	ldr	r0, [pc, #320]	@ (80011e8 <main+0x9a8>)
 80010a8:	f003 fb7a 	bl	80047a0 <HAL_UART_Transmit>

	  HAL_TIM_Base_Init(&htim3);
 80010ac:	4859      	ldr	r0, [pc, #356]	@ (8001214 <main+0x9d4>)
 80010ae:	f002 fbed 	bl	800388c <HAL_TIM_Base_Init>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010b2:	2100      	movs	r1, #0
 80010b4:	4857      	ldr	r0, [pc, #348]	@ (8001214 <main+0x9d4>)
 80010b6:	f002 fced 	bl	8003a94 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80010ba:	2104      	movs	r1, #4
 80010bc:	4855      	ldr	r0, [pc, #340]	@ (8001214 <main+0x9d4>)
 80010be:	f002 fce9 	bl	8003a94 <HAL_TIM_PWM_Start>

	  uint8_t PWM_Percent = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	  for (int i = 0; i <= 24; i++){
 80010c8:	2300      	movs	r3, #0
 80010ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80010cc:	e1be      	b.n	800144c <main+0xc0c>
		  uint8_t zone_number = 100;
 80010ce:	2364      	movs	r3, #100	@ 0x64
 80010d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		  if (i >= 0 && i < 7){
 80010d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	db36      	blt.n	8001148 <main+0x908>
 80010da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010dc:	2b06      	cmp	r3, #6
 80010de:	dc33      	bgt.n	8001148 <main+0x908>
			  zone_number = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			  HAL_GPIO_WritePin(GPIOB, BLUE_Pin, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010ec:	484a      	ldr	r0, [pc, #296]	@ (8001218 <main+0x9d8>)
 80010ee:	f001 ff03 	bl	8002ef8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, RED_Pin, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010f8:	4847      	ldr	r0, [pc, #284]	@ (8001218 <main+0x9d8>)
 80010fa:	f001 fefd 	bl	8002ef8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GREEN_Pin, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001104:	483f      	ldr	r0, [pc, #252]	@ (8001204 <main+0x9c4>)
 8001106:	f001 fef7 	bl	8002ef8 <HAL_GPIO_WritePin>

			  HAL_GPIO_WritePin(GPIOB, BLUE_Pin, 1);
 800110a:	2201      	movs	r2, #1
 800110c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001110:	4841      	ldr	r0, [pc, #260]	@ (8001218 <main+0x9d8>)
 8001112:	f001 fef1 	bl	8002ef8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, RED_Pin, 1);
 8001116:	2201      	movs	r2, #1
 8001118:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800111c:	4839      	ldr	r0, [pc, #228]	@ (8001204 <main+0x9c4>)
 800111e:	f001 feeb 	bl	8002ef8 <HAL_GPIO_WritePin>

			  HAL_TIM_Base_Start(&htim1);
 8001122:	483e      	ldr	r0, [pc, #248]	@ (800121c <main+0x9dc>)
 8001124:	f002 fc02 	bl	800392c <HAL_TIM_Base_Start>
			  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001128:	2100      	movs	r1, #0
 800112a:	483c      	ldr	r0, [pc, #240]	@ (800121c <main+0x9dc>)
 800112c:	f002 fcb2 	bl	8003a94 <HAL_TIM_PWM_Start>
			  TIM1->PSC = 16-1;
 8001130:	4b3b      	ldr	r3, [pc, #236]	@ (8001220 <main+0x9e0>)
 8001132:	220f      	movs	r2, #15
 8001134:	629a      	str	r2, [r3, #40]	@ 0x28
			  TIM1->ARR = 20000-1;
 8001136:	4b3a      	ldr	r3, [pc, #232]	@ (8001220 <main+0x9e0>)
 8001138:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800113c:	62da      	str	r2, [r3, #44]	@ 0x2c
			  TIM1->CCR1 = 2500;
 800113e:	4b38      	ldr	r3, [pc, #224]	@ (8001220 <main+0x9e0>)
 8001140:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001144:	635a      	str	r2, [r3, #52]	@ 0x34
 8001146:	e158      	b.n	80013fa <main+0xbba>

			  /*
			   * NOTE: since we set the PWM to be 0 in this case, we should be able to adjust the value of the Motor Speed using the potentiometer
			   */

		  } else if (i >= 7 && i < setupInputs[12]){
 8001148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800114a:	2b06      	cmp	r3, #6
 800114c:	dd6a      	ble.n	8001224 <main+0x9e4>
 800114e:	7d3b      	ldrb	r3, [r7, #20]
 8001150:	461a      	mov	r2, r3
 8001152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001154:	4293      	cmp	r3, r2
 8001156:	da65      	bge.n	8001224 <main+0x9e4>
			  zone_number = 1;
 8001158:	2301      	movs	r3, #1
 800115a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			  HAL_GPIO_WritePin(GPIOB, BLUE_Pin, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001164:	482c      	ldr	r0, [pc, #176]	@ (8001218 <main+0x9d8>)
 8001166:	f001 fec7 	bl	8002ef8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, RED_Pin, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001170:	4829      	ldr	r0, [pc, #164]	@ (8001218 <main+0x9d8>)
 8001172:	f001 fec1 	bl	8002ef8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GREEN_Pin, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800117c:	4821      	ldr	r0, [pc, #132]	@ (8001204 <main+0x9c4>)
 800117e:	f001 febb 	bl	8002ef8 <HAL_GPIO_WritePin>

			  HAL_GPIO_WritePin(GPIOA, RED_Pin, 1);
 8001182:	2201      	movs	r2, #1
 8001184:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001188:	481e      	ldr	r0, [pc, #120]	@ (8001204 <main+0x9c4>)
 800118a:	f001 feb5 	bl	8002ef8 <HAL_GPIO_WritePin>

			  HAL_TIM_Base_Start(&htim1);
 800118e:	4823      	ldr	r0, [pc, #140]	@ (800121c <main+0x9dc>)
 8001190:	f002 fbcc 	bl	800392c <HAL_TIM_Base_Start>
			  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001194:	2100      	movs	r1, #0
 8001196:	4821      	ldr	r0, [pc, #132]	@ (800121c <main+0x9dc>)
 8001198:	f002 fc7c 	bl	8003a94 <HAL_TIM_PWM_Start>
			  TIM1->PSC = 16-1;
 800119c:	4b20      	ldr	r3, [pc, #128]	@ (8001220 <main+0x9e0>)
 800119e:	220f      	movs	r2, #15
 80011a0:	629a      	str	r2, [r3, #40]	@ 0x28
			  TIM1->ARR = 20000-1;
 80011a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001220 <main+0x9e0>)
 80011a4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80011a8:	62da      	str	r2, [r3, #44]	@ 0x2c
			  TIM1->CCR1 = 1834;
 80011aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001220 <main+0x9e0>)
 80011ac:	f240 722a 	movw	r2, #1834	@ 0x72a
 80011b0:	635a      	str	r2, [r3, #52]	@ 0x34

			  if (setupInputs[3] == 1){
 80011b2:	7afb      	ldrb	r3, [r7, #11]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d103      	bne.n	80011c0 <main+0x980>
				  PWM_Percent = 70;
 80011b8:	2346      	movs	r3, #70	@ 0x46
 80011ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			  if (setupInputs[3] == 1){
 80011be:	e117      	b.n	80013f0 <main+0xbb0>
			  } else if (setupInputs[3] == 2){
 80011c0:	7afb      	ldrb	r3, [r7, #11]
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d103      	bne.n	80011ce <main+0x98e>
				  PWM_Percent = 85;
 80011c6:	2355      	movs	r3, #85	@ 0x55
 80011c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			  if (setupInputs[3] == 1){
 80011cc:	e110      	b.n	80013f0 <main+0xbb0>
			  } else if (setupInputs[3] == 3){
 80011ce:	7afb      	ldrb	r3, [r7, #11]
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	f040 810d 	bne.w	80013f0 <main+0xbb0>
				  PWM_Percent = 90;
 80011d6:	235a      	movs	r3, #90	@ 0x5a
 80011d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			  if (setupInputs[3] == 1){
 80011dc:	e108      	b.n	80013f0 <main+0xbb0>
 80011de:	bf00      	nop
 80011e0:	08006748 	.word	0x08006748
 80011e4:	20000078 	.word	0x20000078
 80011e8:	200001dc 	.word	0x200001dc
 80011ec:	08006778 	.word	0x08006778
 80011f0:	080067a8 	.word	0x080067a8
 80011f4:	080066c0 	.word	0x080066c0
 80011f8:	080067c4 	.word	0x080067c4
 80011fc:	080067f4 	.word	0x080067f4
 8001200:	08006820 	.word	0x08006820
 8001204:	40020000 	.word	0x40020000
 8001208:	40020800 	.word	0x40020800
 800120c:	08006854 	.word	0x08006854
 8001210:	08006864 	.word	0x08006864
 8001214:	2000014c 	.word	0x2000014c
 8001218:	40020400 	.word	0x40020400
 800121c:	20000104 	.word	0x20000104
 8001220:	40010000 	.word	0x40010000
			  }

		  } else if (i >= setupInputs[12] && i < setupInputs[14]){
 8001224:	7d3b      	ldrb	r3, [r7, #20]
 8001226:	461a      	mov	r2, r3
 8001228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800122a:	4293      	cmp	r3, r2
 800122c:	db47      	blt.n	80012be <main+0xa7e>
 800122e:	7dbb      	ldrb	r3, [r7, #22]
 8001230:	461a      	mov	r2, r3
 8001232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001234:	4293      	cmp	r3, r2
 8001236:	da42      	bge.n	80012be <main+0xa7e>
			  zone_number = 2;
 8001238:	2302      	movs	r3, #2
 800123a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			  HAL_GPIO_WritePin(GPIOB, BLUE_Pin, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001244:	4894      	ldr	r0, [pc, #592]	@ (8001498 <main+0xc58>)
 8001246:	f001 fe57 	bl	8002ef8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, RED_Pin, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001250:	4891      	ldr	r0, [pc, #580]	@ (8001498 <main+0xc58>)
 8001252:	f001 fe51 	bl	8002ef8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GREEN_Pin, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800125c:	488f      	ldr	r0, [pc, #572]	@ (800149c <main+0xc5c>)
 800125e:	f001 fe4b 	bl	8002ef8 <HAL_GPIO_WritePin>

			  HAL_GPIO_WritePin(GPIOA, GREEN_Pin, 1);
 8001262:	2201      	movs	r2, #1
 8001264:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001268:	488c      	ldr	r0, [pc, #560]	@ (800149c <main+0xc5c>)
 800126a:	f001 fe45 	bl	8002ef8 <HAL_GPIO_WritePin>

			  HAL_TIM_Base_Start(&htim1);
 800126e:	488c      	ldr	r0, [pc, #560]	@ (80014a0 <main+0xc60>)
 8001270:	f002 fb5c 	bl	800392c <HAL_TIM_Base_Start>
			  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001274:	2100      	movs	r1, #0
 8001276:	488a      	ldr	r0, [pc, #552]	@ (80014a0 <main+0xc60>)
 8001278:	f002 fc0c 	bl	8003a94 <HAL_TIM_PWM_Start>
			  TIM1->PSC = 16-1;
 800127c:	4b89      	ldr	r3, [pc, #548]	@ (80014a4 <main+0xc64>)
 800127e:	220f      	movs	r2, #15
 8001280:	629a      	str	r2, [r3, #40]	@ 0x28
			  TIM1->ARR = 20000-1;
 8001282:	4b88      	ldr	r3, [pc, #544]	@ (80014a4 <main+0xc64>)
 8001284:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001288:	62da      	str	r2, [r3, #44]	@ 0x2c
			  TIM1->CCR1 = 1168;
 800128a:	4b86      	ldr	r3, [pc, #536]	@ (80014a4 <main+0xc64>)
 800128c:	f44f 6292 	mov.w	r2, #1168	@ 0x490
 8001290:	635a      	str	r2, [r3, #52]	@ 0x34

			  if (setupInputs[5] == 1){
 8001292:	7b7b      	ldrb	r3, [r7, #13]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d103      	bne.n	80012a0 <main+0xa60>
				  PWM_Percent = 70;
 8001298:	2346      	movs	r3, #70	@ 0x46
 800129a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			  if (setupInputs[5] == 1){
 800129e:	e0a9      	b.n	80013f4 <main+0xbb4>
			  } else if (setupInputs[5] == 2){
 80012a0:	7b7b      	ldrb	r3, [r7, #13]
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d103      	bne.n	80012ae <main+0xa6e>
				  PWM_Percent = 85;
 80012a6:	2355      	movs	r3, #85	@ 0x55
 80012a8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			  if (setupInputs[5] == 1){
 80012ac:	e0a2      	b.n	80013f4 <main+0xbb4>
			  } else if (setupInputs[5] == 3){
 80012ae:	7b7b      	ldrb	r3, [r7, #13]
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	f040 809f 	bne.w	80013f4 <main+0xbb4>
				  PWM_Percent = 90;
 80012b6:	235a      	movs	r3, #90	@ 0x5a
 80012b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			  if (setupInputs[5] == 1){
 80012bc:	e09a      	b.n	80013f4 <main+0xbb4>
			  }

		  } else if (i >= setupInputs[14] && i < setupInputs[16]){
 80012be:	7dbb      	ldrb	r3, [r7, #22]
 80012c0:	461a      	mov	r2, r3
 80012c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012c4:	4293      	cmp	r3, r2
 80012c6:	db46      	blt.n	8001356 <main+0xb16>
 80012c8:	7e3b      	ldrb	r3, [r7, #24]
 80012ca:	461a      	mov	r2, r3
 80012cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012ce:	4293      	cmp	r3, r2
 80012d0:	da41      	bge.n	8001356 <main+0xb16>
			  zone_number = 3;
 80012d2:	2303      	movs	r3, #3
 80012d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			  HAL_GPIO_WritePin(GPIOB, BLUE_Pin, 0);
 80012d8:	2200      	movs	r2, #0
 80012da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012de:	486e      	ldr	r0, [pc, #440]	@ (8001498 <main+0xc58>)
 80012e0:	f001 fe0a 	bl	8002ef8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, RED_Pin, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012ea:	486b      	ldr	r0, [pc, #428]	@ (8001498 <main+0xc58>)
 80012ec:	f001 fe04 	bl	8002ef8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GREEN_Pin, 0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012f6:	4869      	ldr	r0, [pc, #420]	@ (800149c <main+0xc5c>)
 80012f8:	f001 fdfe 	bl	8002ef8 <HAL_GPIO_WritePin>

			  HAL_GPIO_WritePin(GPIOB, BLUE_Pin, 1);
 80012fc:	2201      	movs	r2, #1
 80012fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001302:	4865      	ldr	r0, [pc, #404]	@ (8001498 <main+0xc58>)
 8001304:	f001 fdf8 	bl	8002ef8 <HAL_GPIO_WritePin>
			  HAL_TIM_Base_Start(&htim1);
 8001308:	4865      	ldr	r0, [pc, #404]	@ (80014a0 <main+0xc60>)
 800130a:	f002 fb0f 	bl	800392c <HAL_TIM_Base_Start>
			  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800130e:	2100      	movs	r1, #0
 8001310:	4863      	ldr	r0, [pc, #396]	@ (80014a0 <main+0xc60>)
 8001312:	f002 fbbf 	bl	8003a94 <HAL_TIM_PWM_Start>
			  TIM1->PSC = 16-1;
 8001316:	4b63      	ldr	r3, [pc, #396]	@ (80014a4 <main+0xc64>)
 8001318:	220f      	movs	r2, #15
 800131a:	629a      	str	r2, [r3, #40]	@ 0x28
			  TIM1->ARR = 20000-1;
 800131c:	4b61      	ldr	r3, [pc, #388]	@ (80014a4 <main+0xc64>)
 800131e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001322:	62da      	str	r2, [r3, #44]	@ 0x2c
			  TIM1->CCR1 = 500;
 8001324:	4b5f      	ldr	r3, [pc, #380]	@ (80014a4 <main+0xc64>)
 8001326:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800132a:	635a      	str	r2, [r3, #52]	@ 0x34

			  if (setupInputs[7] == 1){
 800132c:	7bfb      	ldrb	r3, [r7, #15]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d103      	bne.n	800133a <main+0xafa>
				  PWM_Percent = 70;
 8001332:	2346      	movs	r3, #70	@ 0x46
 8001334:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			  if (setupInputs[7] == 1){
 8001338:	e05e      	b.n	80013f8 <main+0xbb8>
			  } else if (setupInputs[7] == 2){
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	2b02      	cmp	r3, #2
 800133e:	d103      	bne.n	8001348 <main+0xb08>
				  PWM_Percent = 85;
 8001340:	2355      	movs	r3, #85	@ 0x55
 8001342:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			  if (setupInputs[7] == 1){
 8001346:	e057      	b.n	80013f8 <main+0xbb8>
			  } else if (setupInputs[7] == 3){
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	2b03      	cmp	r3, #3
 800134c:	d154      	bne.n	80013f8 <main+0xbb8>
				  PWM_Percent = 90;
 800134e:	235a      	movs	r3, #90	@ 0x5a
 8001350:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			  if (setupInputs[7] == 1){
 8001354:	e050      	b.n	80013f8 <main+0xbb8>
			  }



		  } else if (i >= setupInputs[16]){
 8001356:	7e3b      	ldrb	r3, [r7, #24]
 8001358:	461a      	mov	r2, r3
 800135a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800135c:	4293      	cmp	r3, r2
 800135e:	db4c      	blt.n	80013fa <main+0xbba>
			  sprintf((char*)txd_message_buffer, "\r %d| %s| %d| %d| %d\n", i, " " ,PWM_Percent, rpm_tick_count, percent_full);
 8001360:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001364:	4a50      	ldr	r2, [pc, #320]	@ (80014a8 <main+0xc68>)
 8001366:	7812      	ldrb	r2, [r2, #0]
 8001368:	4611      	mov	r1, r2
 800136a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800136e:	9202      	str	r2, [sp, #8]
 8001370:	9101      	str	r1, [sp, #4]
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	4b4d      	ldr	r3, [pc, #308]	@ (80014ac <main+0xc6c>)
 8001376:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001378:	494d      	ldr	r1, [pc, #308]	@ (80014b0 <main+0xc70>)
 800137a:	484e      	ldr	r0, [pc, #312]	@ (80014b4 <main+0xc74>)
 800137c:	f004 fae0 	bl	8005940 <siprintf>
			  HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 8001380:	484c      	ldr	r0, [pc, #304]	@ (80014b4 <main+0xc74>)
 8001382:	f7fe ff2d 	bl	80001e0 <strlen>
 8001386:	4603      	mov	r3, r0
 8001388:	b29a      	uxth	r2, r3
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
 800138e:	4949      	ldr	r1, [pc, #292]	@ (80014b4 <main+0xc74>)
 8001390:	4849      	ldr	r0, [pc, #292]	@ (80014b8 <main+0xc78>)
 8001392:	f003 fa05 	bl	80047a0 <HAL_UART_Transmit>
			  PWM_Percent = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			  HAL_GPIO_WritePin(GPIOB, BLUE_Pin, GPIO_PIN_RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013a2:	483d      	ldr	r0, [pc, #244]	@ (8001498 <main+0xc58>)
 80013a4:	f001 fda8 	bl	8002ef8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, RED_Pin, GPIO_PIN_RESET);
 80013a8:	2200      	movs	r2, #0
 80013aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013ae:	483a      	ldr	r0, [pc, #232]	@ (8001498 <main+0xc58>)
 80013b0:	f001 fda2 	bl	8002ef8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GREEN_Pin, GPIO_PIN_RESET);
 80013b4:	2200      	movs	r2, #0
 80013b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013ba:	4838      	ldr	r0, [pc, #224]	@ (800149c <main+0xc5c>)
 80013bc:	f001 fd9c 	bl	8002ef8 <HAL_GPIO_WritePin>

			  if (i == 24){
 80013c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013c2:	2b18      	cmp	r3, #24
 80013c4:	d10f      	bne.n	80013e6 <main+0xba6>
				  sprintf((char*)txd_message_buffer, "Irrigation Complete\r\n");
 80013c6:	493d      	ldr	r1, [pc, #244]	@ (80014bc <main+0xc7c>)
 80013c8:	483a      	ldr	r0, [pc, #232]	@ (80014b4 <main+0xc74>)
 80013ca:	f004 fab9 	bl	8005940 <siprintf>
				  HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 80013ce:	4839      	ldr	r0, [pc, #228]	@ (80014b4 <main+0xc74>)
 80013d0:	f7fe ff06 	bl	80001e0 <strlen>
 80013d4:	4603      	mov	r3, r0
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	f04f 33ff 	mov.w	r3, #4294967295
 80013dc:	4935      	ldr	r1, [pc, #212]	@ (80014b4 <main+0xc74>)
 80013de:	4836      	ldr	r0, [pc, #216]	@ (80014b8 <main+0xc78>)
 80013e0:	f003 f9de 	bl	80047a0 <HAL_UART_Transmit>
				  break;
 80013e4:	e036      	b.n	8001454 <main+0xc14>
			  }
			  HAL_Delay(12000);
 80013e6:	f642 60e0 	movw	r0, #12000	@ 0x2ee0
 80013ea:	f000 fe2f 	bl	800204c <HAL_Delay>
 80013ee:	e004      	b.n	80013fa <main+0xbba>
			  if (setupInputs[3] == 1){
 80013f0:	bf00      	nop
 80013f2:	e002      	b.n	80013fa <main+0xbba>
			  if (setupInputs[5] == 1){
 80013f4:	bf00      	nop
 80013f6:	e000      	b.n	80013fa <main+0xbba>
			  if (setupInputs[7] == 1){
 80013f8:	bf00      	nop
//			  HAL_GPIO_WritePin(GPIOB, RED_Pin, 1);
//			  HAL_GPIO_WritePin(GPIOA, GREEN_Pin, 1);
//
//			  HAL_Delay(500);
//		  }
		  if(i < setupInputs[16]){
 80013fa:	7e3b      	ldrb	r3, [r7, #24]
 80013fc:	461a      	mov	r2, r3
 80013fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001400:	4293      	cmp	r3, r2
 8001402:	da20      	bge.n	8001446 <main+0xc06>
			  sprintf((char*)txd_message_buffer, "\r %d| %d| %d| %d| %d\n", i, zone_number,PWM_Percent, rpm_tick_count, percent_full);
 8001404:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8001408:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800140c:	4a26      	ldr	r2, [pc, #152]	@ (80014a8 <main+0xc68>)
 800140e:	7812      	ldrb	r2, [r2, #0]
 8001410:	4610      	mov	r0, r2
 8001412:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001416:	9202      	str	r2, [sp, #8]
 8001418:	9001      	str	r0, [sp, #4]
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	460b      	mov	r3, r1
 800141e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001420:	4927      	ldr	r1, [pc, #156]	@ (80014c0 <main+0xc80>)
 8001422:	4824      	ldr	r0, [pc, #144]	@ (80014b4 <main+0xc74>)
 8001424:	f004 fa8c 	bl	8005940 <siprintf>
			  HAL_UART_Transmit(&huart6, txd_message_buffer, strlen((char*)txd_message_buffer), HAL_MAX_DELAY);
 8001428:	4822      	ldr	r0, [pc, #136]	@ (80014b4 <main+0xc74>)
 800142a:	f7fe fed9 	bl	80001e0 <strlen>
 800142e:	4603      	mov	r3, r0
 8001430:	b29a      	uxth	r2, r3
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
 8001436:	491f      	ldr	r1, [pc, #124]	@ (80014b4 <main+0xc74>)
 8001438:	481f      	ldr	r0, [pc, #124]	@ (80014b8 <main+0xc78>)
 800143a:	f003 f9b1 	bl	80047a0 <HAL_UART_Transmit>
			  HAL_Delay(12000);
 800143e:	f642 60e0 	movw	r0, #12000	@ 0x2ee0
 8001442:	f000 fe03 	bl	800204c <HAL_Delay>
	  for (int i = 0; i <= 24; i++){
 8001446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001448:	3301      	adds	r3, #1
 800144a:	633b      	str	r3, [r7, #48]	@ 0x30
 800144c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800144e:	2b18      	cmp	r3, #24
 8001450:	f77f ae3d 	ble.w	80010ce <main+0x88e>
	  // TIM1->CCR1 = ____________

	  //get pulse width (time_diff) and distance (distance)


	  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001454:	2100      	movs	r1, #0
 8001456:	481b      	ldr	r0, [pc, #108]	@ (80014c4 <main+0xc84>)
 8001458:	f002 fbcc 	bl	8003bf4 <HAL_TIM_PWM_Stop>
	  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800145c:	2104      	movs	r1, #4
 800145e:	4819      	ldr	r0, [pc, #100]	@ (80014c4 <main+0xc84>)
 8001460:	f002 fbc8 	bl	8003bf4 <HAL_TIM_PWM_Stop>

	  // getting the adc value from the potentiometer
	  ADC_Select_CH(9);
 8001464:	2009      	movs	r0, #9
 8001466:	f7ff f88b 	bl	8000580 <ADC_Select_CH>
	  HAL_ADC_Start(&hadc1);
 800146a:	4817      	ldr	r0, [pc, #92]	@ (80014c8 <main+0xc88>)
 800146c:	f000 fe56 	bl	800211c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8001470:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001474:	4814      	ldr	r0, [pc, #80]	@ (80014c8 <main+0xc88>)
 8001476:	f000 ff38 	bl	80022ea <HAL_ADC_PollForConversion>
	  uint8_t ADC_CH9 = HAL_ADC_GetValue(&hadc1);
 800147a:	4813      	ldr	r0, [pc, #76]	@ (80014c8 <main+0xc88>)
 800147c:	f000 ffc0 	bl	8002400 <HAL_ADC_GetValue>
 8001480:	4603      	mov	r3, r0
 8001482:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	  HAL_ADC_Stop(&hadc1);
 8001486:	4810      	ldr	r0, [pc, #64]	@ (80014c8 <main+0xc88>)
 8001488:	f000 fefc 	bl	8002284 <HAL_ADC_Stop>
 800148c:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 800148e:	4618      	mov	r0, r3
 8001490:	3738      	adds	r7, #56	@ 0x38
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40020400 	.word	0x40020400
 800149c:	40020000 	.word	0x40020000
 80014a0:	20000104 	.word	0x20000104
 80014a4:	40010000 	.word	0x40010000
 80014a8:	200000b8 	.word	0x200000b8
 80014ac:	080068b4 	.word	0x080068b4
 80014b0:	080068b8 	.word	0x080068b8
 80014b4:	20000078 	.word	0x20000078
 80014b8:	200001dc 	.word	0x200001dc
 80014bc:	080068d0 	.word	0x080068d0
 80014c0:	080068e8 	.word	0x080068e8
 80014c4:	2000014c 	.word	0x2000014c
 80014c8:	200000bc 	.word	0x200000bc

080014cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b094      	sub	sp, #80	@ 0x50
 80014d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d2:	f107 0320 	add.w	r3, r7, #32
 80014d6:	2230      	movs	r2, #48	@ 0x30
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f004 fa50 	bl	8005980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f0:	2300      	movs	r3, #0
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	4b28      	ldr	r3, [pc, #160]	@ (8001598 <SystemClock_Config+0xcc>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f8:	4a27      	ldr	r2, [pc, #156]	@ (8001598 <SystemClock_Config+0xcc>)
 80014fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001500:	4b25      	ldr	r3, [pc, #148]	@ (8001598 <SystemClock_Config+0xcc>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800150c:	2300      	movs	r3, #0
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	4b22      	ldr	r3, [pc, #136]	@ (800159c <SystemClock_Config+0xd0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a21      	ldr	r2, [pc, #132]	@ (800159c <SystemClock_Config+0xd0>)
 8001516:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	4b1f      	ldr	r3, [pc, #124]	@ (800159c <SystemClock_Config+0xd0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001528:	2302      	movs	r3, #2
 800152a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800152c:	2301      	movs	r3, #1
 800152e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001530:	2310      	movs	r3, #16
 8001532:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001534:	2302      	movs	r3, #2
 8001536:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001538:	2300      	movs	r3, #0
 800153a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800153c:	2310      	movs	r3, #16
 800153e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001540:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001544:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001546:	2304      	movs	r3, #4
 8001548:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800154a:	2304      	movs	r3, #4
 800154c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154e:	f107 0320 	add.w	r3, r7, #32
 8001552:	4618      	mov	r0, r3
 8001554:	f001 fd02 	bl	8002f5c <HAL_RCC_OscConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800155e:	f000 fabf 	bl	8001ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001562:	230f      	movs	r3, #15
 8001564:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001566:	2302      	movs	r3, #2
 8001568:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800156e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001572:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001578:	f107 030c 	add.w	r3, r7, #12
 800157c:	2102      	movs	r1, #2
 800157e:	4618      	mov	r0, r3
 8001580:	f001 ff64 	bl	800344c <HAL_RCC_ClockConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800158a:	f000 faa9 	bl	8001ae0 <Error_Handler>
  }
}
 800158e:	bf00      	nop
 8001590:	3750      	adds	r7, #80	@ 0x50
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800
 800159c:	40007000 	.word	0x40007000

080015a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015a6:	463b      	mov	r3, r7
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015b2:	4b22      	ldr	r3, [pc, #136]	@ (800163c <MX_ADC1_Init+0x9c>)
 80015b4:	4a22      	ldr	r2, [pc, #136]	@ (8001640 <MX_ADC1_Init+0xa0>)
 80015b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015b8:	4b20      	ldr	r3, [pc, #128]	@ (800163c <MX_ADC1_Init+0x9c>)
 80015ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80015c0:	4b1e      	ldr	r3, [pc, #120]	@ (800163c <MX_ADC1_Init+0x9c>)
 80015c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80015c8:	4b1c      	ldr	r3, [pc, #112]	@ (800163c <MX_ADC1_Init+0x9c>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015ce:	4b1b      	ldr	r3, [pc, #108]	@ (800163c <MX_ADC1_Init+0x9c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015d4:	4b19      	ldr	r3, [pc, #100]	@ (800163c <MX_ADC1_Init+0x9c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015dc:	4b17      	ldr	r3, [pc, #92]	@ (800163c <MX_ADC1_Init+0x9c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015e2:	4b16      	ldr	r3, [pc, #88]	@ (800163c <MX_ADC1_Init+0x9c>)
 80015e4:	4a17      	ldr	r2, [pc, #92]	@ (8001644 <MX_ADC1_Init+0xa4>)
 80015e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015e8:	4b14      	ldr	r3, [pc, #80]	@ (800163c <MX_ADC1_Init+0x9c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015ee:	4b13      	ldr	r3, [pc, #76]	@ (800163c <MX_ADC1_Init+0x9c>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015f4:	4b11      	ldr	r3, [pc, #68]	@ (800163c <MX_ADC1_Init+0x9c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015fc:	4b0f      	ldr	r3, [pc, #60]	@ (800163c <MX_ADC1_Init+0x9c>)
 80015fe:	2201      	movs	r2, #1
 8001600:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001602:	480e      	ldr	r0, [pc, #56]	@ (800163c <MX_ADC1_Init+0x9c>)
 8001604:	f000 fd46 	bl	8002094 <HAL_ADC_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800160e:	f000 fa67 	bl	8001ae0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001612:	2309      	movs	r3, #9
 8001614:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001616:	2301      	movs	r3, #1
 8001618:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800161a:	2300      	movs	r3, #0
 800161c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800161e:	463b      	mov	r3, r7
 8001620:	4619      	mov	r1, r3
 8001622:	4806      	ldr	r0, [pc, #24]	@ (800163c <MX_ADC1_Init+0x9c>)
 8001624:	f000 fefa 	bl	800241c <HAL_ADC_ConfigChannel>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800162e:	f000 fa57 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200000bc 	.word	0x200000bc
 8001640:	40012000 	.word	0x40012000
 8001644:	0f000001 	.word	0x0f000001

08001648 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b096      	sub	sp, #88	@ 0x58
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800164e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001666:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	611a      	str	r2, [r3, #16]
 8001676:	615a      	str	r2, [r3, #20]
 8001678:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	2220      	movs	r2, #32
 800167e:	2100      	movs	r1, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f004 f97d 	bl	8005980 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001686:	4b3f      	ldr	r3, [pc, #252]	@ (8001784 <MX_TIM1_Init+0x13c>)
 8001688:	4a3f      	ldr	r2, [pc, #252]	@ (8001788 <MX_TIM1_Init+0x140>)
 800168a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 800168c:	4b3d      	ldr	r3, [pc, #244]	@ (8001784 <MX_TIM1_Init+0x13c>)
 800168e:	220f      	movs	r2, #15
 8001690:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001692:	4b3c      	ldr	r3, [pc, #240]	@ (8001784 <MX_TIM1_Init+0x13c>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8001698:	4b3a      	ldr	r3, [pc, #232]	@ (8001784 <MX_TIM1_Init+0x13c>)
 800169a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800169e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a0:	4b38      	ldr	r3, [pc, #224]	@ (8001784 <MX_TIM1_Init+0x13c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016a6:	4b37      	ldr	r3, [pc, #220]	@ (8001784 <MX_TIM1_Init+0x13c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016ac:	4b35      	ldr	r3, [pc, #212]	@ (8001784 <MX_TIM1_Init+0x13c>)
 80016ae:	2280      	movs	r2, #128	@ 0x80
 80016b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016b2:	4834      	ldr	r0, [pc, #208]	@ (8001784 <MX_TIM1_Init+0x13c>)
 80016b4:	f002 f8ea 	bl	800388c <HAL_TIM_Base_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80016be:	f000 fa0f 	bl	8001ae0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016c8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80016cc:	4619      	mov	r1, r3
 80016ce:	482d      	ldr	r0, [pc, #180]	@ (8001784 <MX_TIM1_Init+0x13c>)
 80016d0:	f002 fbb6 	bl	8003e40 <HAL_TIM_ConfigClockSource>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80016da:	f000 fa01 	bl	8001ae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016de:	4829      	ldr	r0, [pc, #164]	@ (8001784 <MX_TIM1_Init+0x13c>)
 80016e0:	f002 f97e 	bl	80039e0 <HAL_TIM_PWM_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80016ea:	f000 f9f9 	bl	8001ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ee:	2300      	movs	r3, #0
 80016f0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016f6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016fa:	4619      	mov	r1, r3
 80016fc:	4821      	ldr	r0, [pc, #132]	@ (8001784 <MX_TIM1_Init+0x13c>)
 80016fe:	f002 ff3f 	bl	8004580 <HAL_TIMEx_MasterConfigSynchronization>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001708:	f000 f9ea 	bl	8001ae0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800170c:	2360      	movs	r3, #96	@ 0x60
 800170e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 500-1;
 8001710:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8001714:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001716:	2300      	movs	r3, #0
 8001718:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800171a:	2300      	movs	r3, #0
 800171c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800171e:	2300      	movs	r3, #0
 8001720:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001722:	2300      	movs	r3, #0
 8001724:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800172a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800172e:	2200      	movs	r2, #0
 8001730:	4619      	mov	r1, r3
 8001732:	4814      	ldr	r0, [pc, #80]	@ (8001784 <MX_TIM1_Init+0x13c>)
 8001734:	f002 fac2 	bl	8003cbc <HAL_TIM_PWM_ConfigChannel>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800173e:	f000 f9cf 	bl	8001ae0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001746:	2300      	movs	r3, #0
 8001748:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001756:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800175a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	4619      	mov	r1, r3
 8001764:	4807      	ldr	r0, [pc, #28]	@ (8001784 <MX_TIM1_Init+0x13c>)
 8001766:	f002 ff79 	bl	800465c <HAL_TIMEx_ConfigBreakDeadTime>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001770:	f000 f9b6 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001774:	4803      	ldr	r0, [pc, #12]	@ (8001784 <MX_TIM1_Init+0x13c>)
 8001776:	f000 fa5d 	bl	8001c34 <HAL_TIM_MspPostInit>

}
 800177a:	bf00      	nop
 800177c:	3758      	adds	r7, #88	@ 0x58
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000104 	.word	0x20000104
 8001788:	40010000 	.word	0x40010000

0800178c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08e      	sub	sp, #56	@ 0x38
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001792:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a0:	f107 0320 	add.w	r3, r7, #32
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
 80017b8:	615a      	str	r2, [r3, #20]
 80017ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017bc:	4b33      	ldr	r3, [pc, #204]	@ (800188c <MX_TIM3_Init+0x100>)
 80017be:	4a34      	ldr	r2, [pc, #208]	@ (8001890 <MX_TIM3_Init+0x104>)
 80017c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 80017c2:	4b32      	ldr	r3, [pc, #200]	@ (800188c <MX_TIM3_Init+0x100>)
 80017c4:	220f      	movs	r2, #15
 80017c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c8:	4b30      	ldr	r3, [pc, #192]	@ (800188c <MX_TIM3_Init+0x100>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 80017ce:	4b2f      	ldr	r3, [pc, #188]	@ (800188c <MX_TIM3_Init+0x100>)
 80017d0:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80017d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d6:	4b2d      	ldr	r3, [pc, #180]	@ (800188c <MX_TIM3_Init+0x100>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017dc:	4b2b      	ldr	r3, [pc, #172]	@ (800188c <MX_TIM3_Init+0x100>)
 80017de:	2280      	movs	r2, #128	@ 0x80
 80017e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017e2:	482a      	ldr	r0, [pc, #168]	@ (800188c <MX_TIM3_Init+0x100>)
 80017e4:	f002 f852 	bl	800388c <HAL_TIM_Base_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80017ee:	f000 f977 	bl	8001ae0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017fc:	4619      	mov	r1, r3
 80017fe:	4823      	ldr	r0, [pc, #140]	@ (800188c <MX_TIM3_Init+0x100>)
 8001800:	f002 fb1e 	bl	8003e40 <HAL_TIM_ConfigClockSource>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800180a:	f000 f969 	bl	8001ae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800180e:	481f      	ldr	r0, [pc, #124]	@ (800188c <MX_TIM3_Init+0x100>)
 8001810:	f002 f8e6 	bl	80039e0 <HAL_TIM_PWM_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800181a:	f000 f961 	bl	8001ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800181e:	2300      	movs	r3, #0
 8001820:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001822:	2300      	movs	r3, #0
 8001824:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001826:	f107 0320 	add.w	r3, r7, #32
 800182a:	4619      	mov	r1, r3
 800182c:	4817      	ldr	r0, [pc, #92]	@ (800188c <MX_TIM3_Init+0x100>)
 800182e:	f002 fea7 	bl	8004580 <HAL_TIMEx_MasterConfigSynchronization>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001838:	f000 f952 	bl	8001ae0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800183c:	2360      	movs	r3, #96	@ 0x60
 800183e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1200-1;
 8001840:	f240 43af 	movw	r3, #1199	@ 0x4af
 8001844:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	2200      	movs	r2, #0
 8001852:	4619      	mov	r1, r3
 8001854:	480d      	ldr	r0, [pc, #52]	@ (800188c <MX_TIM3_Init+0x100>)
 8001856:	f002 fa31 	bl	8003cbc <HAL_TIM_PWM_ConfigChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001860:	f000 f93e 	bl	8001ae0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	2204      	movs	r2, #4
 800186c:	4619      	mov	r1, r3
 800186e:	4807      	ldr	r0, [pc, #28]	@ (800188c <MX_TIM3_Init+0x100>)
 8001870:	f002 fa24 	bl	8003cbc <HAL_TIM_PWM_ConfigChannel>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 800187a:	f000 f931 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800187e:	4803      	ldr	r0, [pc, #12]	@ (800188c <MX_TIM3_Init+0x100>)
 8001880:	f000 f9d8 	bl	8001c34 <HAL_TIM_MspPostInit>

}
 8001884:	bf00      	nop
 8001886:	3738      	adds	r7, #56	@ 0x38
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	2000014c 	.word	0x2000014c
 8001890:	40000400 	.word	0x40000400

08001894 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001898:	4b11      	ldr	r3, [pc, #68]	@ (80018e0 <MX_USART2_UART_Init+0x4c>)
 800189a:	4a12      	ldr	r2, [pc, #72]	@ (80018e4 <MX_USART2_UART_Init+0x50>)
 800189c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800189e:	4b10      	ldr	r3, [pc, #64]	@ (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	@ (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018ac:	4b0c      	ldr	r3, [pc, #48]	@ (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018b2:	4b0b      	ldr	r3, [pc, #44]	@ (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018b8:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018ba:	220c      	movs	r2, #12
 80018bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018be:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c4:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018ca:	4805      	ldr	r0, [pc, #20]	@ (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018cc:	f002 ff18 	bl	8004700 <HAL_UART_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018d6:	f000 f903 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000194 	.word	0x20000194
 80018e4:	40004400 	.word	0x40004400

080018e8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80018ec:	4b11      	ldr	r3, [pc, #68]	@ (8001934 <MX_USART6_UART_Init+0x4c>)
 80018ee:	4a12      	ldr	r2, [pc, #72]	@ (8001938 <MX_USART6_UART_Init+0x50>)
 80018f0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80018f2:	4b10      	ldr	r3, [pc, #64]	@ (8001934 <MX_USART6_UART_Init+0x4c>)
 80018f4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80018f8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80018fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001934 <MX_USART6_UART_Init+0x4c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001900:	4b0c      	ldr	r3, [pc, #48]	@ (8001934 <MX_USART6_UART_Init+0x4c>)
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001906:	4b0b      	ldr	r3, [pc, #44]	@ (8001934 <MX_USART6_UART_Init+0x4c>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800190c:	4b09      	ldr	r3, [pc, #36]	@ (8001934 <MX_USART6_UART_Init+0x4c>)
 800190e:	220c      	movs	r2, #12
 8001910:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001912:	4b08      	ldr	r3, [pc, #32]	@ (8001934 <MX_USART6_UART_Init+0x4c>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001918:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <MX_USART6_UART_Init+0x4c>)
 800191a:	2200      	movs	r2, #0
 800191c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800191e:	4805      	ldr	r0, [pc, #20]	@ (8001934 <MX_USART6_UART_Init+0x4c>)
 8001920:	f002 feee 	bl	8004700 <HAL_UART_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800192a:	f000 f8d9 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200001dc 	.word	0x200001dc
 8001938:	40011400 	.word	0x40011400

0800193c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	@ 0x28
 8001940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	60da      	str	r2, [r3, #12]
 8001950:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	4b53      	ldr	r3, [pc, #332]	@ (8001aa4 <MX_GPIO_Init+0x168>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	4a52      	ldr	r2, [pc, #328]	@ (8001aa4 <MX_GPIO_Init+0x168>)
 800195c:	f043 0304 	orr.w	r3, r3, #4
 8001960:	6313      	str	r3, [r2, #48]	@ 0x30
 8001962:	4b50      	ldr	r3, [pc, #320]	@ (8001aa4 <MX_GPIO_Init+0x168>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	4b4c      	ldr	r3, [pc, #304]	@ (8001aa4 <MX_GPIO_Init+0x168>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	4a4b      	ldr	r2, [pc, #300]	@ (8001aa4 <MX_GPIO_Init+0x168>)
 8001978:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800197c:	6313      	str	r3, [r2, #48]	@ 0x30
 800197e:	4b49      	ldr	r3, [pc, #292]	@ (8001aa4 <MX_GPIO_Init+0x168>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	4b45      	ldr	r3, [pc, #276]	@ (8001aa4 <MX_GPIO_Init+0x168>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	4a44      	ldr	r2, [pc, #272]	@ (8001aa4 <MX_GPIO_Init+0x168>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6313      	str	r3, [r2, #48]	@ 0x30
 800199a:	4b42      	ldr	r3, [pc, #264]	@ (8001aa4 <MX_GPIO_Init+0x168>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	607b      	str	r3, [r7, #4]
 80019aa:	4b3e      	ldr	r3, [pc, #248]	@ (8001aa4 <MX_GPIO_Init+0x168>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	4a3d      	ldr	r2, [pc, #244]	@ (8001aa4 <MX_GPIO_Init+0x168>)
 80019b0:	f043 0302 	orr.w	r3, r3, #2
 80019b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b6:	4b3b      	ldr	r3, [pc, #236]	@ (8001aa4 <MX_GPIO_Init+0x168>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIGIT_B3_GPIO_Port, DIGIT_B3_Pin, GPIO_PIN_RESET);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2102      	movs	r1, #2
 80019c6:	4838      	ldr	r0, [pc, #224]	@ (8001aa8 <MX_GPIO_Init+0x16c>)
 80019c8:	f001 fa96 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIGIT_A3_Pin|DIGIT_A2_Pin|DIGIT_A1_Pin|LD2_Pin
 80019cc:	2200      	movs	r2, #0
 80019ce:	f641 0133 	movw	r1, #6195	@ 0x1833
 80019d2:	4836      	ldr	r0, [pc, #216]	@ (8001aac <MX_GPIO_Init+0x170>)
 80019d4:	f001 fa90 	bl	8002ef8 <HAL_GPIO_WritePin>
                          |GREEN_Pin|RED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIGIT_A0_Pin|DIGIT_B0_Pin|DIGIT_B1_Pin|BLUE_Pin, GPIO_PIN_RESET);
 80019d8:	2200      	movs	r2, #0
 80019da:	f24d 0101 	movw	r1, #53249	@ 0xd001
 80019de:	4834      	ldr	r0, [pc, #208]	@ (8001ab0 <MX_GPIO_Init+0x174>)
 80019e0:	f001 fa8a 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 TRIG_PIN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|TRIG_PIN_Pin;
 80019e4:	f242 0301 	movw	r3, #8193	@ 0x2001
 80019e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	4619      	mov	r1, r3
 80019f8:	482b      	ldr	r0, [pc, #172]	@ (8001aa8 <MX_GPIO_Init+0x16c>)
 80019fa:	f001 f8e1 	bl	8002bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGIT_B3_Pin */
  GPIO_InitStruct.Pin = DIGIT_B3_Pin;
 80019fe:	2302      	movs	r3, #2
 8001a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a02:	2301      	movs	r3, #1
 8001a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIGIT_B3_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	4619      	mov	r1, r3
 8001a14:	4824      	ldr	r0, [pc, #144]	@ (8001aa8 <MX_GPIO_Init+0x16c>)
 8001a16:	f001 f8d3 	bl	8002bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIGIT_A3_Pin DIGIT_A2_Pin DIGIT_A1_Pin LD2_Pin
                           GREEN_Pin RED_Pin */
  GPIO_InitStruct.Pin = DIGIT_A3_Pin|DIGIT_A2_Pin|DIGIT_A1_Pin|LD2_Pin
 8001a1a:	f641 0333 	movw	r3, #6195	@ 0x1833
 8001a1e:	617b      	str	r3, [r7, #20]
                          |GREEN_Pin|RED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a20:	2301      	movs	r3, #1
 8001a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	4619      	mov	r1, r3
 8001a32:	481e      	ldr	r0, [pc, #120]	@ (8001aac <MX_GPIO_Init+0x170>)
 8001a34:	f001 f8c4 	bl	8002bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIGIT_A0_Pin DIGIT_B0_Pin DIGIT_B1_Pin BLUE_Pin */
  GPIO_InitStruct.Pin = DIGIT_A0_Pin|DIGIT_B0_Pin|DIGIT_B1_Pin|BLUE_Pin;
 8001a38:	f24d 0301 	movw	r3, #53249	@ 0xd001
 8001a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a46:	2300      	movs	r3, #0
 8001a48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a4a:	f107 0314 	add.w	r3, r7, #20
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4817      	ldr	r0, [pc, #92]	@ (8001ab0 <MX_GPIO_Init+0x174>)
 8001a52:	f001 f8b5 	bl	8002bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RPM_TICK_Pin */
  GPIO_InitStruct.Pin = RPM_TICK_Pin;
 8001a56:	2304      	movs	r3, #4
 8001a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a5a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RPM_TICK_GPIO_Port, &GPIO_InitStruct);
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4811      	ldr	r0, [pc, #68]	@ (8001ab0 <MX_GPIO_Init+0x174>)
 8001a6c:	f001 f8a8 	bl	8002bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIGIT_B2_Pin */
  GPIO_InitStruct.Pin = DIGIT_B2_Pin;
 8001a70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a76:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIGIT_B2_GPIO_Port, &GPIO_InitStruct);
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	4619      	mov	r1, r3
 8001a86:	4809      	ldr	r0, [pc, #36]	@ (8001aac <MX_GPIO_Init+0x170>)
 8001a88:	f001 f89a 	bl	8002bc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2100      	movs	r1, #0
 8001a90:	2008      	movs	r0, #8
 8001a92:	f000 ffcc 	bl	8002a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001a96:	2008      	movs	r0, #8
 8001a98:	f000 ffe5 	bl	8002a66 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a9c:	bf00      	nop
 8001a9e:	3728      	adds	r7, #40	@ 0x28
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40020800 	.word	0x40020800
 8001aac:	40020000 	.word	0x40020000
 8001ab0:	40020400 	.word	0x40020400

08001ab4 <HAL_GPIO_EXTI_Callback>:
		wall_clock_hr_update_flag = 1; // screen updates occur hourly on the hour
	}
}
}

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == RPM_TICK_Pin){				// NOTE THAT RPM CALCULATIONS NEED A CALLBACK
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d105      	bne.n	8001ad0 <HAL_GPIO_EXTI_Callback+0x1c>
		rpm_tick_count += 1;
 8001ac4:	4b05      	ldr	r3, [pc, #20]	@ (8001adc <HAL_GPIO_EXTI_Callback+0x28>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	4b03      	ldr	r3, [pc, #12]	@ (8001adc <HAL_GPIO_EXTI_Callback+0x28>)
 8001ace:	701a      	strb	r2, [r3, #0]
	}
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	200000b8 	.word	0x200000b8

08001ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae4:	b672      	cpsid	i
}
 8001ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ae8:	bf00      	nop
 8001aea:	e7fd      	b.n	8001ae8 <Error_Handler+0x8>

08001aec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	4b10      	ldr	r3, [pc, #64]	@ (8001b38 <HAL_MspInit+0x4c>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afa:	4a0f      	ldr	r2, [pc, #60]	@ (8001b38 <HAL_MspInit+0x4c>)
 8001afc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b02:	4b0d      	ldr	r3, [pc, #52]	@ (8001b38 <HAL_MspInit+0x4c>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	603b      	str	r3, [r7, #0]
 8001b12:	4b09      	ldr	r3, [pc, #36]	@ (8001b38 <HAL_MspInit+0x4c>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b16:	4a08      	ldr	r2, [pc, #32]	@ (8001b38 <HAL_MspInit+0x4c>)
 8001b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b1e:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <HAL_MspInit+0x4c>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b2a:	2007      	movs	r0, #7
 8001b2c:	f000 ff74 	bl	8002a18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40023800 	.word	0x40023800

08001b3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08a      	sub	sp, #40	@ 0x28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a17      	ldr	r2, [pc, #92]	@ (8001bb8 <HAL_ADC_MspInit+0x7c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d127      	bne.n	8001bae <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	4b16      	ldr	r3, [pc, #88]	@ (8001bbc <HAL_ADC_MspInit+0x80>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b66:	4a15      	ldr	r2, [pc, #84]	@ (8001bbc <HAL_ADC_MspInit+0x80>)
 8001b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b6e:	4b13      	ldr	r3, [pc, #76]	@ (8001bbc <HAL_ADC_MspInit+0x80>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bbc <HAL_ADC_MspInit+0x80>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b82:	4a0e      	ldr	r2, [pc, #56]	@ (8001bbc <HAL_ADC_MspInit+0x80>)
 8001b84:	f043 0302 	orr.w	r3, r3, #2
 8001b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001bbc <HAL_ADC_MspInit+0x80>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b96:	2302      	movs	r3, #2
 8001b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba2:	f107 0314 	add.w	r3, r7, #20
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4805      	ldr	r0, [pc, #20]	@ (8001bc0 <HAL_ADC_MspInit+0x84>)
 8001baa:	f001 f809 	bl	8002bc0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001bae:	bf00      	nop
 8001bb0:	3728      	adds	r7, #40	@ 0x28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40012000 	.word	0x40012000
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40020400 	.word	0x40020400

08001bc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a15      	ldr	r2, [pc, #84]	@ (8001c28 <HAL_TIM_Base_MspInit+0x64>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d10e      	bne.n	8001bf4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	4b14      	ldr	r3, [pc, #80]	@ (8001c2c <HAL_TIM_Base_MspInit+0x68>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bde:	4a13      	ldr	r2, [pc, #76]	@ (8001c2c <HAL_TIM_Base_MspInit+0x68>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001be6:	4b11      	ldr	r3, [pc, #68]	@ (8001c2c <HAL_TIM_Base_MspInit+0x68>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001bf2:	e012      	b.n	8001c1a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c30 <HAL_TIM_Base_MspInit+0x6c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d10d      	bne.n	8001c1a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	4b0a      	ldr	r3, [pc, #40]	@ (8001c2c <HAL_TIM_Base_MspInit+0x68>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c06:	4a09      	ldr	r2, [pc, #36]	@ (8001c2c <HAL_TIM_Base_MspInit+0x68>)
 8001c08:	f043 0302 	orr.w	r3, r3, #2
 8001c0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c0e:	4b07      	ldr	r3, [pc, #28]	@ (8001c2c <HAL_TIM_Base_MspInit+0x68>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	68bb      	ldr	r3, [r7, #8]
}
 8001c1a:	bf00      	nop
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40010000 	.word	0x40010000
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40000400 	.word	0x40000400

08001c34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	@ 0x28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a24      	ldr	r2, [pc, #144]	@ (8001ce4 <HAL_TIM_MspPostInit+0xb0>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d11f      	bne.n	8001c96 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	4b23      	ldr	r3, [pc, #140]	@ (8001ce8 <HAL_TIM_MspPostInit+0xb4>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	4a22      	ldr	r2, [pc, #136]	@ (8001ce8 <HAL_TIM_MspPostInit+0xb4>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c66:	4b20      	ldr	r3, [pc, #128]	@ (8001ce8 <HAL_TIM_MspPostInit+0xb4>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c80:	2300      	movs	r3, #0
 8001c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c84:	2301      	movs	r3, #1
 8001c86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4817      	ldr	r0, [pc, #92]	@ (8001cec <HAL_TIM_MspPostInit+0xb8>)
 8001c90:	f000 ff96 	bl	8002bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c94:	e022      	b.n	8001cdc <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a15      	ldr	r2, [pc, #84]	@ (8001cf0 <HAL_TIM_MspPostInit+0xbc>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d11d      	bne.n	8001cdc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	4b10      	ldr	r3, [pc, #64]	@ (8001ce8 <HAL_TIM_MspPostInit+0xb4>)
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca8:	4a0f      	ldr	r2, [pc, #60]	@ (8001ce8 <HAL_TIM_MspPostInit+0xb4>)
 8001caa:	f043 0302 	orr.w	r3, r3, #2
 8001cae:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce8 <HAL_TIM_MspPostInit+0xb4>)
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001cbc:	2330      	movs	r3, #48	@ 0x30
 8001cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4807      	ldr	r0, [pc, #28]	@ (8001cf4 <HAL_TIM_MspPostInit+0xc0>)
 8001cd8:	f000 ff72 	bl	8002bc0 <HAL_GPIO_Init>
}
 8001cdc:	bf00      	nop
 8001cde:	3728      	adds	r7, #40	@ 0x28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40010000 	.word	0x40010000
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40020000 	.word	0x40020000
 8001cf0:	40000400 	.word	0x40000400
 8001cf4:	40020400 	.word	0x40020400

08001cf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08c      	sub	sp, #48	@ 0x30
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 031c 	add.w	r3, r7, #28
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a36      	ldr	r2, [pc, #216]	@ (8001df0 <HAL_UART_MspInit+0xf8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d12c      	bne.n	8001d74 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61bb      	str	r3, [r7, #24]
 8001d1e:	4b35      	ldr	r3, [pc, #212]	@ (8001df4 <HAL_UART_MspInit+0xfc>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d22:	4a34      	ldr	r2, [pc, #208]	@ (8001df4 <HAL_UART_MspInit+0xfc>)
 8001d24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d2a:	4b32      	ldr	r3, [pc, #200]	@ (8001df4 <HAL_UART_MspInit+0xfc>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d32:	61bb      	str	r3, [r7, #24]
 8001d34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	4b2e      	ldr	r3, [pc, #184]	@ (8001df4 <HAL_UART_MspInit+0xfc>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	4a2d      	ldr	r2, [pc, #180]	@ (8001df4 <HAL_UART_MspInit+0xfc>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d46:	4b2b      	ldr	r3, [pc, #172]	@ (8001df4 <HAL_UART_MspInit+0xfc>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d52:	230c      	movs	r3, #12
 8001d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d62:	2307      	movs	r3, #7
 8001d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d66:	f107 031c 	add.w	r3, r7, #28
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4822      	ldr	r0, [pc, #136]	@ (8001df8 <HAL_UART_MspInit+0x100>)
 8001d6e:	f000 ff27 	bl	8002bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001d72:	e038      	b.n	8001de6 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a20      	ldr	r2, [pc, #128]	@ (8001dfc <HAL_UART_MspInit+0x104>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d133      	bne.n	8001de6 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	4b1c      	ldr	r3, [pc, #112]	@ (8001df4 <HAL_UART_MspInit+0xfc>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d86:	4a1b      	ldr	r2, [pc, #108]	@ (8001df4 <HAL_UART_MspInit+0xfc>)
 8001d88:	f043 0320 	orr.w	r3, r3, #32
 8001d8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d8e:	4b19      	ldr	r3, [pc, #100]	@ (8001df4 <HAL_UART_MspInit+0xfc>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d92:	f003 0320 	and.w	r3, r3, #32
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	4b15      	ldr	r3, [pc, #84]	@ (8001df4 <HAL_UART_MspInit+0xfc>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da2:	4a14      	ldr	r2, [pc, #80]	@ (8001df4 <HAL_UART_MspInit+0xfc>)
 8001da4:	f043 0304 	orr.w	r3, r3, #4
 8001da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001daa:	4b12      	ldr	r3, [pc, #72]	@ (8001df4 <HAL_UART_MspInit+0xfc>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	f003 0304 	and.w	r3, r3, #4
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001db6:	23c0      	movs	r3, #192	@ 0xc0
 8001db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001dc6:	2308      	movs	r3, #8
 8001dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dca:	f107 031c 	add.w	r3, r7, #28
 8001dce:	4619      	mov	r1, r3
 8001dd0:	480b      	ldr	r0, [pc, #44]	@ (8001e00 <HAL_UART_MspInit+0x108>)
 8001dd2:	f000 fef5 	bl	8002bc0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2100      	movs	r1, #0
 8001dda:	2047      	movs	r0, #71	@ 0x47
 8001ddc:	f000 fe27 	bl	8002a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001de0:	2047      	movs	r0, #71	@ 0x47
 8001de2:	f000 fe40 	bl	8002a66 <HAL_NVIC_EnableIRQ>
}
 8001de6:	bf00      	nop
 8001de8:	3730      	adds	r7, #48	@ 0x30
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40004400 	.word	0x40004400
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40020000 	.word	0x40020000
 8001dfc:	40011400 	.word	0x40011400
 8001e00:	40020800 	.word	0x40020800

08001e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <NMI_Handler+0x4>

08001e0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e10:	bf00      	nop
 8001e12:	e7fd      	b.n	8001e10 <HardFault_Handler+0x4>

08001e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <MemManage_Handler+0x4>

08001e1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <BusFault_Handler+0x4>

08001e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e28:	bf00      	nop
 8001e2a:	e7fd      	b.n	8001e28 <UsageFault_Handler+0x4>

08001e2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e5a:	f000 f8d7 	bl	800200c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RPM_TICK_Pin);
 8001e66:	2004      	movs	r0, #4
 8001e68:	f001 f860 	bl	8002f2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001e6c:	bf00      	nop
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001e74:	4802      	ldr	r0, [pc, #8]	@ (8001e80 <USART6_IRQHandler+0x10>)
 8001e76:	f002 fdb5 	bl	80049e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	200001dc 	.word	0x200001dc

08001e84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e8c:	4a14      	ldr	r2, [pc, #80]	@ (8001ee0 <_sbrk+0x5c>)
 8001e8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ee4 <_sbrk+0x60>)
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e98:	4b13      	ldr	r3, [pc, #76]	@ (8001ee8 <_sbrk+0x64>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d102      	bne.n	8001ea6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea0:	4b11      	ldr	r3, [pc, #68]	@ (8001ee8 <_sbrk+0x64>)
 8001ea2:	4a12      	ldr	r2, [pc, #72]	@ (8001eec <_sbrk+0x68>)
 8001ea4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ea6:	4b10      	ldr	r3, [pc, #64]	@ (8001ee8 <_sbrk+0x64>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d207      	bcs.n	8001ec4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eb4:	f003 fd6c 	bl	8005990 <__errno>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	220c      	movs	r2, #12
 8001ebc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec2:	e009      	b.n	8001ed8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ec4:	4b08      	ldr	r3, [pc, #32]	@ (8001ee8 <_sbrk+0x64>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eca:	4b07      	ldr	r3, [pc, #28]	@ (8001ee8 <_sbrk+0x64>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	4a05      	ldr	r2, [pc, #20]	@ (8001ee8 <_sbrk+0x64>)
 8001ed4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20020000 	.word	0x20020000
 8001ee4:	00000400 	.word	0x00000400
 8001ee8:	20000228 	.word	0x20000228
 8001eec:	20000378 	.word	0x20000378

08001ef0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ef4:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <SystemInit+0x20>)
 8001ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001efa:	4a05      	ldr	r2, [pc, #20]	@ (8001f10 <SystemInit+0x20>)
 8001efc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f18:	f7ff ffea 	bl	8001ef0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f1c:	480c      	ldr	r0, [pc, #48]	@ (8001f50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f1e:	490d      	ldr	r1, [pc, #52]	@ (8001f54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f20:	4a0d      	ldr	r2, [pc, #52]	@ (8001f58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f24:	e002      	b.n	8001f2c <LoopCopyDataInit>

08001f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f2a:	3304      	adds	r3, #4

08001f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f30:	d3f9      	bcc.n	8001f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f32:	4a0a      	ldr	r2, [pc, #40]	@ (8001f5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f34:	4c0a      	ldr	r4, [pc, #40]	@ (8001f60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f38:	e001      	b.n	8001f3e <LoopFillZerobss>

08001f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f3c:	3204      	adds	r2, #4

08001f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f40:	d3fb      	bcc.n	8001f3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f42:	f003 fd2b 	bl	800599c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f46:	f7fe fc7b 	bl	8000840 <main>
  bx  lr    
 8001f4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f54:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001f58:	08006a5c 	.word	0x08006a5c
  ldr r2, =_sbss
 8001f5c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001f60:	20000378 	.word	0x20000378

08001f64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f64:	e7fe      	b.n	8001f64 <ADC_IRQHandler>
	...

08001f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa8 <HAL_Init+0x40>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa8 <HAL_Init+0x40>)
 8001f72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f78:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa8 <HAL_Init+0x40>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa8 <HAL_Init+0x40>)
 8001f7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f84:	4b08      	ldr	r3, [pc, #32]	@ (8001fa8 <HAL_Init+0x40>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a07      	ldr	r2, [pc, #28]	@ (8001fa8 <HAL_Init+0x40>)
 8001f8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f90:	2003      	movs	r0, #3
 8001f92:	f000 fd41 	bl	8002a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f96:	2000      	movs	r0, #0
 8001f98:	f000 f808 	bl	8001fac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f9c:	f7ff fda6 	bl	8001aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40023c00 	.word	0x40023c00

08001fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fb4:	4b12      	ldr	r3, [pc, #72]	@ (8002000 <HAL_InitTick+0x54>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b12      	ldr	r3, [pc, #72]	@ (8002004 <HAL_InitTick+0x58>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 fd59 	bl	8002a82 <HAL_SYSTICK_Config>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e00e      	b.n	8001ff8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b0f      	cmp	r3, #15
 8001fde:	d80a      	bhi.n	8001ff6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe8:	f000 fd21 	bl	8002a2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fec:	4a06      	ldr	r2, [pc, #24]	@ (8002008 <HAL_InitTick+0x5c>)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	e000      	b.n	8001ff8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20000000 	.word	0x20000000
 8002004:	20000008 	.word	0x20000008
 8002008:	20000004 	.word	0x20000004

0800200c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002010:	4b06      	ldr	r3, [pc, #24]	@ (800202c <HAL_IncTick+0x20>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <HAL_IncTick+0x24>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4413      	add	r3, r2
 800201c:	4a04      	ldr	r2, [pc, #16]	@ (8002030 <HAL_IncTick+0x24>)
 800201e:	6013      	str	r3, [r2, #0]
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	20000008 	.word	0x20000008
 8002030:	2000022c 	.word	0x2000022c

08002034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return uwTick;
 8002038:	4b03      	ldr	r3, [pc, #12]	@ (8002048 <HAL_GetTick+0x14>)
 800203a:	681b      	ldr	r3, [r3, #0]
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	2000022c 	.word	0x2000022c

0800204c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002054:	f7ff ffee 	bl	8002034 <HAL_GetTick>
 8002058:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002064:	d005      	beq.n	8002072 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002066:	4b0a      	ldr	r3, [pc, #40]	@ (8002090 <HAL_Delay+0x44>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4413      	add	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002072:	bf00      	nop
 8002074:	f7ff ffde 	bl	8002034 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	429a      	cmp	r2, r3
 8002082:	d8f7      	bhi.n	8002074 <HAL_Delay+0x28>
  {
  }
}
 8002084:	bf00      	nop
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000008 	.word	0x20000008

08002094 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800209c:	2300      	movs	r3, #0
 800209e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e033      	b.n	8002112 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d109      	bne.n	80020c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff fd42 	bl	8001b3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d118      	bne.n	8002104 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80020da:	f023 0302 	bic.w	r3, r3, #2
 80020de:	f043 0202 	orr.w	r2, r3, #2
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 faca 	bl	8002680 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f6:	f023 0303 	bic.w	r3, r3, #3
 80020fa:	f043 0201 	orr.w	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	641a      	str	r2, [r3, #64]	@ 0x40
 8002102:	e001      	b.n	8002108 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002110:	7bfb      	ldrb	r3, [r7, #15]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800212e:	2b01      	cmp	r3, #1
 8002130:	d101      	bne.n	8002136 <HAL_ADC_Start+0x1a>
 8002132:	2302      	movs	r3, #2
 8002134:	e097      	b.n	8002266 <HAL_ADC_Start+0x14a>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b01      	cmp	r3, #1
 800214a:	d018      	beq.n	800217e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0201 	orr.w	r2, r2, #1
 800215a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800215c:	4b45      	ldr	r3, [pc, #276]	@ (8002274 <HAL_ADC_Start+0x158>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a45      	ldr	r2, [pc, #276]	@ (8002278 <HAL_ADC_Start+0x15c>)
 8002162:	fba2 2303 	umull	r2, r3, r2, r3
 8002166:	0c9a      	lsrs	r2, r3, #18
 8002168:	4613      	mov	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4413      	add	r3, r2
 800216e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002170:	e002      	b.n	8002178 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	3b01      	subs	r3, #1
 8002176:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f9      	bne.n	8002172 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b01      	cmp	r3, #1
 800218a:	d15f      	bne.n	800224c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002190:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002194:	f023 0301 	bic.w	r3, r3, #1
 8002198:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d007      	beq.n	80021be <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021ca:	d106      	bne.n	80021da <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d0:	f023 0206 	bic.w	r2, r3, #6
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	645a      	str	r2, [r3, #68]	@ 0x44
 80021d8:	e002      	b.n	80021e0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021e8:	4b24      	ldr	r3, [pc, #144]	@ (800227c <HAL_ADC_Start+0x160>)
 80021ea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80021f4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f003 031f 	and.w	r3, r3, #31
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10f      	bne.n	8002222 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d129      	bne.n	8002264 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689a      	ldr	r2, [r3, #8]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	e020      	b.n	8002264 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a16      	ldr	r2, [pc, #88]	@ (8002280 <HAL_ADC_Start+0x164>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d11b      	bne.n	8002264 <HAL_ADC_Start+0x148>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d114      	bne.n	8002264 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002248:	609a      	str	r2, [r3, #8]
 800224a:	e00b      	b.n	8002264 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002250:	f043 0210 	orr.w	r2, r3, #16
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225c:	f043 0201 	orr.w	r2, r3, #1
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	20000000 	.word	0x20000000
 8002278:	431bde83 	.word	0x431bde83
 800227c:	40012300 	.word	0x40012300
 8002280:	40012000 	.word	0x40012000

08002284 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002292:	2b01      	cmp	r3, #1
 8002294:	d101      	bne.n	800229a <HAL_ADC_Stop+0x16>
 8002296:	2302      	movs	r3, #2
 8002298:	e021      	b.n	80022de <HAL_ADC_Stop+0x5a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 0201 	bic.w	r2, r2, #1
 80022b0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d109      	bne.n	80022d4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80022c8:	f023 0301 	bic.w	r3, r3, #1
 80022cc:	f043 0201 	orr.w	r2, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b084      	sub	sp, #16
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
 80022f2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002302:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002306:	d113      	bne.n	8002330 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002312:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002316:	d10b      	bne.n	8002330 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231c:	f043 0220 	orr.w	r2, r3, #32
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e063      	b.n	80023f8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002330:	f7ff fe80 	bl	8002034 <HAL_GetTick>
 8002334:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002336:	e021      	b.n	800237c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233e:	d01d      	beq.n	800237c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d007      	beq.n	8002356 <HAL_ADC_PollForConversion+0x6c>
 8002346:	f7ff fe75 	bl	8002034 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d212      	bcs.n	800237c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b02      	cmp	r3, #2
 8002362:	d00b      	beq.n	800237c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002368:	f043 0204 	orr.w	r2, r3, #4
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e03d      	b.n	80023f8 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b02      	cmp	r3, #2
 8002388:	d1d6      	bne.n	8002338 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f06f 0212 	mvn.w	r2, #18
 8002392:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002398:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d123      	bne.n	80023f6 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d11f      	bne.n	80023f6 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023bc:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d006      	beq.n	80023d2 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d111      	bne.n	80023f6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d105      	bne.n	80023f6 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ee:	f043 0201 	orr.w	r2, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800240e:	4618      	mov	r0, r3
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
	...

0800241c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002426:	2300      	movs	r3, #0
 8002428:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x1c>
 8002434:	2302      	movs	r3, #2
 8002436:	e113      	b.n	8002660 <HAL_ADC_ConfigChannel+0x244>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b09      	cmp	r3, #9
 8002446:	d925      	bls.n	8002494 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68d9      	ldr	r1, [r3, #12]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	b29b      	uxth	r3, r3
 8002454:	461a      	mov	r2, r3
 8002456:	4613      	mov	r3, r2
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	4413      	add	r3, r2
 800245c:	3b1e      	subs	r3, #30
 800245e:	2207      	movs	r2, #7
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43da      	mvns	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	400a      	ands	r2, r1
 800246c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68d9      	ldr	r1, [r3, #12]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	b29b      	uxth	r3, r3
 800247e:	4618      	mov	r0, r3
 8002480:	4603      	mov	r3, r0
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	4403      	add	r3, r0
 8002486:	3b1e      	subs	r3, #30
 8002488:	409a      	lsls	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	e022      	b.n	80024da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6919      	ldr	r1, [r3, #16]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	461a      	mov	r2, r3
 80024a2:	4613      	mov	r3, r2
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	4413      	add	r3, r2
 80024a8:	2207      	movs	r2, #7
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43da      	mvns	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	400a      	ands	r2, r1
 80024b6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6919      	ldr	r1, [r3, #16]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	4618      	mov	r0, r3
 80024ca:	4603      	mov	r3, r0
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4403      	add	r3, r0
 80024d0:	409a      	lsls	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b06      	cmp	r3, #6
 80024e0:	d824      	bhi.n	800252c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	3b05      	subs	r3, #5
 80024f4:	221f      	movs	r2, #31
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43da      	mvns	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	400a      	ands	r2, r1
 8002502:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	b29b      	uxth	r3, r3
 8002510:	4618      	mov	r0, r3
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	3b05      	subs	r3, #5
 800251e:	fa00 f203 	lsl.w	r2, r0, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	635a      	str	r2, [r3, #52]	@ 0x34
 800252a:	e04c      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b0c      	cmp	r3, #12
 8002532:	d824      	bhi.n	800257e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	3b23      	subs	r3, #35	@ 0x23
 8002546:	221f      	movs	r2, #31
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43da      	mvns	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	400a      	ands	r2, r1
 8002554:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	b29b      	uxth	r3, r3
 8002562:	4618      	mov	r0, r3
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	3b23      	subs	r3, #35	@ 0x23
 8002570:	fa00 f203 	lsl.w	r2, r0, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	631a      	str	r2, [r3, #48]	@ 0x30
 800257c:	e023      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	3b41      	subs	r3, #65	@ 0x41
 8002590:	221f      	movs	r2, #31
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43da      	mvns	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	400a      	ands	r2, r1
 800259e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	4618      	mov	r0, r3
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	3b41      	subs	r3, #65	@ 0x41
 80025ba:	fa00 f203 	lsl.w	r2, r0, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025c6:	4b29      	ldr	r3, [pc, #164]	@ (800266c <HAL_ADC_ConfigChannel+0x250>)
 80025c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a28      	ldr	r2, [pc, #160]	@ (8002670 <HAL_ADC_ConfigChannel+0x254>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d10f      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x1d8>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b12      	cmp	r3, #18
 80025da:	d10b      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002670 <HAL_ADC_ConfigChannel+0x254>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d12b      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x23a>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a1c      	ldr	r2, [pc, #112]	@ (8002674 <HAL_ADC_ConfigChannel+0x258>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d003      	beq.n	8002610 <HAL_ADC_ConfigChannel+0x1f4>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b11      	cmp	r3, #17
 800260e:	d122      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a11      	ldr	r2, [pc, #68]	@ (8002674 <HAL_ADC_ConfigChannel+0x258>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d111      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002632:	4b11      	ldr	r3, [pc, #68]	@ (8002678 <HAL_ADC_ConfigChannel+0x25c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a11      	ldr	r2, [pc, #68]	@ (800267c <HAL_ADC_ConfigChannel+0x260>)
 8002638:	fba2 2303 	umull	r2, r3, r2, r3
 800263c:	0c9a      	lsrs	r2, r3, #18
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002648:	e002      	b.n	8002650 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	3b01      	subs	r3, #1
 800264e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f9      	bne.n	800264a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	40012300 	.word	0x40012300
 8002670:	40012000 	.word	0x40012000
 8002674:	10000012 	.word	0x10000012
 8002678:	20000000 	.word	0x20000000
 800267c:	431bde83 	.word	0x431bde83

08002680 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002688:	4b79      	ldr	r3, [pc, #484]	@ (8002870 <ADC_Init+0x1f0>)
 800268a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	431a      	orrs	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6859      	ldr	r1, [r3, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	021a      	lsls	r2, r3, #8
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80026d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6859      	ldr	r1, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6899      	ldr	r1, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002712:	4a58      	ldr	r2, [pc, #352]	@ (8002874 <ADC_Init+0x1f4>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d022      	beq.n	800275e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002726:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6899      	ldr	r1, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002748:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6899      	ldr	r1, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	e00f      	b.n	800277e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800276c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800277c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0202 	bic.w	r2, r2, #2
 800278c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6899      	ldr	r1, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	7e1b      	ldrb	r3, [r3, #24]
 8002798:	005a      	lsls	r2, r3, #1
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d01b      	beq.n	80027e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027ba:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80027ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6859      	ldr	r1, [r3, #4]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d6:	3b01      	subs	r3, #1
 80027d8:	035a      	lsls	r2, r3, #13
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	e007      	b.n	80027f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027f2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002802:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	3b01      	subs	r3, #1
 8002810:	051a      	lsls	r2, r3, #20
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002828:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6899      	ldr	r1, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002836:	025a      	lsls	r2, r3, #9
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800284e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6899      	ldr	r1, [r3, #8]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	029a      	lsls	r2, r3, #10
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	609a      	str	r2, [r3, #8]
}
 8002864:	bf00      	nop
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	40012300 	.word	0x40012300
 8002874:	0f000001 	.word	0x0f000001

08002878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002888:	4b0c      	ldr	r3, [pc, #48]	@ (80028bc <__NVIC_SetPriorityGrouping+0x44>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002894:	4013      	ands	r3, r2
 8002896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028aa:	4a04      	ldr	r2, [pc, #16]	@ (80028bc <__NVIC_SetPriorityGrouping+0x44>)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	60d3      	str	r3, [r2, #12]
}
 80028b0:	bf00      	nop
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	e000ed00 	.word	0xe000ed00

080028c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028c4:	4b04      	ldr	r3, [pc, #16]	@ (80028d8 <__NVIC_GetPriorityGrouping+0x18>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	0a1b      	lsrs	r3, r3, #8
 80028ca:	f003 0307 	and.w	r3, r3, #7
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	db0b      	blt.n	8002906 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	f003 021f 	and.w	r2, r3, #31
 80028f4:	4907      	ldr	r1, [pc, #28]	@ (8002914 <__NVIC_EnableIRQ+0x38>)
 80028f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	2001      	movs	r0, #1
 80028fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	e000e100 	.word	0xe000e100

08002918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	6039      	str	r1, [r7, #0]
 8002922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002928:	2b00      	cmp	r3, #0
 800292a:	db0a      	blt.n	8002942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	b2da      	uxtb	r2, r3
 8002930:	490c      	ldr	r1, [pc, #48]	@ (8002964 <__NVIC_SetPriority+0x4c>)
 8002932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002936:	0112      	lsls	r2, r2, #4
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	440b      	add	r3, r1
 800293c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002940:	e00a      	b.n	8002958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	b2da      	uxtb	r2, r3
 8002946:	4908      	ldr	r1, [pc, #32]	@ (8002968 <__NVIC_SetPriority+0x50>)
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	3b04      	subs	r3, #4
 8002950:	0112      	lsls	r2, r2, #4
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	440b      	add	r3, r1
 8002956:	761a      	strb	r2, [r3, #24]
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	e000e100 	.word	0xe000e100
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800296c:	b480      	push	{r7}
 800296e:	b089      	sub	sp, #36	@ 0x24
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f1c3 0307 	rsb	r3, r3, #7
 8002986:	2b04      	cmp	r3, #4
 8002988:	bf28      	it	cs
 800298a:	2304      	movcs	r3, #4
 800298c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	3304      	adds	r3, #4
 8002992:	2b06      	cmp	r3, #6
 8002994:	d902      	bls.n	800299c <NVIC_EncodePriority+0x30>
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	3b03      	subs	r3, #3
 800299a:	e000      	b.n	800299e <NVIC_EncodePriority+0x32>
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a0:	f04f 32ff 	mov.w	r2, #4294967295
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43da      	mvns	r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	401a      	ands	r2, r3
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029b4:	f04f 31ff 	mov.w	r1, #4294967295
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	fa01 f303 	lsl.w	r3, r1, r3
 80029be:	43d9      	mvns	r1, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c4:	4313      	orrs	r3, r2
         );
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3724      	adds	r7, #36	@ 0x24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
	...

080029d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3b01      	subs	r3, #1
 80029e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029e4:	d301      	bcc.n	80029ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029e6:	2301      	movs	r3, #1
 80029e8:	e00f      	b.n	8002a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002a14 <SysTick_Config+0x40>)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029f2:	210f      	movs	r1, #15
 80029f4:	f04f 30ff 	mov.w	r0, #4294967295
 80029f8:	f7ff ff8e 	bl	8002918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029fc:	4b05      	ldr	r3, [pc, #20]	@ (8002a14 <SysTick_Config+0x40>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a02:	4b04      	ldr	r3, [pc, #16]	@ (8002a14 <SysTick_Config+0x40>)
 8002a04:	2207      	movs	r2, #7
 8002a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	e000e010 	.word	0xe000e010

08002a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff ff29 	bl	8002878 <__NVIC_SetPriorityGrouping>
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b086      	sub	sp, #24
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	4603      	mov	r3, r0
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	607a      	str	r2, [r7, #4]
 8002a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a40:	f7ff ff3e 	bl	80028c0 <__NVIC_GetPriorityGrouping>
 8002a44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68b9      	ldr	r1, [r7, #8]
 8002a4a:	6978      	ldr	r0, [r7, #20]
 8002a4c:	f7ff ff8e 	bl	800296c <NVIC_EncodePriority>
 8002a50:	4602      	mov	r2, r0
 8002a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a56:	4611      	mov	r1, r2
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff ff5d 	bl	8002918 <__NVIC_SetPriority>
}
 8002a5e:	bf00      	nop
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff ff31 	bl	80028dc <__NVIC_EnableIRQ>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff ffa2 	bl	80029d4 <SysTick_Config>
 8002a90:	4603      	mov	r3, r0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b084      	sub	sp, #16
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002aa8:	f7ff fac4 	bl	8002034 <HAL_GetTick>
 8002aac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d008      	beq.n	8002acc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2280      	movs	r2, #128	@ 0x80
 8002abe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e052      	b.n	8002b72 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0216 	bic.w	r2, r2, #22
 8002ada:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	695a      	ldr	r2, [r3, #20]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002aea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d103      	bne.n	8002afc <HAL_DMA_Abort+0x62>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d007      	beq.n	8002b0c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0208 	bic.w	r2, r2, #8
 8002b0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0201 	bic.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b1c:	e013      	b.n	8002b46 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b1e:	f7ff fa89 	bl	8002034 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b05      	cmp	r3, #5
 8002b2a:	d90c      	bls.n	8002b46 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2203      	movs	r2, #3
 8002b36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e015      	b.n	8002b72 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1e4      	bne.n	8002b1e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b58:	223f      	movs	r2, #63	@ 0x3f
 8002b5a:	409a      	lsls	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d004      	beq.n	8002b98 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2280      	movs	r2, #128	@ 0x80
 8002b92:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e00c      	b.n	8002bb2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2205      	movs	r2, #5
 8002b9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0201 	bic.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b089      	sub	sp, #36	@ 0x24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	e159      	b.n	8002e90 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bdc:	2201      	movs	r2, #1
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4013      	ands	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	f040 8148 	bne.w	8002e8a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d005      	beq.n	8002c12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d130      	bne.n	8002c74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4013      	ands	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c48:	2201      	movs	r2, #1
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f003 0201 	and.w	r2, r3, #1
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	2b03      	cmp	r3, #3
 8002c7e:	d017      	beq.n	8002cb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	2203      	movs	r2, #3
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d123      	bne.n	8002d04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	08da      	lsrs	r2, r3, #3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3208      	adds	r2, #8
 8002cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	220f      	movs	r2, #15
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	691a      	ldr	r2, [r3, #16]
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	08da      	lsrs	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3208      	adds	r2, #8
 8002cfe:	69b9      	ldr	r1, [r7, #24]
 8002d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	2203      	movs	r2, #3
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 0203 	and.w	r2, r3, #3
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 80a2 	beq.w	8002e8a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	4b57      	ldr	r3, [pc, #348]	@ (8002ea8 <HAL_GPIO_Init+0x2e8>)
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4e:	4a56      	ldr	r2, [pc, #344]	@ (8002ea8 <HAL_GPIO_Init+0x2e8>)
 8002d50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d54:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d56:	4b54      	ldr	r3, [pc, #336]	@ (8002ea8 <HAL_GPIO_Init+0x2e8>)
 8002d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d62:	4a52      	ldr	r2, [pc, #328]	@ (8002eac <HAL_GPIO_Init+0x2ec>)
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	089b      	lsrs	r3, r3, #2
 8002d68:	3302      	adds	r3, #2
 8002d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	220f      	movs	r2, #15
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4013      	ands	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a49      	ldr	r2, [pc, #292]	@ (8002eb0 <HAL_GPIO_Init+0x2f0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d019      	beq.n	8002dc2 <HAL_GPIO_Init+0x202>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a48      	ldr	r2, [pc, #288]	@ (8002eb4 <HAL_GPIO_Init+0x2f4>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d013      	beq.n	8002dbe <HAL_GPIO_Init+0x1fe>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a47      	ldr	r2, [pc, #284]	@ (8002eb8 <HAL_GPIO_Init+0x2f8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00d      	beq.n	8002dba <HAL_GPIO_Init+0x1fa>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a46      	ldr	r2, [pc, #280]	@ (8002ebc <HAL_GPIO_Init+0x2fc>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d007      	beq.n	8002db6 <HAL_GPIO_Init+0x1f6>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a45      	ldr	r2, [pc, #276]	@ (8002ec0 <HAL_GPIO_Init+0x300>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d101      	bne.n	8002db2 <HAL_GPIO_Init+0x1f2>
 8002dae:	2304      	movs	r3, #4
 8002db0:	e008      	b.n	8002dc4 <HAL_GPIO_Init+0x204>
 8002db2:	2307      	movs	r3, #7
 8002db4:	e006      	b.n	8002dc4 <HAL_GPIO_Init+0x204>
 8002db6:	2303      	movs	r3, #3
 8002db8:	e004      	b.n	8002dc4 <HAL_GPIO_Init+0x204>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e002      	b.n	8002dc4 <HAL_GPIO_Init+0x204>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <HAL_GPIO_Init+0x204>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	69fa      	ldr	r2, [r7, #28]
 8002dc6:	f002 0203 	and.w	r2, r2, #3
 8002dca:	0092      	lsls	r2, r2, #2
 8002dcc:	4093      	lsls	r3, r2
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dd4:	4935      	ldr	r1, [pc, #212]	@ (8002eac <HAL_GPIO_Init+0x2ec>)
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	089b      	lsrs	r3, r3, #2
 8002dda:	3302      	adds	r3, #2
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002de2:	4b38      	ldr	r3, [pc, #224]	@ (8002ec4 <HAL_GPIO_Init+0x304>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	43db      	mvns	r3, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4013      	ands	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e06:	4a2f      	ldr	r2, [pc, #188]	@ (8002ec4 <HAL_GPIO_Init+0x304>)
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e0c:	4b2d      	ldr	r3, [pc, #180]	@ (8002ec4 <HAL_GPIO_Init+0x304>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	43db      	mvns	r3, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e30:	4a24      	ldr	r2, [pc, #144]	@ (8002ec4 <HAL_GPIO_Init+0x304>)
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e36:	4b23      	ldr	r3, [pc, #140]	@ (8002ec4 <HAL_GPIO_Init+0x304>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4013      	ands	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e5a:	4a1a      	ldr	r2, [pc, #104]	@ (8002ec4 <HAL_GPIO_Init+0x304>)
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e60:	4b18      	ldr	r3, [pc, #96]	@ (8002ec4 <HAL_GPIO_Init+0x304>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e84:	4a0f      	ldr	r2, [pc, #60]	@ (8002ec4 <HAL_GPIO_Init+0x304>)
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	61fb      	str	r3, [r7, #28]
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	2b0f      	cmp	r3, #15
 8002e94:	f67f aea2 	bls.w	8002bdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e98:	bf00      	nop
 8002e9a:	bf00      	nop
 8002e9c:	3724      	adds	r7, #36	@ 0x24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	40013800 	.word	0x40013800
 8002eb0:	40020000 	.word	0x40020000
 8002eb4:	40020400 	.word	0x40020400
 8002eb8:	40020800 	.word	0x40020800
 8002ebc:	40020c00 	.word	0x40020c00
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	40013c00 	.word	0x40013c00

08002ec8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691a      	ldr	r2, [r3, #16]
 8002ed8:	887b      	ldrh	r3, [r7, #2]
 8002eda:	4013      	ands	r3, r2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	73fb      	strb	r3, [r7, #15]
 8002ee4:	e001      	b.n	8002eea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	807b      	strh	r3, [r7, #2]
 8002f04:	4613      	mov	r3, r2
 8002f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f08:	787b      	ldrb	r3, [r7, #1]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f0e:	887a      	ldrh	r2, [r7, #2]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f14:	e003      	b.n	8002f1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f16:	887b      	ldrh	r3, [r7, #2]
 8002f18:	041a      	lsls	r2, r3, #16
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	619a      	str	r2, [r3, #24]
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
	...

08002f2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f36:	4b08      	ldr	r3, [pc, #32]	@ (8002f58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f38:	695a      	ldr	r2, [r3, #20]
 8002f3a:	88fb      	ldrh	r3, [r7, #6]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d006      	beq.n	8002f50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f42:	4a05      	ldr	r2, [pc, #20]	@ (8002f58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f44:	88fb      	ldrh	r3, [r7, #6]
 8002f46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f48:	88fb      	ldrh	r3, [r7, #6]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fe fdb2 	bl	8001ab4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f50:	bf00      	nop
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40013c00 	.word	0x40013c00

08002f5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e267      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d075      	beq.n	8003066 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f7a:	4b88      	ldr	r3, [pc, #544]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d00c      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f86:	4b85      	ldr	r3, [pc, #532]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	d112      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f92:	4b82      	ldr	r3, [pc, #520]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f9e:	d10b      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa0:	4b7e      	ldr	r3, [pc, #504]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d05b      	beq.n	8003064 <HAL_RCC_OscConfig+0x108>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d157      	bne.n	8003064 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e242      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fc0:	d106      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x74>
 8002fc2:	4b76      	ldr	r3, [pc, #472]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a75      	ldr	r2, [pc, #468]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8002fc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	e01d      	b.n	800300c <HAL_RCC_OscConfig+0xb0>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fd8:	d10c      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x98>
 8002fda:	4b70      	ldr	r3, [pc, #448]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a6f      	ldr	r2, [pc, #444]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8002fe0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	4b6d      	ldr	r3, [pc, #436]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a6c      	ldr	r2, [pc, #432]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8002fec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	e00b      	b.n	800300c <HAL_RCC_OscConfig+0xb0>
 8002ff4:	4b69      	ldr	r3, [pc, #420]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a68      	ldr	r2, [pc, #416]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8002ffa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ffe:	6013      	str	r3, [r2, #0]
 8003000:	4b66      	ldr	r3, [pc, #408]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a65      	ldr	r2, [pc, #404]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8003006:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800300a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d013      	beq.n	800303c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003014:	f7ff f80e 	bl	8002034 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800301c:	f7ff f80a 	bl	8002034 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b64      	cmp	r3, #100	@ 0x64
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e207      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800302e:	4b5b      	ldr	r3, [pc, #364]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0f0      	beq.n	800301c <HAL_RCC_OscConfig+0xc0>
 800303a:	e014      	b.n	8003066 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303c:	f7fe fffa 	bl	8002034 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003044:	f7fe fff6 	bl	8002034 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b64      	cmp	r3, #100	@ 0x64
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e1f3      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003056:	4b51      	ldr	r3, [pc, #324]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_OscConfig+0xe8>
 8003062:	e000      	b.n	8003066 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003064:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d063      	beq.n	800313a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003072:	4b4a      	ldr	r3, [pc, #296]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 030c 	and.w	r3, r3, #12
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00b      	beq.n	8003096 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800307e:	4b47      	ldr	r3, [pc, #284]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003086:	2b08      	cmp	r3, #8
 8003088:	d11c      	bne.n	80030c4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800308a:	4b44      	ldr	r3, [pc, #272]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d116      	bne.n	80030c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003096:	4b41      	ldr	r3, [pc, #260]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d005      	beq.n	80030ae <HAL_RCC_OscConfig+0x152>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d001      	beq.n	80030ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e1c7      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ae:	4b3b      	ldr	r3, [pc, #236]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	4937      	ldr	r1, [pc, #220]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030c2:	e03a      	b.n	800313a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d020      	beq.n	800310e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030cc:	4b34      	ldr	r3, [pc, #208]	@ (80031a0 <HAL_RCC_OscConfig+0x244>)
 80030ce:	2201      	movs	r2, #1
 80030d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d2:	f7fe ffaf 	bl	8002034 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030da:	f7fe ffab 	bl	8002034 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e1a8      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ec:	4b2b      	ldr	r3, [pc, #172]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0f0      	beq.n	80030da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f8:	4b28      	ldr	r3, [pc, #160]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	4925      	ldr	r1, [pc, #148]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8003108:	4313      	orrs	r3, r2
 800310a:	600b      	str	r3, [r1, #0]
 800310c:	e015      	b.n	800313a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800310e:	4b24      	ldr	r3, [pc, #144]	@ (80031a0 <HAL_RCC_OscConfig+0x244>)
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003114:	f7fe ff8e 	bl	8002034 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800311c:	f7fe ff8a 	bl	8002034 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e187      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800312e:	4b1b      	ldr	r3, [pc, #108]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f0      	bne.n	800311c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d036      	beq.n	80031b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d016      	beq.n	800317c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800314e:	4b15      	ldr	r3, [pc, #84]	@ (80031a4 <HAL_RCC_OscConfig+0x248>)
 8003150:	2201      	movs	r2, #1
 8003152:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003154:	f7fe ff6e 	bl	8002034 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800315c:	f7fe ff6a 	bl	8002034 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e167      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800316e:	4b0b      	ldr	r3, [pc, #44]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8003170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0f0      	beq.n	800315c <HAL_RCC_OscConfig+0x200>
 800317a:	e01b      	b.n	80031b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800317c:	4b09      	ldr	r3, [pc, #36]	@ (80031a4 <HAL_RCC_OscConfig+0x248>)
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003182:	f7fe ff57 	bl	8002034 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003188:	e00e      	b.n	80031a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800318a:	f7fe ff53 	bl	8002034 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d907      	bls.n	80031a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e150      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
 800319c:	40023800 	.word	0x40023800
 80031a0:	42470000 	.word	0x42470000
 80031a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031a8:	4b88      	ldr	r3, [pc, #544]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 80031aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1ea      	bne.n	800318a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 8097 	beq.w	80032f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031c2:	2300      	movs	r3, #0
 80031c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031c6:	4b81      	ldr	r3, [pc, #516]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10f      	bne.n	80031f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	60bb      	str	r3, [r7, #8]
 80031d6:	4b7d      	ldr	r3, [pc, #500]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 80031d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031da:	4a7c      	ldr	r2, [pc, #496]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 80031dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80031e2:	4b7a      	ldr	r3, [pc, #488]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ea:	60bb      	str	r3, [r7, #8]
 80031ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ee:	2301      	movs	r3, #1
 80031f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f2:	4b77      	ldr	r3, [pc, #476]	@ (80033d0 <HAL_RCC_OscConfig+0x474>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d118      	bne.n	8003230 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031fe:	4b74      	ldr	r3, [pc, #464]	@ (80033d0 <HAL_RCC_OscConfig+0x474>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a73      	ldr	r2, [pc, #460]	@ (80033d0 <HAL_RCC_OscConfig+0x474>)
 8003204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003208:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800320a:	f7fe ff13 	bl	8002034 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003212:	f7fe ff0f 	bl	8002034 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e10c      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003224:	4b6a      	ldr	r3, [pc, #424]	@ (80033d0 <HAL_RCC_OscConfig+0x474>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0f0      	beq.n	8003212 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d106      	bne.n	8003246 <HAL_RCC_OscConfig+0x2ea>
 8003238:	4b64      	ldr	r3, [pc, #400]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 800323a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800323c:	4a63      	ldr	r2, [pc, #396]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 800323e:	f043 0301 	orr.w	r3, r3, #1
 8003242:	6713      	str	r3, [r2, #112]	@ 0x70
 8003244:	e01c      	b.n	8003280 <HAL_RCC_OscConfig+0x324>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	2b05      	cmp	r3, #5
 800324c:	d10c      	bne.n	8003268 <HAL_RCC_OscConfig+0x30c>
 800324e:	4b5f      	ldr	r3, [pc, #380]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 8003250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003252:	4a5e      	ldr	r2, [pc, #376]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 8003254:	f043 0304 	orr.w	r3, r3, #4
 8003258:	6713      	str	r3, [r2, #112]	@ 0x70
 800325a:	4b5c      	ldr	r3, [pc, #368]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 800325c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800325e:	4a5b      	ldr	r2, [pc, #364]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	6713      	str	r3, [r2, #112]	@ 0x70
 8003266:	e00b      	b.n	8003280 <HAL_RCC_OscConfig+0x324>
 8003268:	4b58      	ldr	r3, [pc, #352]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 800326a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800326c:	4a57      	ldr	r2, [pc, #348]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 800326e:	f023 0301 	bic.w	r3, r3, #1
 8003272:	6713      	str	r3, [r2, #112]	@ 0x70
 8003274:	4b55      	ldr	r3, [pc, #340]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 8003276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003278:	4a54      	ldr	r2, [pc, #336]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 800327a:	f023 0304 	bic.w	r3, r3, #4
 800327e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d015      	beq.n	80032b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003288:	f7fe fed4 	bl	8002034 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800328e:	e00a      	b.n	80032a6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003290:	f7fe fed0 	bl	8002034 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800329e:	4293      	cmp	r3, r2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e0cb      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a6:	4b49      	ldr	r3, [pc, #292]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 80032a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0ee      	beq.n	8003290 <HAL_RCC_OscConfig+0x334>
 80032b2:	e014      	b.n	80032de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b4:	f7fe febe 	bl	8002034 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ba:	e00a      	b.n	80032d2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032bc:	f7fe feba 	bl	8002034 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e0b5      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032d2:	4b3e      	ldr	r3, [pc, #248]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 80032d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1ee      	bne.n	80032bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032de:	7dfb      	ldrb	r3, [r7, #23]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d105      	bne.n	80032f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e4:	4b39      	ldr	r3, [pc, #228]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 80032e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e8:	4a38      	ldr	r2, [pc, #224]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 80032ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 80a1 	beq.w	800343c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032fa:	4b34      	ldr	r3, [pc, #208]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 030c 	and.w	r3, r3, #12
 8003302:	2b08      	cmp	r3, #8
 8003304:	d05c      	beq.n	80033c0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	2b02      	cmp	r3, #2
 800330c:	d141      	bne.n	8003392 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800330e:	4b31      	ldr	r3, [pc, #196]	@ (80033d4 <HAL_RCC_OscConfig+0x478>)
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003314:	f7fe fe8e 	bl	8002034 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800331c:	f7fe fe8a 	bl	8002034 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e087      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800332e:	4b27      	ldr	r3, [pc, #156]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69da      	ldr	r2, [r3, #28]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003348:	019b      	lsls	r3, r3, #6
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003350:	085b      	lsrs	r3, r3, #1
 8003352:	3b01      	subs	r3, #1
 8003354:	041b      	lsls	r3, r3, #16
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335c:	061b      	lsls	r3, r3, #24
 800335e:	491b      	ldr	r1, [pc, #108]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 8003360:	4313      	orrs	r3, r2
 8003362:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003364:	4b1b      	ldr	r3, [pc, #108]	@ (80033d4 <HAL_RCC_OscConfig+0x478>)
 8003366:	2201      	movs	r2, #1
 8003368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336a:	f7fe fe63 	bl	8002034 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003370:	e008      	b.n	8003384 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003372:	f7fe fe5f 	bl	8002034 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e05c      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003384:	4b11      	ldr	r3, [pc, #68]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0f0      	beq.n	8003372 <HAL_RCC_OscConfig+0x416>
 8003390:	e054      	b.n	800343c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003392:	4b10      	ldr	r3, [pc, #64]	@ (80033d4 <HAL_RCC_OscConfig+0x478>)
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003398:	f7fe fe4c 	bl	8002034 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a0:	f7fe fe48 	bl	8002034 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e045      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b2:	4b06      	ldr	r3, [pc, #24]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f0      	bne.n	80033a0 <HAL_RCC_OscConfig+0x444>
 80033be:	e03d      	b.n	800343c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d107      	bne.n	80033d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e038      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
 80033cc:	40023800 	.word	0x40023800
 80033d0:	40007000 	.word	0x40007000
 80033d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003448 <HAL_RCC_OscConfig+0x4ec>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d028      	beq.n	8003438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d121      	bne.n	8003438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033fe:	429a      	cmp	r2, r3
 8003400:	d11a      	bne.n	8003438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003408:	4013      	ands	r3, r2
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800340e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003410:	4293      	cmp	r3, r2
 8003412:	d111      	bne.n	8003438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800341e:	085b      	lsrs	r3, r3, #1
 8003420:	3b01      	subs	r3, #1
 8003422:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003424:	429a      	cmp	r2, r3
 8003426:	d107      	bne.n	8003438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003432:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003434:	429a      	cmp	r2, r3
 8003436:	d001      	beq.n	800343c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40023800 	.word	0x40023800

0800344c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e0cc      	b.n	80035fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003460:	4b68      	ldr	r3, [pc, #416]	@ (8003604 <HAL_RCC_ClockConfig+0x1b8>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	429a      	cmp	r2, r3
 800346c:	d90c      	bls.n	8003488 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346e:	4b65      	ldr	r3, [pc, #404]	@ (8003604 <HAL_RCC_ClockConfig+0x1b8>)
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003476:	4b63      	ldr	r3, [pc, #396]	@ (8003604 <HAL_RCC_ClockConfig+0x1b8>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	429a      	cmp	r2, r3
 8003482:	d001      	beq.n	8003488 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e0b8      	b.n	80035fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d020      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	d005      	beq.n	80034ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034a0:	4b59      	ldr	r3, [pc, #356]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	4a58      	ldr	r2, [pc, #352]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80034aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d005      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034b8:	4b53      	ldr	r3, [pc, #332]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	4a52      	ldr	r2, [pc, #328]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 80034be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80034c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034c4:	4b50      	ldr	r3, [pc, #320]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	494d      	ldr	r1, [pc, #308]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d044      	beq.n	800356c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d107      	bne.n	80034fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ea:	4b47      	ldr	r3, [pc, #284]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d119      	bne.n	800352a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e07f      	b.n	80035fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d003      	beq.n	800350a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003506:	2b03      	cmp	r3, #3
 8003508:	d107      	bne.n	800351a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800350a:	4b3f      	ldr	r3, [pc, #252]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d109      	bne.n	800352a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e06f      	b.n	80035fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800351a:	4b3b      	ldr	r3, [pc, #236]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e067      	b.n	80035fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800352a:	4b37      	ldr	r3, [pc, #220]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f023 0203 	bic.w	r2, r3, #3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	4934      	ldr	r1, [pc, #208]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 8003538:	4313      	orrs	r3, r2
 800353a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800353c:	f7fe fd7a 	bl	8002034 <HAL_GetTick>
 8003540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003542:	e00a      	b.n	800355a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003544:	f7fe fd76 	bl	8002034 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003552:	4293      	cmp	r3, r2
 8003554:	d901      	bls.n	800355a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e04f      	b.n	80035fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800355a:	4b2b      	ldr	r3, [pc, #172]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 020c 	and.w	r2, r3, #12
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	429a      	cmp	r2, r3
 800356a:	d1eb      	bne.n	8003544 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800356c:	4b25      	ldr	r3, [pc, #148]	@ (8003604 <HAL_RCC_ClockConfig+0x1b8>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	429a      	cmp	r2, r3
 8003578:	d20c      	bcs.n	8003594 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357a:	4b22      	ldr	r3, [pc, #136]	@ (8003604 <HAL_RCC_ClockConfig+0x1b8>)
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003582:	4b20      	ldr	r3, [pc, #128]	@ (8003604 <HAL_RCC_ClockConfig+0x1b8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d001      	beq.n	8003594 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e032      	b.n	80035fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b00      	cmp	r3, #0
 800359e:	d008      	beq.n	80035b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035a0:	4b19      	ldr	r3, [pc, #100]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	4916      	ldr	r1, [pc, #88]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d009      	beq.n	80035d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035be:	4b12      	ldr	r3, [pc, #72]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	490e      	ldr	r1, [pc, #56]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035d2:	f000 f821 	bl	8003618 <HAL_RCC_GetSysClockFreq>
 80035d6:	4602      	mov	r2, r0
 80035d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	091b      	lsrs	r3, r3, #4
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	490a      	ldr	r1, [pc, #40]	@ (800360c <HAL_RCC_ClockConfig+0x1c0>)
 80035e4:	5ccb      	ldrb	r3, [r1, r3]
 80035e6:	fa22 f303 	lsr.w	r3, r2, r3
 80035ea:	4a09      	ldr	r2, [pc, #36]	@ (8003610 <HAL_RCC_ClockConfig+0x1c4>)
 80035ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80035ee:	4b09      	ldr	r3, [pc, #36]	@ (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fe fcda 	bl	8001fac <HAL_InitTick>

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	40023c00 	.word	0x40023c00
 8003608:	40023800 	.word	0x40023800
 800360c:	08006900 	.word	0x08006900
 8003610:	20000000 	.word	0x20000000
 8003614:	20000004 	.word	0x20000004

08003618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800361c:	b094      	sub	sp, #80	@ 0x50
 800361e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003624:	2300      	movs	r3, #0
 8003626:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003630:	4b79      	ldr	r3, [pc, #484]	@ (8003818 <HAL_RCC_GetSysClockFreq+0x200>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f003 030c 	and.w	r3, r3, #12
 8003638:	2b08      	cmp	r3, #8
 800363a:	d00d      	beq.n	8003658 <HAL_RCC_GetSysClockFreq+0x40>
 800363c:	2b08      	cmp	r3, #8
 800363e:	f200 80e1 	bhi.w	8003804 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003642:	2b00      	cmp	r3, #0
 8003644:	d002      	beq.n	800364c <HAL_RCC_GetSysClockFreq+0x34>
 8003646:	2b04      	cmp	r3, #4
 8003648:	d003      	beq.n	8003652 <HAL_RCC_GetSysClockFreq+0x3a>
 800364a:	e0db      	b.n	8003804 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800364c:	4b73      	ldr	r3, [pc, #460]	@ (800381c <HAL_RCC_GetSysClockFreq+0x204>)
 800364e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003650:	e0db      	b.n	800380a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003652:	4b73      	ldr	r3, [pc, #460]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x208>)
 8003654:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003656:	e0d8      	b.n	800380a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003658:	4b6f      	ldr	r3, [pc, #444]	@ (8003818 <HAL_RCC_GetSysClockFreq+0x200>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003660:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003662:	4b6d      	ldr	r3, [pc, #436]	@ (8003818 <HAL_RCC_GetSysClockFreq+0x200>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d063      	beq.n	8003736 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800366e:	4b6a      	ldr	r3, [pc, #424]	@ (8003818 <HAL_RCC_GetSysClockFreq+0x200>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	099b      	lsrs	r3, r3, #6
 8003674:	2200      	movs	r2, #0
 8003676:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003678:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800367a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800367c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003680:	633b      	str	r3, [r7, #48]	@ 0x30
 8003682:	2300      	movs	r3, #0
 8003684:	637b      	str	r3, [r7, #52]	@ 0x34
 8003686:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800368a:	4622      	mov	r2, r4
 800368c:	462b      	mov	r3, r5
 800368e:	f04f 0000 	mov.w	r0, #0
 8003692:	f04f 0100 	mov.w	r1, #0
 8003696:	0159      	lsls	r1, r3, #5
 8003698:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800369c:	0150      	lsls	r0, r2, #5
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	4621      	mov	r1, r4
 80036a4:	1a51      	subs	r1, r2, r1
 80036a6:	6139      	str	r1, [r7, #16]
 80036a8:	4629      	mov	r1, r5
 80036aa:	eb63 0301 	sbc.w	r3, r3, r1
 80036ae:	617b      	str	r3, [r7, #20]
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	f04f 0300 	mov.w	r3, #0
 80036b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036bc:	4659      	mov	r1, fp
 80036be:	018b      	lsls	r3, r1, #6
 80036c0:	4651      	mov	r1, sl
 80036c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036c6:	4651      	mov	r1, sl
 80036c8:	018a      	lsls	r2, r1, #6
 80036ca:	4651      	mov	r1, sl
 80036cc:	ebb2 0801 	subs.w	r8, r2, r1
 80036d0:	4659      	mov	r1, fp
 80036d2:	eb63 0901 	sbc.w	r9, r3, r1
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036ea:	4690      	mov	r8, r2
 80036ec:	4699      	mov	r9, r3
 80036ee:	4623      	mov	r3, r4
 80036f0:	eb18 0303 	adds.w	r3, r8, r3
 80036f4:	60bb      	str	r3, [r7, #8]
 80036f6:	462b      	mov	r3, r5
 80036f8:	eb49 0303 	adc.w	r3, r9, r3
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800370a:	4629      	mov	r1, r5
 800370c:	024b      	lsls	r3, r1, #9
 800370e:	4621      	mov	r1, r4
 8003710:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003714:	4621      	mov	r1, r4
 8003716:	024a      	lsls	r2, r1, #9
 8003718:	4610      	mov	r0, r2
 800371a:	4619      	mov	r1, r3
 800371c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800371e:	2200      	movs	r2, #0
 8003720:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003722:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003724:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003728:	f7fc fdb2 	bl	8000290 <__aeabi_uldivmod>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	4613      	mov	r3, r2
 8003732:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003734:	e058      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003736:	4b38      	ldr	r3, [pc, #224]	@ (8003818 <HAL_RCC_GetSysClockFreq+0x200>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	099b      	lsrs	r3, r3, #6
 800373c:	2200      	movs	r2, #0
 800373e:	4618      	mov	r0, r3
 8003740:	4611      	mov	r1, r2
 8003742:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003746:	623b      	str	r3, [r7, #32]
 8003748:	2300      	movs	r3, #0
 800374a:	627b      	str	r3, [r7, #36]	@ 0x24
 800374c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003750:	4642      	mov	r2, r8
 8003752:	464b      	mov	r3, r9
 8003754:	f04f 0000 	mov.w	r0, #0
 8003758:	f04f 0100 	mov.w	r1, #0
 800375c:	0159      	lsls	r1, r3, #5
 800375e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003762:	0150      	lsls	r0, r2, #5
 8003764:	4602      	mov	r2, r0
 8003766:	460b      	mov	r3, r1
 8003768:	4641      	mov	r1, r8
 800376a:	ebb2 0a01 	subs.w	sl, r2, r1
 800376e:	4649      	mov	r1, r9
 8003770:	eb63 0b01 	sbc.w	fp, r3, r1
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003780:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003784:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003788:	ebb2 040a 	subs.w	r4, r2, sl
 800378c:	eb63 050b 	sbc.w	r5, r3, fp
 8003790:	f04f 0200 	mov.w	r2, #0
 8003794:	f04f 0300 	mov.w	r3, #0
 8003798:	00eb      	lsls	r3, r5, #3
 800379a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800379e:	00e2      	lsls	r2, r4, #3
 80037a0:	4614      	mov	r4, r2
 80037a2:	461d      	mov	r5, r3
 80037a4:	4643      	mov	r3, r8
 80037a6:	18e3      	adds	r3, r4, r3
 80037a8:	603b      	str	r3, [r7, #0]
 80037aa:	464b      	mov	r3, r9
 80037ac:	eb45 0303 	adc.w	r3, r5, r3
 80037b0:	607b      	str	r3, [r7, #4]
 80037b2:	f04f 0200 	mov.w	r2, #0
 80037b6:	f04f 0300 	mov.w	r3, #0
 80037ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037be:	4629      	mov	r1, r5
 80037c0:	028b      	lsls	r3, r1, #10
 80037c2:	4621      	mov	r1, r4
 80037c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037c8:	4621      	mov	r1, r4
 80037ca:	028a      	lsls	r2, r1, #10
 80037cc:	4610      	mov	r0, r2
 80037ce:	4619      	mov	r1, r3
 80037d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037d2:	2200      	movs	r2, #0
 80037d4:	61bb      	str	r3, [r7, #24]
 80037d6:	61fa      	str	r2, [r7, #28]
 80037d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037dc:	f7fc fd58 	bl	8000290 <__aeabi_uldivmod>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4613      	mov	r3, r2
 80037e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80037e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003818 <HAL_RCC_GetSysClockFreq+0x200>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	0c1b      	lsrs	r3, r3, #16
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	3301      	adds	r3, #1
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80037f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003800:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003802:	e002      	b.n	800380a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003804:	4b05      	ldr	r3, [pc, #20]	@ (800381c <HAL_RCC_GetSysClockFreq+0x204>)
 8003806:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003808:	bf00      	nop
    }
  }
  return sysclockfreq;
 800380a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800380c:	4618      	mov	r0, r3
 800380e:	3750      	adds	r7, #80	@ 0x50
 8003810:	46bd      	mov	sp, r7
 8003812:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003816:	bf00      	nop
 8003818:	40023800 	.word	0x40023800
 800381c:	00f42400 	.word	0x00f42400
 8003820:	007a1200 	.word	0x007a1200

08003824 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003828:	4b03      	ldr	r3, [pc, #12]	@ (8003838 <HAL_RCC_GetHCLKFreq+0x14>)
 800382a:	681b      	ldr	r3, [r3, #0]
}
 800382c:	4618      	mov	r0, r3
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	20000000 	.word	0x20000000

0800383c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003840:	f7ff fff0 	bl	8003824 <HAL_RCC_GetHCLKFreq>
 8003844:	4602      	mov	r2, r0
 8003846:	4b05      	ldr	r3, [pc, #20]	@ (800385c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	0a9b      	lsrs	r3, r3, #10
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	4903      	ldr	r1, [pc, #12]	@ (8003860 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003852:	5ccb      	ldrb	r3, [r1, r3]
 8003854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003858:	4618      	mov	r0, r3
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40023800 	.word	0x40023800
 8003860:	08006910 	.word	0x08006910

08003864 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003868:	f7ff ffdc 	bl	8003824 <HAL_RCC_GetHCLKFreq>
 800386c:	4602      	mov	r2, r0
 800386e:	4b05      	ldr	r3, [pc, #20]	@ (8003884 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	0b5b      	lsrs	r3, r3, #13
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	4903      	ldr	r1, [pc, #12]	@ (8003888 <HAL_RCC_GetPCLK2Freq+0x24>)
 800387a:	5ccb      	ldrb	r3, [r1, r3]
 800387c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003880:	4618      	mov	r0, r3
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40023800 	.word	0x40023800
 8003888:	08006910 	.word	0x08006910

0800388c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e041      	b.n	8003922 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d106      	bne.n	80038b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7fe f986 	bl	8001bc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2202      	movs	r2, #2
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3304      	adds	r3, #4
 80038c8:	4619      	mov	r1, r3
 80038ca:	4610      	mov	r0, r2
 80038cc:	f000 fb80 	bl	8003fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
	...

0800392c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b01      	cmp	r3, #1
 800393e:	d001      	beq.n	8003944 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e03c      	b.n	80039be <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2202      	movs	r2, #2
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a1e      	ldr	r2, [pc, #120]	@ (80039cc <HAL_TIM_Base_Start+0xa0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d018      	beq.n	8003988 <HAL_TIM_Base_Start+0x5c>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800395e:	d013      	beq.n	8003988 <HAL_TIM_Base_Start+0x5c>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a1a      	ldr	r2, [pc, #104]	@ (80039d0 <HAL_TIM_Base_Start+0xa4>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d00e      	beq.n	8003988 <HAL_TIM_Base_Start+0x5c>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a19      	ldr	r2, [pc, #100]	@ (80039d4 <HAL_TIM_Base_Start+0xa8>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d009      	beq.n	8003988 <HAL_TIM_Base_Start+0x5c>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a17      	ldr	r2, [pc, #92]	@ (80039d8 <HAL_TIM_Base_Start+0xac>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d004      	beq.n	8003988 <HAL_TIM_Base_Start+0x5c>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a16      	ldr	r2, [pc, #88]	@ (80039dc <HAL_TIM_Base_Start+0xb0>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d111      	bne.n	80039ac <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b06      	cmp	r3, #6
 8003998:	d010      	beq.n	80039bc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f042 0201 	orr.w	r2, r2, #1
 80039a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039aa:	e007      	b.n	80039bc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0201 	orr.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	40010000 	.word	0x40010000
 80039d0:	40000400 	.word	0x40000400
 80039d4:	40000800 	.word	0x40000800
 80039d8:	40000c00 	.word	0x40000c00
 80039dc:	40014000 	.word	0x40014000

080039e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e041      	b.n	8003a76 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d106      	bne.n	8003a0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f839 	bl	8003a7e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4610      	mov	r0, r2
 8003a20:	f000 fad6 	bl	8003fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
	...

08003a94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d109      	bne.n	8003ab8 <HAL_TIM_PWM_Start+0x24>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	bf14      	ite	ne
 8003ab0:	2301      	movne	r3, #1
 8003ab2:	2300      	moveq	r3, #0
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	e022      	b.n	8003afe <HAL_TIM_PWM_Start+0x6a>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	d109      	bne.n	8003ad2 <HAL_TIM_PWM_Start+0x3e>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	bf14      	ite	ne
 8003aca:	2301      	movne	r3, #1
 8003acc:	2300      	moveq	r3, #0
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	e015      	b.n	8003afe <HAL_TIM_PWM_Start+0x6a>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d109      	bne.n	8003aec <HAL_TIM_PWM_Start+0x58>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	bf14      	ite	ne
 8003ae4:	2301      	movne	r3, #1
 8003ae6:	2300      	moveq	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	e008      	b.n	8003afe <HAL_TIM_PWM_Start+0x6a>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	bf14      	ite	ne
 8003af8:	2301      	movne	r3, #1
 8003afa:	2300      	moveq	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e068      	b.n	8003bd8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d104      	bne.n	8003b16 <HAL_TIM_PWM_Start+0x82>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b14:	e013      	b.n	8003b3e <HAL_TIM_PWM_Start+0xaa>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	d104      	bne.n	8003b26 <HAL_TIM_PWM_Start+0x92>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2202      	movs	r2, #2
 8003b20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b24:	e00b      	b.n	8003b3e <HAL_TIM_PWM_Start+0xaa>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d104      	bne.n	8003b36 <HAL_TIM_PWM_Start+0xa2>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b34:	e003      	b.n	8003b3e <HAL_TIM_PWM_Start+0xaa>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2201      	movs	r2, #1
 8003b44:	6839      	ldr	r1, [r7, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 fcf4 	bl	8004534 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a23      	ldr	r2, [pc, #140]	@ (8003be0 <HAL_TIM_PWM_Start+0x14c>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d107      	bne.n	8003b66 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b64:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a1d      	ldr	r2, [pc, #116]	@ (8003be0 <HAL_TIM_PWM_Start+0x14c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d018      	beq.n	8003ba2 <HAL_TIM_PWM_Start+0x10e>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b78:	d013      	beq.n	8003ba2 <HAL_TIM_PWM_Start+0x10e>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a19      	ldr	r2, [pc, #100]	@ (8003be4 <HAL_TIM_PWM_Start+0x150>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00e      	beq.n	8003ba2 <HAL_TIM_PWM_Start+0x10e>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a17      	ldr	r2, [pc, #92]	@ (8003be8 <HAL_TIM_PWM_Start+0x154>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d009      	beq.n	8003ba2 <HAL_TIM_PWM_Start+0x10e>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a16      	ldr	r2, [pc, #88]	@ (8003bec <HAL_TIM_PWM_Start+0x158>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d004      	beq.n	8003ba2 <HAL_TIM_PWM_Start+0x10e>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a14      	ldr	r2, [pc, #80]	@ (8003bf0 <HAL_TIM_PWM_Start+0x15c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d111      	bne.n	8003bc6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2b06      	cmp	r3, #6
 8003bb2:	d010      	beq.n	8003bd6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0201 	orr.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc4:	e007      	b.n	8003bd6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f042 0201 	orr.w	r2, r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40010000 	.word	0x40010000
 8003be4:	40000400 	.word	0x40000400
 8003be8:	40000800 	.word	0x40000800
 8003bec:	40000c00 	.word	0x40000c00
 8003bf0:	40014000 	.word	0x40014000

08003bf4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2200      	movs	r2, #0
 8003c04:	6839      	ldr	r1, [r7, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fc94 	bl	8004534 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a29      	ldr	r2, [pc, #164]	@ (8003cb8 <HAL_TIM_PWM_Stop+0xc4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d117      	bne.n	8003c46 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6a1a      	ldr	r2, [r3, #32]
 8003c1c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003c20:	4013      	ands	r3, r2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10f      	bne.n	8003c46 <HAL_TIM_PWM_Stop+0x52>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6a1a      	ldr	r2, [r3, #32]
 8003c2c:	f240 4344 	movw	r3, #1092	@ 0x444
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d107      	bne.n	8003c46 <HAL_TIM_PWM_Stop+0x52>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c44:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6a1a      	ldr	r2, [r3, #32]
 8003c4c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003c50:	4013      	ands	r3, r2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10f      	bne.n	8003c76 <HAL_TIM_PWM_Stop+0x82>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6a1a      	ldr	r2, [r3, #32]
 8003c5c:	f240 4344 	movw	r3, #1092	@ 0x444
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d107      	bne.n	8003c76 <HAL_TIM_PWM_Stop+0x82>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0201 	bic.w	r2, r2, #1
 8003c74:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d104      	bne.n	8003c86 <HAL_TIM_PWM_Stop+0x92>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c84:	e013      	b.n	8003cae <HAL_TIM_PWM_Stop+0xba>
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d104      	bne.n	8003c96 <HAL_TIM_PWM_Stop+0xa2>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c94:	e00b      	b.n	8003cae <HAL_TIM_PWM_Stop+0xba>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d104      	bne.n	8003ca6 <HAL_TIM_PWM_Stop+0xb2>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ca4:	e003      	b.n	8003cae <HAL_TIM_PWM_Stop+0xba>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40010000 	.word	0x40010000

08003cbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d101      	bne.n	8003cda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	e0ae      	b.n	8003e38 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b0c      	cmp	r3, #12
 8003ce6:	f200 809f 	bhi.w	8003e28 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003cea:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf0:	08003d25 	.word	0x08003d25
 8003cf4:	08003e29 	.word	0x08003e29
 8003cf8:	08003e29 	.word	0x08003e29
 8003cfc:	08003e29 	.word	0x08003e29
 8003d00:	08003d65 	.word	0x08003d65
 8003d04:	08003e29 	.word	0x08003e29
 8003d08:	08003e29 	.word	0x08003e29
 8003d0c:	08003e29 	.word	0x08003e29
 8003d10:	08003da7 	.word	0x08003da7
 8003d14:	08003e29 	.word	0x08003e29
 8003d18:	08003e29 	.word	0x08003e29
 8003d1c:	08003e29 	.word	0x08003e29
 8003d20:	08003de7 	.word	0x08003de7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68b9      	ldr	r1, [r7, #8]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 f9dc 	bl	80040e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699a      	ldr	r2, [r3, #24]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0208 	orr.w	r2, r2, #8
 8003d3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699a      	ldr	r2, [r3, #24]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0204 	bic.w	r2, r2, #4
 8003d4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6999      	ldr	r1, [r3, #24]
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	691a      	ldr	r2, [r3, #16]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	619a      	str	r2, [r3, #24]
      break;
 8003d62:	e064      	b.n	8003e2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68b9      	ldr	r1, [r7, #8]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fa22 	bl	80041b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699a      	ldr	r2, [r3, #24]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	699a      	ldr	r2, [r3, #24]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6999      	ldr	r1, [r3, #24]
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	021a      	lsls	r2, r3, #8
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	619a      	str	r2, [r3, #24]
      break;
 8003da4:	e043      	b.n	8003e2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68b9      	ldr	r1, [r7, #8]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 fa6d 	bl	800428c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	69da      	ldr	r2, [r3, #28]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f042 0208 	orr.w	r2, r2, #8
 8003dc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69da      	ldr	r2, [r3, #28]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0204 	bic.w	r2, r2, #4
 8003dd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69d9      	ldr	r1, [r3, #28]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	691a      	ldr	r2, [r3, #16]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	61da      	str	r2, [r3, #28]
      break;
 8003de4:	e023      	b.n	8003e2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68b9      	ldr	r1, [r7, #8]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fab7 	bl	8004360 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	69da      	ldr	r2, [r3, #28]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	69da      	ldr	r2, [r3, #28]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	69d9      	ldr	r1, [r3, #28]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	021a      	lsls	r2, r3, #8
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	61da      	str	r2, [r3, #28]
      break;
 8003e26:	e002      	b.n	8003e2e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <HAL_TIM_ConfigClockSource+0x1c>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e0b4      	b.n	8003fc6 <HAL_TIM_ConfigClockSource+0x186>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003e7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e94:	d03e      	beq.n	8003f14 <HAL_TIM_ConfigClockSource+0xd4>
 8003e96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e9a:	f200 8087 	bhi.w	8003fac <HAL_TIM_ConfigClockSource+0x16c>
 8003e9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ea2:	f000 8086 	beq.w	8003fb2 <HAL_TIM_ConfigClockSource+0x172>
 8003ea6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eaa:	d87f      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x16c>
 8003eac:	2b70      	cmp	r3, #112	@ 0x70
 8003eae:	d01a      	beq.n	8003ee6 <HAL_TIM_ConfigClockSource+0xa6>
 8003eb0:	2b70      	cmp	r3, #112	@ 0x70
 8003eb2:	d87b      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x16c>
 8003eb4:	2b60      	cmp	r3, #96	@ 0x60
 8003eb6:	d050      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0x11a>
 8003eb8:	2b60      	cmp	r3, #96	@ 0x60
 8003eba:	d877      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x16c>
 8003ebc:	2b50      	cmp	r3, #80	@ 0x50
 8003ebe:	d03c      	beq.n	8003f3a <HAL_TIM_ConfigClockSource+0xfa>
 8003ec0:	2b50      	cmp	r3, #80	@ 0x50
 8003ec2:	d873      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x16c>
 8003ec4:	2b40      	cmp	r3, #64	@ 0x40
 8003ec6:	d058      	beq.n	8003f7a <HAL_TIM_ConfigClockSource+0x13a>
 8003ec8:	2b40      	cmp	r3, #64	@ 0x40
 8003eca:	d86f      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x16c>
 8003ecc:	2b30      	cmp	r3, #48	@ 0x30
 8003ece:	d064      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ed0:	2b30      	cmp	r3, #48	@ 0x30
 8003ed2:	d86b      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x16c>
 8003ed4:	2b20      	cmp	r3, #32
 8003ed6:	d060      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ed8:	2b20      	cmp	r3, #32
 8003eda:	d867      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x16c>
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d05c      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ee0:	2b10      	cmp	r3, #16
 8003ee2:	d05a      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ee4:	e062      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ef6:	f000 fafd 	bl	80044f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	609a      	str	r2, [r3, #8]
      break;
 8003f12:	e04f      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f24:	f000 fae6 	bl	80044f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689a      	ldr	r2, [r3, #8]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f36:	609a      	str	r2, [r3, #8]
      break;
 8003f38:	e03c      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f46:	461a      	mov	r2, r3
 8003f48:	f000 fa5a 	bl	8004400 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2150      	movs	r1, #80	@ 0x50
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fab3 	bl	80044be <TIM_ITRx_SetConfig>
      break;
 8003f58:	e02c      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f66:	461a      	mov	r2, r3
 8003f68:	f000 fa79 	bl	800445e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2160      	movs	r1, #96	@ 0x60
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 faa3 	bl	80044be <TIM_ITRx_SetConfig>
      break;
 8003f78:	e01c      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f86:	461a      	mov	r2, r3
 8003f88:	f000 fa3a 	bl	8004400 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2140      	movs	r1, #64	@ 0x40
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 fa93 	bl	80044be <TIM_ITRx_SetConfig>
      break;
 8003f98:	e00c      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	f000 fa8a 	bl	80044be <TIM_ITRx_SetConfig>
      break;
 8003faa:	e003      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	73fb      	strb	r3, [r7, #15]
      break;
 8003fb0:	e000      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a3a      	ldr	r2, [pc, #232]	@ (80040cc <TIM_Base_SetConfig+0xfc>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d00f      	beq.n	8004008 <TIM_Base_SetConfig+0x38>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fee:	d00b      	beq.n	8004008 <TIM_Base_SetConfig+0x38>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a37      	ldr	r2, [pc, #220]	@ (80040d0 <TIM_Base_SetConfig+0x100>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d007      	beq.n	8004008 <TIM_Base_SetConfig+0x38>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a36      	ldr	r2, [pc, #216]	@ (80040d4 <TIM_Base_SetConfig+0x104>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d003      	beq.n	8004008 <TIM_Base_SetConfig+0x38>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a35      	ldr	r2, [pc, #212]	@ (80040d8 <TIM_Base_SetConfig+0x108>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d108      	bne.n	800401a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800400e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	4313      	orrs	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a2b      	ldr	r2, [pc, #172]	@ (80040cc <TIM_Base_SetConfig+0xfc>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d01b      	beq.n	800405a <TIM_Base_SetConfig+0x8a>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004028:	d017      	beq.n	800405a <TIM_Base_SetConfig+0x8a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a28      	ldr	r2, [pc, #160]	@ (80040d0 <TIM_Base_SetConfig+0x100>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d013      	beq.n	800405a <TIM_Base_SetConfig+0x8a>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a27      	ldr	r2, [pc, #156]	@ (80040d4 <TIM_Base_SetConfig+0x104>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d00f      	beq.n	800405a <TIM_Base_SetConfig+0x8a>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a26      	ldr	r2, [pc, #152]	@ (80040d8 <TIM_Base_SetConfig+0x108>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d00b      	beq.n	800405a <TIM_Base_SetConfig+0x8a>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a25      	ldr	r2, [pc, #148]	@ (80040dc <TIM_Base_SetConfig+0x10c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d007      	beq.n	800405a <TIM_Base_SetConfig+0x8a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a24      	ldr	r2, [pc, #144]	@ (80040e0 <TIM_Base_SetConfig+0x110>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d003      	beq.n	800405a <TIM_Base_SetConfig+0x8a>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a23      	ldr	r2, [pc, #140]	@ (80040e4 <TIM_Base_SetConfig+0x114>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d108      	bne.n	800406c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004060:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	4313      	orrs	r3, r2
 800406a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a0e      	ldr	r2, [pc, #56]	@ (80040cc <TIM_Base_SetConfig+0xfc>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d103      	bne.n	80040a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d105      	bne.n	80040be <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f023 0201 	bic.w	r2, r3, #1
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	611a      	str	r2, [r3, #16]
  }
}
 80040be:	bf00      	nop
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40010000 	.word	0x40010000
 80040d0:	40000400 	.word	0x40000400
 80040d4:	40000800 	.word	0x40000800
 80040d8:	40000c00 	.word	0x40000c00
 80040dc:	40014000 	.word	0x40014000
 80040e0:	40014400 	.word	0x40014400
 80040e4:	40014800 	.word	0x40014800

080040e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	f023 0201 	bic.w	r2, r3, #1
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f023 0303 	bic.w	r3, r3, #3
 800411e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	4313      	orrs	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f023 0302 	bic.w	r3, r3, #2
 8004130:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	4313      	orrs	r3, r2
 800413a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a1c      	ldr	r2, [pc, #112]	@ (80041b0 <TIM_OC1_SetConfig+0xc8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d10c      	bne.n	800415e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f023 0308 	bic.w	r3, r3, #8
 800414a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	4313      	orrs	r3, r2
 8004154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f023 0304 	bic.w	r3, r3, #4
 800415c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a13      	ldr	r2, [pc, #76]	@ (80041b0 <TIM_OC1_SetConfig+0xc8>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d111      	bne.n	800418a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800416c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	4313      	orrs	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	621a      	str	r2, [r3, #32]
}
 80041a4:	bf00      	nop
 80041a6:	371c      	adds	r7, #28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	40010000 	.word	0x40010000

080041b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b087      	sub	sp, #28
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	f023 0210 	bic.w	r2, r3, #16
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	021b      	lsls	r3, r3, #8
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	f023 0320 	bic.w	r3, r3, #32
 80041fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	011b      	lsls	r3, r3, #4
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a1e      	ldr	r2, [pc, #120]	@ (8004288 <TIM_OC2_SetConfig+0xd4>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d10d      	bne.n	8004230 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800421a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	4313      	orrs	r3, r2
 8004226:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800422e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a15      	ldr	r2, [pc, #84]	@ (8004288 <TIM_OC2_SetConfig+0xd4>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d113      	bne.n	8004260 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800423e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004246:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	4313      	orrs	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	621a      	str	r2, [r3, #32]
}
 800427a:	bf00      	nop
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	40010000 	.word	0x40010000

0800428c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f023 0303 	bic.w	r3, r3, #3
 80042c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	021b      	lsls	r3, r3, #8
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	4313      	orrs	r3, r2
 80042e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a1d      	ldr	r2, [pc, #116]	@ (800435c <TIM_OC3_SetConfig+0xd0>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d10d      	bne.n	8004306 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	021b      	lsls	r3, r3, #8
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a14      	ldr	r2, [pc, #80]	@ (800435c <TIM_OC3_SetConfig+0xd0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d113      	bne.n	8004336 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800431c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	011b      	lsls	r3, r3, #4
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	4313      	orrs	r3, r2
 8004328:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	4313      	orrs	r3, r2
 8004334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	621a      	str	r2, [r3, #32]
}
 8004350:	bf00      	nop
 8004352:	371c      	adds	r7, #28
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	40010000 	.word	0x40010000

08004360 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004360:	b480      	push	{r7}
 8004362:	b087      	sub	sp, #28
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800438e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004396:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	021b      	lsls	r3, r3, #8
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	031b      	lsls	r3, r3, #12
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a10      	ldr	r2, [pc, #64]	@ (80043fc <TIM_OC4_SetConfig+0x9c>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d109      	bne.n	80043d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	019b      	lsls	r3, r3, #6
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	621a      	str	r2, [r3, #32]
}
 80043ee:	bf00      	nop
 80043f0:	371c      	adds	r7, #28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	40010000 	.word	0x40010000

08004400 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004400:	b480      	push	{r7}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	f023 0201 	bic.w	r2, r3, #1
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800442a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	011b      	lsls	r3, r3, #4
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f023 030a 	bic.w	r3, r3, #10
 800443c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	4313      	orrs	r3, r2
 8004444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	621a      	str	r2, [r3, #32]
}
 8004452:	bf00      	nop
 8004454:	371c      	adds	r7, #28
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800445e:	b480      	push	{r7}
 8004460:	b087      	sub	sp, #28
 8004462:	af00      	add	r7, sp, #0
 8004464:	60f8      	str	r0, [r7, #12]
 8004466:	60b9      	str	r1, [r7, #8]
 8004468:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	f023 0210 	bic.w	r2, r3, #16
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004488:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	031b      	lsls	r3, r3, #12
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	4313      	orrs	r3, r2
 8004492:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800449a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	621a      	str	r2, [r3, #32]
}
 80044b2:	bf00      	nop
 80044b4:	371c      	adds	r7, #28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044be:	b480      	push	{r7}
 80044c0:	b085      	sub	sp, #20
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
 80044c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4313      	orrs	r3, r2
 80044dc:	f043 0307 	orr.w	r3, r3, #7
 80044e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	609a      	str	r2, [r3, #8]
}
 80044e8:	bf00      	nop
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b087      	sub	sp, #28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
 8004500:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800450e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	021a      	lsls	r2, r3, #8
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	431a      	orrs	r2, r3
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4313      	orrs	r3, r2
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	4313      	orrs	r3, r2
 8004520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	609a      	str	r2, [r3, #8]
}
 8004528:	bf00      	nop
 800452a:	371c      	adds	r7, #28
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f003 031f 	and.w	r3, r3, #31
 8004546:	2201      	movs	r2, #1
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a1a      	ldr	r2, [r3, #32]
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	43db      	mvns	r3, r3
 8004556:	401a      	ands	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6a1a      	ldr	r2, [r3, #32]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f003 031f 	and.w	r3, r3, #31
 8004566:	6879      	ldr	r1, [r7, #4]
 8004568:	fa01 f303 	lsl.w	r3, r1, r3
 800456c:	431a      	orrs	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	621a      	str	r2, [r3, #32]
}
 8004572:	bf00      	nop
 8004574:	371c      	adds	r7, #28
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
	...

08004580 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004590:	2b01      	cmp	r3, #1
 8004592:	d101      	bne.n	8004598 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004594:	2302      	movs	r3, #2
 8004596:	e050      	b.n	800463a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004648 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d018      	beq.n	800460e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045e4:	d013      	beq.n	800460e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a18      	ldr	r2, [pc, #96]	@ (800464c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d00e      	beq.n	800460e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a16      	ldr	r2, [pc, #88]	@ (8004650 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d009      	beq.n	800460e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a15      	ldr	r2, [pc, #84]	@ (8004654 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d004      	beq.n	800460e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a13      	ldr	r2, [pc, #76]	@ (8004658 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d10c      	bne.n	8004628 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004614:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	4313      	orrs	r3, r2
 800461e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	40010000 	.word	0x40010000
 800464c:	40000400 	.word	0x40000400
 8004650:	40000800 	.word	0x40000800
 8004654:	40000c00 	.word	0x40000c00
 8004658:	40014000 	.word	0x40014000

0800465c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004666:	2300      	movs	r3, #0
 8004668:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004670:	2b01      	cmp	r3, #1
 8004672:	d101      	bne.n	8004678 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004674:	2302      	movs	r3, #2
 8004676:	e03d      	b.n	80046f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	4313      	orrs	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	4313      	orrs	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	4313      	orrs	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e042      	b.n	8004798 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d106      	bne.n	800472c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7fd fae6 	bl	8001cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2224      	movs	r2, #36	@ 0x24
 8004730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004742:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 fdff 	bl	8005348 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	691a      	ldr	r2, [r3, #16]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004758:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	695a      	ldr	r2, [r3, #20]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004768:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68da      	ldr	r2, [r3, #12]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004778:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2220      	movs	r2, #32
 8004784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2220      	movs	r2, #32
 800478c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3708      	adds	r7, #8
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b08a      	sub	sp, #40	@ 0x28
 80047a4:	af02      	add	r7, sp, #8
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	4613      	mov	r3, r2
 80047ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b20      	cmp	r3, #32
 80047be:	d175      	bne.n	80048ac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <HAL_UART_Transmit+0x2c>
 80047c6:	88fb      	ldrh	r3, [r7, #6]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e06e      	b.n	80048ae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2221      	movs	r2, #33	@ 0x21
 80047da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047de:	f7fd fc29 	bl	8002034 <HAL_GetTick>
 80047e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	88fa      	ldrh	r2, [r7, #6]
 80047e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	88fa      	ldrh	r2, [r7, #6]
 80047ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047f8:	d108      	bne.n	800480c <HAL_UART_Transmit+0x6c>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d104      	bne.n	800480c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004802:	2300      	movs	r3, #0
 8004804:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	61bb      	str	r3, [r7, #24]
 800480a:	e003      	b.n	8004814 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004810:	2300      	movs	r3, #0
 8004812:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004814:	e02e      	b.n	8004874 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2200      	movs	r2, #0
 800481e:	2180      	movs	r1, #128	@ 0x80
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 fb9b 	bl	8004f5c <UART_WaitOnFlagUntilTimeout>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d005      	beq.n	8004838 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2220      	movs	r2, #32
 8004830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e03a      	b.n	80048ae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10b      	bne.n	8004856 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	461a      	mov	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800484c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	3302      	adds	r3, #2
 8004852:	61bb      	str	r3, [r7, #24]
 8004854:	e007      	b.n	8004866 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	781a      	ldrb	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	3301      	adds	r3, #1
 8004864:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800486a:	b29b      	uxth	r3, r3
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004878:	b29b      	uxth	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1cb      	bne.n	8004816 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2200      	movs	r2, #0
 8004886:	2140      	movs	r1, #64	@ 0x40
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 fb67 	bl	8004f5c <UART_WaitOnFlagUntilTimeout>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d005      	beq.n	80048a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2220      	movs	r2, #32
 8004898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e006      	b.n	80048ae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2220      	movs	r2, #32
 80048a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80048a8:	2300      	movs	r3, #0
 80048aa:	e000      	b.n	80048ae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80048ac:	2302      	movs	r3, #2
  }
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3720      	adds	r7, #32
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b08a      	sub	sp, #40	@ 0x28
 80048ba:	af02      	add	r7, sp, #8
 80048bc:	60f8      	str	r0, [r7, #12]
 80048be:	60b9      	str	r1, [r7, #8]
 80048c0:	603b      	str	r3, [r7, #0]
 80048c2:	4613      	mov	r3, r2
 80048c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b20      	cmp	r3, #32
 80048d4:	f040 8081 	bne.w	80049da <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d002      	beq.n	80048e4 <HAL_UART_Receive+0x2e>
 80048de:	88fb      	ldrh	r3, [r7, #6]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e079      	b.n	80049dc <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2222      	movs	r2, #34	@ 0x22
 80048f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048fc:	f7fd fb9a 	bl	8002034 <HAL_GetTick>
 8004900:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	88fa      	ldrh	r2, [r7, #6]
 8004906:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	88fa      	ldrh	r2, [r7, #6]
 800490c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004916:	d108      	bne.n	800492a <HAL_UART_Receive+0x74>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d104      	bne.n	800492a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004920:	2300      	movs	r3, #0
 8004922:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	61bb      	str	r3, [r7, #24]
 8004928:	e003      	b.n	8004932 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800492e:	2300      	movs	r3, #0
 8004930:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004932:	e047      	b.n	80049c4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	2200      	movs	r2, #0
 800493c:	2120      	movs	r1, #32
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 fb0c 	bl	8004f5c <UART_WaitOnFlagUntilTimeout>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d005      	beq.n	8004956 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2220      	movs	r2, #32
 800494e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e042      	b.n	80049dc <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10c      	bne.n	8004976 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	b29b      	uxth	r3, r3
 8004964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004968:	b29a      	uxth	r2, r3
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	3302      	adds	r3, #2
 8004972:	61bb      	str	r3, [r7, #24]
 8004974:	e01f      	b.n	80049b6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800497e:	d007      	beq.n	8004990 <HAL_UART_Receive+0xda>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10a      	bne.n	800499e <HAL_UART_Receive+0xe8>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d106      	bne.n	800499e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	b2da      	uxtb	r2, r3
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	701a      	strb	r2, [r3, #0]
 800499c:	e008      	b.n	80049b0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	3301      	adds	r3, #1
 80049b4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1b2      	bne.n	8004934 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2220      	movs	r2, #32
 80049d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80049d6:	2300      	movs	r3, #0
 80049d8:	e000      	b.n	80049dc <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80049da:	2302      	movs	r3, #2
  }
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3720      	adds	r7, #32
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b0ba      	sub	sp, #232	@ 0xe8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004a22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10f      	bne.n	8004a4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a2e:	f003 0320 	and.w	r3, r3, #32
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d009      	beq.n	8004a4a <HAL_UART_IRQHandler+0x66>
 8004a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a3a:	f003 0320 	and.w	r3, r3, #32
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 fbc2 	bl	80051cc <UART_Receive_IT>
      return;
 8004a48:	e25b      	b.n	8004f02 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f000 80de 	beq.w	8004c10 <HAL_UART_IRQHandler+0x22c>
 8004a54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d106      	bne.n	8004a6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a64:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 80d1 	beq.w	8004c10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00b      	beq.n	8004a92 <HAL_UART_IRQHandler+0xae>
 8004a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d005      	beq.n	8004a92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a8a:	f043 0201 	orr.w	r2, r3, #1
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00b      	beq.n	8004ab6 <HAL_UART_IRQHandler+0xd2>
 8004a9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d005      	beq.n	8004ab6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aae:	f043 0202 	orr.w	r2, r3, #2
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00b      	beq.n	8004ada <HAL_UART_IRQHandler+0xf6>
 8004ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d005      	beq.n	8004ada <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ad2:	f043 0204 	orr.w	r2, r3, #4
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ade:	f003 0308 	and.w	r3, r3, #8
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d011      	beq.n	8004b0a <HAL_UART_IRQHandler+0x126>
 8004ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aea:	f003 0320 	and.w	r3, r3, #32
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d105      	bne.n	8004afe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d005      	beq.n	8004b0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b02:	f043 0208 	orr.w	r2, r3, #8
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 81f2 	beq.w	8004ef8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b18:	f003 0320 	and.w	r3, r3, #32
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d008      	beq.n	8004b32 <HAL_UART_IRQHandler+0x14e>
 8004b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b24:	f003 0320 	and.w	r3, r3, #32
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 fb4d 	bl	80051cc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b3c:	2b40      	cmp	r3, #64	@ 0x40
 8004b3e:	bf0c      	ite	eq
 8004b40:	2301      	moveq	r3, #1
 8004b42:	2300      	movne	r3, #0
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b4e:	f003 0308 	and.w	r3, r3, #8
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d103      	bne.n	8004b5e <HAL_UART_IRQHandler+0x17a>
 8004b56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d04f      	beq.n	8004bfe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fa55 	bl	800500e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b6e:	2b40      	cmp	r3, #64	@ 0x40
 8004b70:	d141      	bne.n	8004bf6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	3314      	adds	r3, #20
 8004b78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b80:	e853 3f00 	ldrex	r3, [r3]
 8004b84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004b88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	3314      	adds	r3, #20
 8004b9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004baa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004bae:	e841 2300 	strex	r3, r2, [r1]
 8004bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004bb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1d9      	bne.n	8004b72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d013      	beq.n	8004bee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bca:	4a7e      	ldr	r2, [pc, #504]	@ (8004dc4 <HAL_UART_IRQHandler+0x3e0>)
 8004bcc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7fd ffd1 	bl	8002b7a <HAL_DMA_Abort_IT>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d016      	beq.n	8004c0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004be2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004be8:	4610      	mov	r0, r2
 8004bea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bec:	e00e      	b.n	8004c0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f99e 	bl	8004f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf4:	e00a      	b.n	8004c0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f99a 	bl	8004f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bfc:	e006      	b.n	8004c0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f996 	bl	8004f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004c0a:	e175      	b.n	8004ef8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c0c:	bf00      	nop
    return;
 8004c0e:	e173      	b.n	8004ef8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	f040 814f 	bne.w	8004eb8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c1e:	f003 0310 	and.w	r3, r3, #16
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f000 8148 	beq.w	8004eb8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c2c:	f003 0310 	and.w	r3, r3, #16
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f000 8141 	beq.w	8004eb8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c36:	2300      	movs	r3, #0
 8004c38:	60bb      	str	r3, [r7, #8]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	60bb      	str	r3, [r7, #8]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	60bb      	str	r3, [r7, #8]
 8004c4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c56:	2b40      	cmp	r3, #64	@ 0x40
 8004c58:	f040 80b6 	bne.w	8004dc8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 8145 	beq.w	8004efc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	f080 813e 	bcs.w	8004efc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c86:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c92:	f000 8088 	beq.w	8004da6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	330c      	adds	r3, #12
 8004c9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ca4:	e853 3f00 	ldrex	r3, [r3]
 8004ca8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004cac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004cb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	330c      	adds	r3, #12
 8004cbe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004cc2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004cc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004cce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004cd2:	e841 2300 	strex	r3, r2, [r1]
 8004cd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004cda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1d9      	bne.n	8004c96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	3314      	adds	r3, #20
 8004ce8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cec:	e853 3f00 	ldrex	r3, [r3]
 8004cf0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004cf2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004cf4:	f023 0301 	bic.w	r3, r3, #1
 8004cf8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	3314      	adds	r3, #20
 8004d02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d06:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004d0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004d0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004d12:	e841 2300 	strex	r3, r2, [r1]
 8004d16:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004d18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1e1      	bne.n	8004ce2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	3314      	adds	r3, #20
 8004d24:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d28:	e853 3f00 	ldrex	r3, [r3]
 8004d2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004d2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3314      	adds	r3, #20
 8004d3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004d42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004d44:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d46:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004d48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004d4a:	e841 2300 	strex	r3, r2, [r1]
 8004d4e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004d50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1e3      	bne.n	8004d1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	330c      	adds	r3, #12
 8004d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d6e:	e853 3f00 	ldrex	r3, [r3]
 8004d72:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004d74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d76:	f023 0310 	bic.w	r3, r3, #16
 8004d7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	330c      	adds	r3, #12
 8004d84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004d88:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004d8a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d8e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d90:	e841 2300 	strex	r3, r2, [r1]
 8004d94:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1e3      	bne.n	8004d64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7fd fe7a 	bl	8002a9a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2202      	movs	r2, #2
 8004daa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	4619      	mov	r1, r3
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f8c1 	bl	8004f44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004dc2:	e09b      	b.n	8004efc <HAL_UART_IRQHandler+0x518>
 8004dc4:	080050d5 	.word	0x080050d5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 808e 	beq.w	8004f00 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004de4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 8089 	beq.w	8004f00 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	330c      	adds	r3, #12
 8004df4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df8:	e853 3f00 	ldrex	r3, [r3]
 8004dfc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	330c      	adds	r3, #12
 8004e0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004e12:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e1a:	e841 2300 	strex	r3, r2, [r1]
 8004e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1e3      	bne.n	8004dee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3314      	adds	r3, #20
 8004e2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e30:	e853 3f00 	ldrex	r3, [r3]
 8004e34:	623b      	str	r3, [r7, #32]
   return(result);
 8004e36:	6a3b      	ldr	r3, [r7, #32]
 8004e38:	f023 0301 	bic.w	r3, r3, #1
 8004e3c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3314      	adds	r3, #20
 8004e46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004e4a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e52:	e841 2300 	strex	r3, r2, [r1]
 8004e56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1e3      	bne.n	8004e26 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2220      	movs	r2, #32
 8004e62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	330c      	adds	r3, #12
 8004e72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	e853 3f00 	ldrex	r3, [r3]
 8004e7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f023 0310 	bic.w	r3, r3, #16
 8004e82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	330c      	adds	r3, #12
 8004e8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004e90:	61fa      	str	r2, [r7, #28]
 8004e92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e94:	69b9      	ldr	r1, [r7, #24]
 8004e96:	69fa      	ldr	r2, [r7, #28]
 8004e98:	e841 2300 	strex	r3, r2, [r1]
 8004e9c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1e3      	bne.n	8004e6c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004eaa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004eae:	4619      	mov	r1, r3
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f847 	bl	8004f44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004eb6:	e023      	b.n	8004f00 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d009      	beq.n	8004ed8 <HAL_UART_IRQHandler+0x4f4>
 8004ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d003      	beq.n	8004ed8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 f913 	bl	80050fc <UART_Transmit_IT>
    return;
 8004ed6:	e014      	b.n	8004f02 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00e      	beq.n	8004f02 <HAL_UART_IRQHandler+0x51e>
 8004ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d008      	beq.n	8004f02 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 f953 	bl	800519c <UART_EndTransmit_IT>
    return;
 8004ef6:	e004      	b.n	8004f02 <HAL_UART_IRQHandler+0x51e>
    return;
 8004ef8:	bf00      	nop
 8004efa:	e002      	b.n	8004f02 <HAL_UART_IRQHandler+0x51e>
      return;
 8004efc:	bf00      	nop
 8004efe:	e000      	b.n	8004f02 <HAL_UART_IRQHandler+0x51e>
      return;
 8004f00:	bf00      	nop
  }
}
 8004f02:	37e8      	adds	r7, #232	@ 0xe8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f10:	bf00      	nop
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	603b      	str	r3, [r7, #0]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f6c:	e03b      	b.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f6e:	6a3b      	ldr	r3, [r7, #32]
 8004f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f74:	d037      	beq.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f76:	f7fd f85d 	bl	8002034 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	6a3a      	ldr	r2, [r7, #32]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d302      	bcc.n	8004f8c <UART_WaitOnFlagUntilTimeout+0x30>
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e03a      	b.n	8005006 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	f003 0304 	and.w	r3, r3, #4
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d023      	beq.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2b80      	cmp	r3, #128	@ 0x80
 8004fa2:	d020      	beq.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2b40      	cmp	r3, #64	@ 0x40
 8004fa8:	d01d      	beq.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0308 	and.w	r3, r3, #8
 8004fb4:	2b08      	cmp	r3, #8
 8004fb6:	d116      	bne.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004fb8:	2300      	movs	r3, #0
 8004fba:	617b      	str	r3, [r7, #20]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	617b      	str	r3, [r7, #20]
 8004fcc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 f81d 	bl	800500e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2208      	movs	r2, #8
 8004fd8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e00f      	b.n	8005006 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	4013      	ands	r3, r2
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	bf0c      	ite	eq
 8004ff6:	2301      	moveq	r3, #1
 8004ff8:	2300      	movne	r3, #0
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	79fb      	ldrb	r3, [r7, #7]
 8005000:	429a      	cmp	r2, r3
 8005002:	d0b4      	beq.n	8004f6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3718      	adds	r7, #24
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800500e:	b480      	push	{r7}
 8005010:	b095      	sub	sp, #84	@ 0x54
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	330c      	adds	r3, #12
 800501c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005020:	e853 3f00 	ldrex	r3, [r3]
 8005024:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005028:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800502c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	330c      	adds	r3, #12
 8005034:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005036:	643a      	str	r2, [r7, #64]	@ 0x40
 8005038:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800503c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800503e:	e841 2300 	strex	r3, r2, [r1]
 8005042:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1e5      	bne.n	8005016 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	3314      	adds	r3, #20
 8005050:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005052:	6a3b      	ldr	r3, [r7, #32]
 8005054:	e853 3f00 	ldrex	r3, [r3]
 8005058:	61fb      	str	r3, [r7, #28]
   return(result);
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	f023 0301 	bic.w	r3, r3, #1
 8005060:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	3314      	adds	r3, #20
 8005068:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800506a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800506c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005070:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005072:	e841 2300 	strex	r3, r2, [r1]
 8005076:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1e5      	bne.n	800504a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005082:	2b01      	cmp	r3, #1
 8005084:	d119      	bne.n	80050ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	330c      	adds	r3, #12
 800508c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	e853 3f00 	ldrex	r3, [r3]
 8005094:	60bb      	str	r3, [r7, #8]
   return(result);
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	f023 0310 	bic.w	r3, r3, #16
 800509c:	647b      	str	r3, [r7, #68]	@ 0x44
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	330c      	adds	r3, #12
 80050a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050a6:	61ba      	str	r2, [r7, #24]
 80050a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050aa:	6979      	ldr	r1, [r7, #20]
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	e841 2300 	strex	r3, r2, [r1]
 80050b2:	613b      	str	r3, [r7, #16]
   return(result);
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1e5      	bne.n	8005086 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2220      	movs	r2, #32
 80050be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80050c8:	bf00      	nop
 80050ca:	3754      	adds	r7, #84	@ 0x54
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f7ff ff1e 	bl	8004f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050f4:	bf00      	nop
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b21      	cmp	r3, #33	@ 0x21
 800510e:	d13e      	bne.n	800518e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005118:	d114      	bne.n	8005144 <UART_Transmit_IT+0x48>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d110      	bne.n	8005144 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	881b      	ldrh	r3, [r3, #0]
 800512c:	461a      	mov	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005136:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	1c9a      	adds	r2, r3, #2
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	621a      	str	r2, [r3, #32]
 8005142:	e008      	b.n	8005156 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	1c59      	adds	r1, r3, #1
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6211      	str	r1, [r2, #32]
 800514e:	781a      	ldrb	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800515a:	b29b      	uxth	r3, r3
 800515c:	3b01      	subs	r3, #1
 800515e:	b29b      	uxth	r3, r3
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	4619      	mov	r1, r3
 8005164:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10f      	bne.n	800518a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68da      	ldr	r2, [r3, #12]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005178:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68da      	ldr	r2, [r3, #12]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005188:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800518a:	2300      	movs	r3, #0
 800518c:	e000      	b.n	8005190 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800518e:	2302      	movs	r3, #2
  }
}
 8005190:	4618      	mov	r0, r3
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68da      	ldr	r2, [r3, #12]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051b2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f7ff fea3 	bl	8004f08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b08c      	sub	sp, #48	@ 0x30
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b22      	cmp	r3, #34	@ 0x22
 80051de:	f040 80ae 	bne.w	800533e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051ea:	d117      	bne.n	800521c <UART_Receive_IT+0x50>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d113      	bne.n	800521c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80051f4:	2300      	movs	r3, #0
 80051f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	b29b      	uxth	r3, r3
 8005206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800520a:	b29a      	uxth	r2, r3
 800520c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800520e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005214:	1c9a      	adds	r2, r3, #2
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	629a      	str	r2, [r3, #40]	@ 0x28
 800521a:	e026      	b.n	800526a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005220:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005222:	2300      	movs	r3, #0
 8005224:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800522e:	d007      	beq.n	8005240 <UART_Receive_IT+0x74>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10a      	bne.n	800524e <UART_Receive_IT+0x82>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d106      	bne.n	800524e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	b2da      	uxtb	r2, r3
 8005248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800524a:	701a      	strb	r2, [r3, #0]
 800524c:	e008      	b.n	8005260 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	b2db      	uxtb	r3, r3
 8005256:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800525a:	b2da      	uxtb	r2, r3
 800525c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800525e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005264:	1c5a      	adds	r2, r3, #1
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800526e:	b29b      	uxth	r3, r3
 8005270:	3b01      	subs	r3, #1
 8005272:	b29b      	uxth	r3, r3
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	4619      	mov	r1, r3
 8005278:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800527a:	2b00      	cmp	r3, #0
 800527c:	d15d      	bne.n	800533a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68da      	ldr	r2, [r3, #12]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0220 	bic.w	r2, r2, #32
 800528c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800529c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	695a      	ldr	r2, [r3, #20]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 0201 	bic.w	r2, r2, #1
 80052ac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2220      	movs	r2, #32
 80052b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d135      	bne.n	8005330 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	330c      	adds	r3, #12
 80052d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	e853 3f00 	ldrex	r3, [r3]
 80052d8:	613b      	str	r3, [r7, #16]
   return(result);
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f023 0310 	bic.w	r3, r3, #16
 80052e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	330c      	adds	r3, #12
 80052e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052ea:	623a      	str	r2, [r7, #32]
 80052ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ee:	69f9      	ldr	r1, [r7, #28]
 80052f0:	6a3a      	ldr	r2, [r7, #32]
 80052f2:	e841 2300 	strex	r3, r2, [r1]
 80052f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1e5      	bne.n	80052ca <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0310 	and.w	r3, r3, #16
 8005308:	2b10      	cmp	r3, #16
 800530a:	d10a      	bne.n	8005322 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800530c:	2300      	movs	r3, #0
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005326:	4619      	mov	r1, r3
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f7ff fe0b 	bl	8004f44 <HAL_UARTEx_RxEventCallback>
 800532e:	e002      	b.n	8005336 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7ff fdf3 	bl	8004f1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005336:	2300      	movs	r3, #0
 8005338:	e002      	b.n	8005340 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800533a:	2300      	movs	r3, #0
 800533c:	e000      	b.n	8005340 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800533e:	2302      	movs	r3, #2
  }
}
 8005340:	4618      	mov	r0, r3
 8005342:	3730      	adds	r7, #48	@ 0x30
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800534c:	b0c0      	sub	sp, #256	@ 0x100
 800534e:	af00      	add	r7, sp, #0
 8005350:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005364:	68d9      	ldr	r1, [r3, #12]
 8005366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	ea40 0301 	orr.w	r3, r0, r1
 8005370:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005376:	689a      	ldr	r2, [r3, #8]
 8005378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	431a      	orrs	r2, r3
 8005380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	431a      	orrs	r2, r3
 8005388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	4313      	orrs	r3, r2
 8005390:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80053a0:	f021 010c 	bic.w	r1, r1, #12
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80053ae:	430b      	orrs	r3, r1
 80053b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80053be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c2:	6999      	ldr	r1, [r3, #24]
 80053c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	ea40 0301 	orr.w	r3, r0, r1
 80053ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	4b8f      	ldr	r3, [pc, #572]	@ (8005614 <UART_SetConfig+0x2cc>)
 80053d8:	429a      	cmp	r2, r3
 80053da:	d005      	beq.n	80053e8 <UART_SetConfig+0xa0>
 80053dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	4b8d      	ldr	r3, [pc, #564]	@ (8005618 <UART_SetConfig+0x2d0>)
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d104      	bne.n	80053f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053e8:	f7fe fa3c 	bl	8003864 <HAL_RCC_GetPCLK2Freq>
 80053ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80053f0:	e003      	b.n	80053fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053f2:	f7fe fa23 	bl	800383c <HAL_RCC_GetPCLK1Freq>
 80053f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005404:	f040 810c 	bne.w	8005620 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005408:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800540c:	2200      	movs	r2, #0
 800540e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005412:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005416:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800541a:	4622      	mov	r2, r4
 800541c:	462b      	mov	r3, r5
 800541e:	1891      	adds	r1, r2, r2
 8005420:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005422:	415b      	adcs	r3, r3
 8005424:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005426:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800542a:	4621      	mov	r1, r4
 800542c:	eb12 0801 	adds.w	r8, r2, r1
 8005430:	4629      	mov	r1, r5
 8005432:	eb43 0901 	adc.w	r9, r3, r1
 8005436:	f04f 0200 	mov.w	r2, #0
 800543a:	f04f 0300 	mov.w	r3, #0
 800543e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005442:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005446:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800544a:	4690      	mov	r8, r2
 800544c:	4699      	mov	r9, r3
 800544e:	4623      	mov	r3, r4
 8005450:	eb18 0303 	adds.w	r3, r8, r3
 8005454:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005458:	462b      	mov	r3, r5
 800545a:	eb49 0303 	adc.w	r3, r9, r3
 800545e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800546e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005472:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005476:	460b      	mov	r3, r1
 8005478:	18db      	adds	r3, r3, r3
 800547a:	653b      	str	r3, [r7, #80]	@ 0x50
 800547c:	4613      	mov	r3, r2
 800547e:	eb42 0303 	adc.w	r3, r2, r3
 8005482:	657b      	str	r3, [r7, #84]	@ 0x54
 8005484:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005488:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800548c:	f7fa ff00 	bl	8000290 <__aeabi_uldivmod>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	4b61      	ldr	r3, [pc, #388]	@ (800561c <UART_SetConfig+0x2d4>)
 8005496:	fba3 2302 	umull	r2, r3, r3, r2
 800549a:	095b      	lsrs	r3, r3, #5
 800549c:	011c      	lsls	r4, r3, #4
 800549e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80054ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80054b0:	4642      	mov	r2, r8
 80054b2:	464b      	mov	r3, r9
 80054b4:	1891      	adds	r1, r2, r2
 80054b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80054b8:	415b      	adcs	r3, r3
 80054ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80054c0:	4641      	mov	r1, r8
 80054c2:	eb12 0a01 	adds.w	sl, r2, r1
 80054c6:	4649      	mov	r1, r9
 80054c8:	eb43 0b01 	adc.w	fp, r3, r1
 80054cc:	f04f 0200 	mov.w	r2, #0
 80054d0:	f04f 0300 	mov.w	r3, #0
 80054d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054e0:	4692      	mov	sl, r2
 80054e2:	469b      	mov	fp, r3
 80054e4:	4643      	mov	r3, r8
 80054e6:	eb1a 0303 	adds.w	r3, sl, r3
 80054ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054ee:	464b      	mov	r3, r9
 80054f0:	eb4b 0303 	adc.w	r3, fp, r3
 80054f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80054f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005504:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005508:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800550c:	460b      	mov	r3, r1
 800550e:	18db      	adds	r3, r3, r3
 8005510:	643b      	str	r3, [r7, #64]	@ 0x40
 8005512:	4613      	mov	r3, r2
 8005514:	eb42 0303 	adc.w	r3, r2, r3
 8005518:	647b      	str	r3, [r7, #68]	@ 0x44
 800551a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800551e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005522:	f7fa feb5 	bl	8000290 <__aeabi_uldivmod>
 8005526:	4602      	mov	r2, r0
 8005528:	460b      	mov	r3, r1
 800552a:	4611      	mov	r1, r2
 800552c:	4b3b      	ldr	r3, [pc, #236]	@ (800561c <UART_SetConfig+0x2d4>)
 800552e:	fba3 2301 	umull	r2, r3, r3, r1
 8005532:	095b      	lsrs	r3, r3, #5
 8005534:	2264      	movs	r2, #100	@ 0x64
 8005536:	fb02 f303 	mul.w	r3, r2, r3
 800553a:	1acb      	subs	r3, r1, r3
 800553c:	00db      	lsls	r3, r3, #3
 800553e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005542:	4b36      	ldr	r3, [pc, #216]	@ (800561c <UART_SetConfig+0x2d4>)
 8005544:	fba3 2302 	umull	r2, r3, r3, r2
 8005548:	095b      	lsrs	r3, r3, #5
 800554a:	005b      	lsls	r3, r3, #1
 800554c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005550:	441c      	add	r4, r3
 8005552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005556:	2200      	movs	r2, #0
 8005558:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800555c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005560:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005564:	4642      	mov	r2, r8
 8005566:	464b      	mov	r3, r9
 8005568:	1891      	adds	r1, r2, r2
 800556a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800556c:	415b      	adcs	r3, r3
 800556e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005570:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005574:	4641      	mov	r1, r8
 8005576:	1851      	adds	r1, r2, r1
 8005578:	6339      	str	r1, [r7, #48]	@ 0x30
 800557a:	4649      	mov	r1, r9
 800557c:	414b      	adcs	r3, r1
 800557e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	f04f 0300 	mov.w	r3, #0
 8005588:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800558c:	4659      	mov	r1, fp
 800558e:	00cb      	lsls	r3, r1, #3
 8005590:	4651      	mov	r1, sl
 8005592:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005596:	4651      	mov	r1, sl
 8005598:	00ca      	lsls	r2, r1, #3
 800559a:	4610      	mov	r0, r2
 800559c:	4619      	mov	r1, r3
 800559e:	4603      	mov	r3, r0
 80055a0:	4642      	mov	r2, r8
 80055a2:	189b      	adds	r3, r3, r2
 80055a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055a8:	464b      	mov	r3, r9
 80055aa:	460a      	mov	r2, r1
 80055ac:	eb42 0303 	adc.w	r3, r2, r3
 80055b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80055c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80055c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80055c8:	460b      	mov	r3, r1
 80055ca:	18db      	adds	r3, r3, r3
 80055cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055ce:	4613      	mov	r3, r2
 80055d0:	eb42 0303 	adc.w	r3, r2, r3
 80055d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80055da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80055de:	f7fa fe57 	bl	8000290 <__aeabi_uldivmod>
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	4b0d      	ldr	r3, [pc, #52]	@ (800561c <UART_SetConfig+0x2d4>)
 80055e8:	fba3 1302 	umull	r1, r3, r3, r2
 80055ec:	095b      	lsrs	r3, r3, #5
 80055ee:	2164      	movs	r1, #100	@ 0x64
 80055f0:	fb01 f303 	mul.w	r3, r1, r3
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	00db      	lsls	r3, r3, #3
 80055f8:	3332      	adds	r3, #50	@ 0x32
 80055fa:	4a08      	ldr	r2, [pc, #32]	@ (800561c <UART_SetConfig+0x2d4>)
 80055fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005600:	095b      	lsrs	r3, r3, #5
 8005602:	f003 0207 	and.w	r2, r3, #7
 8005606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4422      	add	r2, r4
 800560e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005610:	e106      	b.n	8005820 <UART_SetConfig+0x4d8>
 8005612:	bf00      	nop
 8005614:	40011000 	.word	0x40011000
 8005618:	40011400 	.word	0x40011400
 800561c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005624:	2200      	movs	r2, #0
 8005626:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800562a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800562e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005632:	4642      	mov	r2, r8
 8005634:	464b      	mov	r3, r9
 8005636:	1891      	adds	r1, r2, r2
 8005638:	6239      	str	r1, [r7, #32]
 800563a:	415b      	adcs	r3, r3
 800563c:	627b      	str	r3, [r7, #36]	@ 0x24
 800563e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005642:	4641      	mov	r1, r8
 8005644:	1854      	adds	r4, r2, r1
 8005646:	4649      	mov	r1, r9
 8005648:	eb43 0501 	adc.w	r5, r3, r1
 800564c:	f04f 0200 	mov.w	r2, #0
 8005650:	f04f 0300 	mov.w	r3, #0
 8005654:	00eb      	lsls	r3, r5, #3
 8005656:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800565a:	00e2      	lsls	r2, r4, #3
 800565c:	4614      	mov	r4, r2
 800565e:	461d      	mov	r5, r3
 8005660:	4643      	mov	r3, r8
 8005662:	18e3      	adds	r3, r4, r3
 8005664:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005668:	464b      	mov	r3, r9
 800566a:	eb45 0303 	adc.w	r3, r5, r3
 800566e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800567e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005682:	f04f 0200 	mov.w	r2, #0
 8005686:	f04f 0300 	mov.w	r3, #0
 800568a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800568e:	4629      	mov	r1, r5
 8005690:	008b      	lsls	r3, r1, #2
 8005692:	4621      	mov	r1, r4
 8005694:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005698:	4621      	mov	r1, r4
 800569a:	008a      	lsls	r2, r1, #2
 800569c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80056a0:	f7fa fdf6 	bl	8000290 <__aeabi_uldivmod>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	4b60      	ldr	r3, [pc, #384]	@ (800582c <UART_SetConfig+0x4e4>)
 80056aa:	fba3 2302 	umull	r2, r3, r3, r2
 80056ae:	095b      	lsrs	r3, r3, #5
 80056b0:	011c      	lsls	r4, r3, #4
 80056b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056b6:	2200      	movs	r2, #0
 80056b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80056bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80056c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80056c4:	4642      	mov	r2, r8
 80056c6:	464b      	mov	r3, r9
 80056c8:	1891      	adds	r1, r2, r2
 80056ca:	61b9      	str	r1, [r7, #24]
 80056cc:	415b      	adcs	r3, r3
 80056ce:	61fb      	str	r3, [r7, #28]
 80056d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056d4:	4641      	mov	r1, r8
 80056d6:	1851      	adds	r1, r2, r1
 80056d8:	6139      	str	r1, [r7, #16]
 80056da:	4649      	mov	r1, r9
 80056dc:	414b      	adcs	r3, r1
 80056de:	617b      	str	r3, [r7, #20]
 80056e0:	f04f 0200 	mov.w	r2, #0
 80056e4:	f04f 0300 	mov.w	r3, #0
 80056e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056ec:	4659      	mov	r1, fp
 80056ee:	00cb      	lsls	r3, r1, #3
 80056f0:	4651      	mov	r1, sl
 80056f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056f6:	4651      	mov	r1, sl
 80056f8:	00ca      	lsls	r2, r1, #3
 80056fa:	4610      	mov	r0, r2
 80056fc:	4619      	mov	r1, r3
 80056fe:	4603      	mov	r3, r0
 8005700:	4642      	mov	r2, r8
 8005702:	189b      	adds	r3, r3, r2
 8005704:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005708:	464b      	mov	r3, r9
 800570a:	460a      	mov	r2, r1
 800570c:	eb42 0303 	adc.w	r3, r2, r3
 8005710:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800571e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005720:	f04f 0200 	mov.w	r2, #0
 8005724:	f04f 0300 	mov.w	r3, #0
 8005728:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800572c:	4649      	mov	r1, r9
 800572e:	008b      	lsls	r3, r1, #2
 8005730:	4641      	mov	r1, r8
 8005732:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005736:	4641      	mov	r1, r8
 8005738:	008a      	lsls	r2, r1, #2
 800573a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800573e:	f7fa fda7 	bl	8000290 <__aeabi_uldivmod>
 8005742:	4602      	mov	r2, r0
 8005744:	460b      	mov	r3, r1
 8005746:	4611      	mov	r1, r2
 8005748:	4b38      	ldr	r3, [pc, #224]	@ (800582c <UART_SetConfig+0x4e4>)
 800574a:	fba3 2301 	umull	r2, r3, r3, r1
 800574e:	095b      	lsrs	r3, r3, #5
 8005750:	2264      	movs	r2, #100	@ 0x64
 8005752:	fb02 f303 	mul.w	r3, r2, r3
 8005756:	1acb      	subs	r3, r1, r3
 8005758:	011b      	lsls	r3, r3, #4
 800575a:	3332      	adds	r3, #50	@ 0x32
 800575c:	4a33      	ldr	r2, [pc, #204]	@ (800582c <UART_SetConfig+0x4e4>)
 800575e:	fba2 2303 	umull	r2, r3, r2, r3
 8005762:	095b      	lsrs	r3, r3, #5
 8005764:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005768:	441c      	add	r4, r3
 800576a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800576e:	2200      	movs	r2, #0
 8005770:	673b      	str	r3, [r7, #112]	@ 0x70
 8005772:	677a      	str	r2, [r7, #116]	@ 0x74
 8005774:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005778:	4642      	mov	r2, r8
 800577a:	464b      	mov	r3, r9
 800577c:	1891      	adds	r1, r2, r2
 800577e:	60b9      	str	r1, [r7, #8]
 8005780:	415b      	adcs	r3, r3
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005788:	4641      	mov	r1, r8
 800578a:	1851      	adds	r1, r2, r1
 800578c:	6039      	str	r1, [r7, #0]
 800578e:	4649      	mov	r1, r9
 8005790:	414b      	adcs	r3, r1
 8005792:	607b      	str	r3, [r7, #4]
 8005794:	f04f 0200 	mov.w	r2, #0
 8005798:	f04f 0300 	mov.w	r3, #0
 800579c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057a0:	4659      	mov	r1, fp
 80057a2:	00cb      	lsls	r3, r1, #3
 80057a4:	4651      	mov	r1, sl
 80057a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057aa:	4651      	mov	r1, sl
 80057ac:	00ca      	lsls	r2, r1, #3
 80057ae:	4610      	mov	r0, r2
 80057b0:	4619      	mov	r1, r3
 80057b2:	4603      	mov	r3, r0
 80057b4:	4642      	mov	r2, r8
 80057b6:	189b      	adds	r3, r3, r2
 80057b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057ba:	464b      	mov	r3, r9
 80057bc:	460a      	mov	r2, r1
 80057be:	eb42 0303 	adc.w	r3, r2, r3
 80057c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80057c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80057ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80057d0:	f04f 0200 	mov.w	r2, #0
 80057d4:	f04f 0300 	mov.w	r3, #0
 80057d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80057dc:	4649      	mov	r1, r9
 80057de:	008b      	lsls	r3, r1, #2
 80057e0:	4641      	mov	r1, r8
 80057e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057e6:	4641      	mov	r1, r8
 80057e8:	008a      	lsls	r2, r1, #2
 80057ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80057ee:	f7fa fd4f 	bl	8000290 <__aeabi_uldivmod>
 80057f2:	4602      	mov	r2, r0
 80057f4:	460b      	mov	r3, r1
 80057f6:	4b0d      	ldr	r3, [pc, #52]	@ (800582c <UART_SetConfig+0x4e4>)
 80057f8:	fba3 1302 	umull	r1, r3, r3, r2
 80057fc:	095b      	lsrs	r3, r3, #5
 80057fe:	2164      	movs	r1, #100	@ 0x64
 8005800:	fb01 f303 	mul.w	r3, r1, r3
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	011b      	lsls	r3, r3, #4
 8005808:	3332      	adds	r3, #50	@ 0x32
 800580a:	4a08      	ldr	r2, [pc, #32]	@ (800582c <UART_SetConfig+0x4e4>)
 800580c:	fba2 2303 	umull	r2, r3, r2, r3
 8005810:	095b      	lsrs	r3, r3, #5
 8005812:	f003 020f 	and.w	r2, r3, #15
 8005816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4422      	add	r2, r4
 800581e:	609a      	str	r2, [r3, #8]
}
 8005820:	bf00      	nop
 8005822:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005826:	46bd      	mov	sp, r7
 8005828:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800582c:	51eb851f 	.word	0x51eb851f

08005830 <atoi>:
 8005830:	220a      	movs	r2, #10
 8005832:	2100      	movs	r1, #0
 8005834:	f000 b87a 	b.w	800592c <strtol>

08005838 <_strtol_l.constprop.0>:
 8005838:	2b24      	cmp	r3, #36	@ 0x24
 800583a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800583e:	4686      	mov	lr, r0
 8005840:	4690      	mov	r8, r2
 8005842:	d801      	bhi.n	8005848 <_strtol_l.constprop.0+0x10>
 8005844:	2b01      	cmp	r3, #1
 8005846:	d106      	bne.n	8005856 <_strtol_l.constprop.0+0x1e>
 8005848:	f000 f8a2 	bl	8005990 <__errno>
 800584c:	2316      	movs	r3, #22
 800584e:	6003      	str	r3, [r0, #0]
 8005850:	2000      	movs	r0, #0
 8005852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005856:	4834      	ldr	r0, [pc, #208]	@ (8005928 <_strtol_l.constprop.0+0xf0>)
 8005858:	460d      	mov	r5, r1
 800585a:	462a      	mov	r2, r5
 800585c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005860:	5d06      	ldrb	r6, [r0, r4]
 8005862:	f016 0608 	ands.w	r6, r6, #8
 8005866:	d1f8      	bne.n	800585a <_strtol_l.constprop.0+0x22>
 8005868:	2c2d      	cmp	r4, #45	@ 0x2d
 800586a:	d12d      	bne.n	80058c8 <_strtol_l.constprop.0+0x90>
 800586c:	782c      	ldrb	r4, [r5, #0]
 800586e:	2601      	movs	r6, #1
 8005870:	1c95      	adds	r5, r2, #2
 8005872:	f033 0210 	bics.w	r2, r3, #16
 8005876:	d109      	bne.n	800588c <_strtol_l.constprop.0+0x54>
 8005878:	2c30      	cmp	r4, #48	@ 0x30
 800587a:	d12a      	bne.n	80058d2 <_strtol_l.constprop.0+0x9a>
 800587c:	782a      	ldrb	r2, [r5, #0]
 800587e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005882:	2a58      	cmp	r2, #88	@ 0x58
 8005884:	d125      	bne.n	80058d2 <_strtol_l.constprop.0+0x9a>
 8005886:	786c      	ldrb	r4, [r5, #1]
 8005888:	2310      	movs	r3, #16
 800588a:	3502      	adds	r5, #2
 800588c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005890:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005894:	2200      	movs	r2, #0
 8005896:	fbbc f9f3 	udiv	r9, ip, r3
 800589a:	4610      	mov	r0, r2
 800589c:	fb03 ca19 	mls	sl, r3, r9, ip
 80058a0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80058a4:	2f09      	cmp	r7, #9
 80058a6:	d81b      	bhi.n	80058e0 <_strtol_l.constprop.0+0xa8>
 80058a8:	463c      	mov	r4, r7
 80058aa:	42a3      	cmp	r3, r4
 80058ac:	dd27      	ble.n	80058fe <_strtol_l.constprop.0+0xc6>
 80058ae:	1c57      	adds	r7, r2, #1
 80058b0:	d007      	beq.n	80058c2 <_strtol_l.constprop.0+0x8a>
 80058b2:	4581      	cmp	r9, r0
 80058b4:	d320      	bcc.n	80058f8 <_strtol_l.constprop.0+0xc0>
 80058b6:	d101      	bne.n	80058bc <_strtol_l.constprop.0+0x84>
 80058b8:	45a2      	cmp	sl, r4
 80058ba:	db1d      	blt.n	80058f8 <_strtol_l.constprop.0+0xc0>
 80058bc:	fb00 4003 	mla	r0, r0, r3, r4
 80058c0:	2201      	movs	r2, #1
 80058c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058c6:	e7eb      	b.n	80058a0 <_strtol_l.constprop.0+0x68>
 80058c8:	2c2b      	cmp	r4, #43	@ 0x2b
 80058ca:	bf04      	itt	eq
 80058cc:	782c      	ldrbeq	r4, [r5, #0]
 80058ce:	1c95      	addeq	r5, r2, #2
 80058d0:	e7cf      	b.n	8005872 <_strtol_l.constprop.0+0x3a>
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1da      	bne.n	800588c <_strtol_l.constprop.0+0x54>
 80058d6:	2c30      	cmp	r4, #48	@ 0x30
 80058d8:	bf0c      	ite	eq
 80058da:	2308      	moveq	r3, #8
 80058dc:	230a      	movne	r3, #10
 80058de:	e7d5      	b.n	800588c <_strtol_l.constprop.0+0x54>
 80058e0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80058e4:	2f19      	cmp	r7, #25
 80058e6:	d801      	bhi.n	80058ec <_strtol_l.constprop.0+0xb4>
 80058e8:	3c37      	subs	r4, #55	@ 0x37
 80058ea:	e7de      	b.n	80058aa <_strtol_l.constprop.0+0x72>
 80058ec:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80058f0:	2f19      	cmp	r7, #25
 80058f2:	d804      	bhi.n	80058fe <_strtol_l.constprop.0+0xc6>
 80058f4:	3c57      	subs	r4, #87	@ 0x57
 80058f6:	e7d8      	b.n	80058aa <_strtol_l.constprop.0+0x72>
 80058f8:	f04f 32ff 	mov.w	r2, #4294967295
 80058fc:	e7e1      	b.n	80058c2 <_strtol_l.constprop.0+0x8a>
 80058fe:	1c53      	adds	r3, r2, #1
 8005900:	d108      	bne.n	8005914 <_strtol_l.constprop.0+0xdc>
 8005902:	2322      	movs	r3, #34	@ 0x22
 8005904:	f8ce 3000 	str.w	r3, [lr]
 8005908:	4660      	mov	r0, ip
 800590a:	f1b8 0f00 	cmp.w	r8, #0
 800590e:	d0a0      	beq.n	8005852 <_strtol_l.constprop.0+0x1a>
 8005910:	1e69      	subs	r1, r5, #1
 8005912:	e006      	b.n	8005922 <_strtol_l.constprop.0+0xea>
 8005914:	b106      	cbz	r6, 8005918 <_strtol_l.constprop.0+0xe0>
 8005916:	4240      	negs	r0, r0
 8005918:	f1b8 0f00 	cmp.w	r8, #0
 800591c:	d099      	beq.n	8005852 <_strtol_l.constprop.0+0x1a>
 800591e:	2a00      	cmp	r2, #0
 8005920:	d1f6      	bne.n	8005910 <_strtol_l.constprop.0+0xd8>
 8005922:	f8c8 1000 	str.w	r1, [r8]
 8005926:	e794      	b.n	8005852 <_strtol_l.constprop.0+0x1a>
 8005928:	08006919 	.word	0x08006919

0800592c <strtol>:
 800592c:	4613      	mov	r3, r2
 800592e:	460a      	mov	r2, r1
 8005930:	4601      	mov	r1, r0
 8005932:	4802      	ldr	r0, [pc, #8]	@ (800593c <strtol+0x10>)
 8005934:	6800      	ldr	r0, [r0, #0]
 8005936:	f7ff bf7f 	b.w	8005838 <_strtol_l.constprop.0>
 800593a:	bf00      	nop
 800593c:	2000000c 	.word	0x2000000c

08005940 <siprintf>:
 8005940:	b40e      	push	{r1, r2, r3}
 8005942:	b500      	push	{lr}
 8005944:	b09c      	sub	sp, #112	@ 0x70
 8005946:	ab1d      	add	r3, sp, #116	@ 0x74
 8005948:	9002      	str	r0, [sp, #8]
 800594a:	9006      	str	r0, [sp, #24]
 800594c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005950:	4809      	ldr	r0, [pc, #36]	@ (8005978 <siprintf+0x38>)
 8005952:	9107      	str	r1, [sp, #28]
 8005954:	9104      	str	r1, [sp, #16]
 8005956:	4909      	ldr	r1, [pc, #36]	@ (800597c <siprintf+0x3c>)
 8005958:	f853 2b04 	ldr.w	r2, [r3], #4
 800595c:	9105      	str	r1, [sp, #20]
 800595e:	6800      	ldr	r0, [r0, #0]
 8005960:	9301      	str	r3, [sp, #4]
 8005962:	a902      	add	r1, sp, #8
 8005964:	f000 f994 	bl	8005c90 <_svfiprintf_r>
 8005968:	9b02      	ldr	r3, [sp, #8]
 800596a:	2200      	movs	r2, #0
 800596c:	701a      	strb	r2, [r3, #0]
 800596e:	b01c      	add	sp, #112	@ 0x70
 8005970:	f85d eb04 	ldr.w	lr, [sp], #4
 8005974:	b003      	add	sp, #12
 8005976:	4770      	bx	lr
 8005978:	2000000c 	.word	0x2000000c
 800597c:	ffff0208 	.word	0xffff0208

08005980 <memset>:
 8005980:	4402      	add	r2, r0
 8005982:	4603      	mov	r3, r0
 8005984:	4293      	cmp	r3, r2
 8005986:	d100      	bne.n	800598a <memset+0xa>
 8005988:	4770      	bx	lr
 800598a:	f803 1b01 	strb.w	r1, [r3], #1
 800598e:	e7f9      	b.n	8005984 <memset+0x4>

08005990 <__errno>:
 8005990:	4b01      	ldr	r3, [pc, #4]	@ (8005998 <__errno+0x8>)
 8005992:	6818      	ldr	r0, [r3, #0]
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	2000000c 	.word	0x2000000c

0800599c <__libc_init_array>:
 800599c:	b570      	push	{r4, r5, r6, lr}
 800599e:	4d0d      	ldr	r5, [pc, #52]	@ (80059d4 <__libc_init_array+0x38>)
 80059a0:	4c0d      	ldr	r4, [pc, #52]	@ (80059d8 <__libc_init_array+0x3c>)
 80059a2:	1b64      	subs	r4, r4, r5
 80059a4:	10a4      	asrs	r4, r4, #2
 80059a6:	2600      	movs	r6, #0
 80059a8:	42a6      	cmp	r6, r4
 80059aa:	d109      	bne.n	80059c0 <__libc_init_array+0x24>
 80059ac:	4d0b      	ldr	r5, [pc, #44]	@ (80059dc <__libc_init_array+0x40>)
 80059ae:	4c0c      	ldr	r4, [pc, #48]	@ (80059e0 <__libc_init_array+0x44>)
 80059b0:	f000 fc66 	bl	8006280 <_init>
 80059b4:	1b64      	subs	r4, r4, r5
 80059b6:	10a4      	asrs	r4, r4, #2
 80059b8:	2600      	movs	r6, #0
 80059ba:	42a6      	cmp	r6, r4
 80059bc:	d105      	bne.n	80059ca <__libc_init_array+0x2e>
 80059be:	bd70      	pop	{r4, r5, r6, pc}
 80059c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80059c4:	4798      	blx	r3
 80059c6:	3601      	adds	r6, #1
 80059c8:	e7ee      	b.n	80059a8 <__libc_init_array+0xc>
 80059ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ce:	4798      	blx	r3
 80059d0:	3601      	adds	r6, #1
 80059d2:	e7f2      	b.n	80059ba <__libc_init_array+0x1e>
 80059d4:	08006a54 	.word	0x08006a54
 80059d8:	08006a54 	.word	0x08006a54
 80059dc:	08006a54 	.word	0x08006a54
 80059e0:	08006a58 	.word	0x08006a58

080059e4 <__retarget_lock_acquire_recursive>:
 80059e4:	4770      	bx	lr

080059e6 <__retarget_lock_release_recursive>:
 80059e6:	4770      	bx	lr

080059e8 <_free_r>:
 80059e8:	b538      	push	{r3, r4, r5, lr}
 80059ea:	4605      	mov	r5, r0
 80059ec:	2900      	cmp	r1, #0
 80059ee:	d041      	beq.n	8005a74 <_free_r+0x8c>
 80059f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059f4:	1f0c      	subs	r4, r1, #4
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	bfb8      	it	lt
 80059fa:	18e4      	addlt	r4, r4, r3
 80059fc:	f000 f8e0 	bl	8005bc0 <__malloc_lock>
 8005a00:	4a1d      	ldr	r2, [pc, #116]	@ (8005a78 <_free_r+0x90>)
 8005a02:	6813      	ldr	r3, [r2, #0]
 8005a04:	b933      	cbnz	r3, 8005a14 <_free_r+0x2c>
 8005a06:	6063      	str	r3, [r4, #4]
 8005a08:	6014      	str	r4, [r2, #0]
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a10:	f000 b8dc 	b.w	8005bcc <__malloc_unlock>
 8005a14:	42a3      	cmp	r3, r4
 8005a16:	d908      	bls.n	8005a2a <_free_r+0x42>
 8005a18:	6820      	ldr	r0, [r4, #0]
 8005a1a:	1821      	adds	r1, r4, r0
 8005a1c:	428b      	cmp	r3, r1
 8005a1e:	bf01      	itttt	eq
 8005a20:	6819      	ldreq	r1, [r3, #0]
 8005a22:	685b      	ldreq	r3, [r3, #4]
 8005a24:	1809      	addeq	r1, r1, r0
 8005a26:	6021      	streq	r1, [r4, #0]
 8005a28:	e7ed      	b.n	8005a06 <_free_r+0x1e>
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	b10b      	cbz	r3, 8005a34 <_free_r+0x4c>
 8005a30:	42a3      	cmp	r3, r4
 8005a32:	d9fa      	bls.n	8005a2a <_free_r+0x42>
 8005a34:	6811      	ldr	r1, [r2, #0]
 8005a36:	1850      	adds	r0, r2, r1
 8005a38:	42a0      	cmp	r0, r4
 8005a3a:	d10b      	bne.n	8005a54 <_free_r+0x6c>
 8005a3c:	6820      	ldr	r0, [r4, #0]
 8005a3e:	4401      	add	r1, r0
 8005a40:	1850      	adds	r0, r2, r1
 8005a42:	4283      	cmp	r3, r0
 8005a44:	6011      	str	r1, [r2, #0]
 8005a46:	d1e0      	bne.n	8005a0a <_free_r+0x22>
 8005a48:	6818      	ldr	r0, [r3, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	6053      	str	r3, [r2, #4]
 8005a4e:	4408      	add	r0, r1
 8005a50:	6010      	str	r0, [r2, #0]
 8005a52:	e7da      	b.n	8005a0a <_free_r+0x22>
 8005a54:	d902      	bls.n	8005a5c <_free_r+0x74>
 8005a56:	230c      	movs	r3, #12
 8005a58:	602b      	str	r3, [r5, #0]
 8005a5a:	e7d6      	b.n	8005a0a <_free_r+0x22>
 8005a5c:	6820      	ldr	r0, [r4, #0]
 8005a5e:	1821      	adds	r1, r4, r0
 8005a60:	428b      	cmp	r3, r1
 8005a62:	bf04      	itt	eq
 8005a64:	6819      	ldreq	r1, [r3, #0]
 8005a66:	685b      	ldreq	r3, [r3, #4]
 8005a68:	6063      	str	r3, [r4, #4]
 8005a6a:	bf04      	itt	eq
 8005a6c:	1809      	addeq	r1, r1, r0
 8005a6e:	6021      	streq	r1, [r4, #0]
 8005a70:	6054      	str	r4, [r2, #4]
 8005a72:	e7ca      	b.n	8005a0a <_free_r+0x22>
 8005a74:	bd38      	pop	{r3, r4, r5, pc}
 8005a76:	bf00      	nop
 8005a78:	20000374 	.word	0x20000374

08005a7c <sbrk_aligned>:
 8005a7c:	b570      	push	{r4, r5, r6, lr}
 8005a7e:	4e0f      	ldr	r6, [pc, #60]	@ (8005abc <sbrk_aligned+0x40>)
 8005a80:	460c      	mov	r4, r1
 8005a82:	6831      	ldr	r1, [r6, #0]
 8005a84:	4605      	mov	r5, r0
 8005a86:	b911      	cbnz	r1, 8005a8e <sbrk_aligned+0x12>
 8005a88:	f000 fba6 	bl	80061d8 <_sbrk_r>
 8005a8c:	6030      	str	r0, [r6, #0]
 8005a8e:	4621      	mov	r1, r4
 8005a90:	4628      	mov	r0, r5
 8005a92:	f000 fba1 	bl	80061d8 <_sbrk_r>
 8005a96:	1c43      	adds	r3, r0, #1
 8005a98:	d103      	bne.n	8005aa2 <sbrk_aligned+0x26>
 8005a9a:	f04f 34ff 	mov.w	r4, #4294967295
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	bd70      	pop	{r4, r5, r6, pc}
 8005aa2:	1cc4      	adds	r4, r0, #3
 8005aa4:	f024 0403 	bic.w	r4, r4, #3
 8005aa8:	42a0      	cmp	r0, r4
 8005aaa:	d0f8      	beq.n	8005a9e <sbrk_aligned+0x22>
 8005aac:	1a21      	subs	r1, r4, r0
 8005aae:	4628      	mov	r0, r5
 8005ab0:	f000 fb92 	bl	80061d8 <_sbrk_r>
 8005ab4:	3001      	adds	r0, #1
 8005ab6:	d1f2      	bne.n	8005a9e <sbrk_aligned+0x22>
 8005ab8:	e7ef      	b.n	8005a9a <sbrk_aligned+0x1e>
 8005aba:	bf00      	nop
 8005abc:	20000370 	.word	0x20000370

08005ac0 <_malloc_r>:
 8005ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ac4:	1ccd      	adds	r5, r1, #3
 8005ac6:	f025 0503 	bic.w	r5, r5, #3
 8005aca:	3508      	adds	r5, #8
 8005acc:	2d0c      	cmp	r5, #12
 8005ace:	bf38      	it	cc
 8005ad0:	250c      	movcc	r5, #12
 8005ad2:	2d00      	cmp	r5, #0
 8005ad4:	4606      	mov	r6, r0
 8005ad6:	db01      	blt.n	8005adc <_malloc_r+0x1c>
 8005ad8:	42a9      	cmp	r1, r5
 8005ada:	d904      	bls.n	8005ae6 <_malloc_r+0x26>
 8005adc:	230c      	movs	r3, #12
 8005ade:	6033      	str	r3, [r6, #0]
 8005ae0:	2000      	movs	r0, #0
 8005ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ae6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005bbc <_malloc_r+0xfc>
 8005aea:	f000 f869 	bl	8005bc0 <__malloc_lock>
 8005aee:	f8d8 3000 	ldr.w	r3, [r8]
 8005af2:	461c      	mov	r4, r3
 8005af4:	bb44      	cbnz	r4, 8005b48 <_malloc_r+0x88>
 8005af6:	4629      	mov	r1, r5
 8005af8:	4630      	mov	r0, r6
 8005afa:	f7ff ffbf 	bl	8005a7c <sbrk_aligned>
 8005afe:	1c43      	adds	r3, r0, #1
 8005b00:	4604      	mov	r4, r0
 8005b02:	d158      	bne.n	8005bb6 <_malloc_r+0xf6>
 8005b04:	f8d8 4000 	ldr.w	r4, [r8]
 8005b08:	4627      	mov	r7, r4
 8005b0a:	2f00      	cmp	r7, #0
 8005b0c:	d143      	bne.n	8005b96 <_malloc_r+0xd6>
 8005b0e:	2c00      	cmp	r4, #0
 8005b10:	d04b      	beq.n	8005baa <_malloc_r+0xea>
 8005b12:	6823      	ldr	r3, [r4, #0]
 8005b14:	4639      	mov	r1, r7
 8005b16:	4630      	mov	r0, r6
 8005b18:	eb04 0903 	add.w	r9, r4, r3
 8005b1c:	f000 fb5c 	bl	80061d8 <_sbrk_r>
 8005b20:	4581      	cmp	r9, r0
 8005b22:	d142      	bne.n	8005baa <_malloc_r+0xea>
 8005b24:	6821      	ldr	r1, [r4, #0]
 8005b26:	1a6d      	subs	r5, r5, r1
 8005b28:	4629      	mov	r1, r5
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	f7ff ffa6 	bl	8005a7c <sbrk_aligned>
 8005b30:	3001      	adds	r0, #1
 8005b32:	d03a      	beq.n	8005baa <_malloc_r+0xea>
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	442b      	add	r3, r5
 8005b38:	6023      	str	r3, [r4, #0]
 8005b3a:	f8d8 3000 	ldr.w	r3, [r8]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	bb62      	cbnz	r2, 8005b9c <_malloc_r+0xdc>
 8005b42:	f8c8 7000 	str.w	r7, [r8]
 8005b46:	e00f      	b.n	8005b68 <_malloc_r+0xa8>
 8005b48:	6822      	ldr	r2, [r4, #0]
 8005b4a:	1b52      	subs	r2, r2, r5
 8005b4c:	d420      	bmi.n	8005b90 <_malloc_r+0xd0>
 8005b4e:	2a0b      	cmp	r2, #11
 8005b50:	d917      	bls.n	8005b82 <_malloc_r+0xc2>
 8005b52:	1961      	adds	r1, r4, r5
 8005b54:	42a3      	cmp	r3, r4
 8005b56:	6025      	str	r5, [r4, #0]
 8005b58:	bf18      	it	ne
 8005b5a:	6059      	strne	r1, [r3, #4]
 8005b5c:	6863      	ldr	r3, [r4, #4]
 8005b5e:	bf08      	it	eq
 8005b60:	f8c8 1000 	streq.w	r1, [r8]
 8005b64:	5162      	str	r2, [r4, r5]
 8005b66:	604b      	str	r3, [r1, #4]
 8005b68:	4630      	mov	r0, r6
 8005b6a:	f000 f82f 	bl	8005bcc <__malloc_unlock>
 8005b6e:	f104 000b 	add.w	r0, r4, #11
 8005b72:	1d23      	adds	r3, r4, #4
 8005b74:	f020 0007 	bic.w	r0, r0, #7
 8005b78:	1ac2      	subs	r2, r0, r3
 8005b7a:	bf1c      	itt	ne
 8005b7c:	1a1b      	subne	r3, r3, r0
 8005b7e:	50a3      	strne	r3, [r4, r2]
 8005b80:	e7af      	b.n	8005ae2 <_malloc_r+0x22>
 8005b82:	6862      	ldr	r2, [r4, #4]
 8005b84:	42a3      	cmp	r3, r4
 8005b86:	bf0c      	ite	eq
 8005b88:	f8c8 2000 	streq.w	r2, [r8]
 8005b8c:	605a      	strne	r2, [r3, #4]
 8005b8e:	e7eb      	b.n	8005b68 <_malloc_r+0xa8>
 8005b90:	4623      	mov	r3, r4
 8005b92:	6864      	ldr	r4, [r4, #4]
 8005b94:	e7ae      	b.n	8005af4 <_malloc_r+0x34>
 8005b96:	463c      	mov	r4, r7
 8005b98:	687f      	ldr	r7, [r7, #4]
 8005b9a:	e7b6      	b.n	8005b0a <_malloc_r+0x4a>
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	42a3      	cmp	r3, r4
 8005ba2:	d1fb      	bne.n	8005b9c <_malloc_r+0xdc>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	6053      	str	r3, [r2, #4]
 8005ba8:	e7de      	b.n	8005b68 <_malloc_r+0xa8>
 8005baa:	230c      	movs	r3, #12
 8005bac:	6033      	str	r3, [r6, #0]
 8005bae:	4630      	mov	r0, r6
 8005bb0:	f000 f80c 	bl	8005bcc <__malloc_unlock>
 8005bb4:	e794      	b.n	8005ae0 <_malloc_r+0x20>
 8005bb6:	6005      	str	r5, [r0, #0]
 8005bb8:	e7d6      	b.n	8005b68 <_malloc_r+0xa8>
 8005bba:	bf00      	nop
 8005bbc:	20000374 	.word	0x20000374

08005bc0 <__malloc_lock>:
 8005bc0:	4801      	ldr	r0, [pc, #4]	@ (8005bc8 <__malloc_lock+0x8>)
 8005bc2:	f7ff bf0f 	b.w	80059e4 <__retarget_lock_acquire_recursive>
 8005bc6:	bf00      	nop
 8005bc8:	2000036c 	.word	0x2000036c

08005bcc <__malloc_unlock>:
 8005bcc:	4801      	ldr	r0, [pc, #4]	@ (8005bd4 <__malloc_unlock+0x8>)
 8005bce:	f7ff bf0a 	b.w	80059e6 <__retarget_lock_release_recursive>
 8005bd2:	bf00      	nop
 8005bd4:	2000036c 	.word	0x2000036c

08005bd8 <__ssputs_r>:
 8005bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bdc:	688e      	ldr	r6, [r1, #8]
 8005bde:	461f      	mov	r7, r3
 8005be0:	42be      	cmp	r6, r7
 8005be2:	680b      	ldr	r3, [r1, #0]
 8005be4:	4682      	mov	sl, r0
 8005be6:	460c      	mov	r4, r1
 8005be8:	4690      	mov	r8, r2
 8005bea:	d82d      	bhi.n	8005c48 <__ssputs_r+0x70>
 8005bec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005bf0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005bf4:	d026      	beq.n	8005c44 <__ssputs_r+0x6c>
 8005bf6:	6965      	ldr	r5, [r4, #20]
 8005bf8:	6909      	ldr	r1, [r1, #16]
 8005bfa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005bfe:	eba3 0901 	sub.w	r9, r3, r1
 8005c02:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c06:	1c7b      	adds	r3, r7, #1
 8005c08:	444b      	add	r3, r9
 8005c0a:	106d      	asrs	r5, r5, #1
 8005c0c:	429d      	cmp	r5, r3
 8005c0e:	bf38      	it	cc
 8005c10:	461d      	movcc	r5, r3
 8005c12:	0553      	lsls	r3, r2, #21
 8005c14:	d527      	bpl.n	8005c66 <__ssputs_r+0x8e>
 8005c16:	4629      	mov	r1, r5
 8005c18:	f7ff ff52 	bl	8005ac0 <_malloc_r>
 8005c1c:	4606      	mov	r6, r0
 8005c1e:	b360      	cbz	r0, 8005c7a <__ssputs_r+0xa2>
 8005c20:	6921      	ldr	r1, [r4, #16]
 8005c22:	464a      	mov	r2, r9
 8005c24:	f000 fae8 	bl	80061f8 <memcpy>
 8005c28:	89a3      	ldrh	r3, [r4, #12]
 8005c2a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005c2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c32:	81a3      	strh	r3, [r4, #12]
 8005c34:	6126      	str	r6, [r4, #16]
 8005c36:	6165      	str	r5, [r4, #20]
 8005c38:	444e      	add	r6, r9
 8005c3a:	eba5 0509 	sub.w	r5, r5, r9
 8005c3e:	6026      	str	r6, [r4, #0]
 8005c40:	60a5      	str	r5, [r4, #8]
 8005c42:	463e      	mov	r6, r7
 8005c44:	42be      	cmp	r6, r7
 8005c46:	d900      	bls.n	8005c4a <__ssputs_r+0x72>
 8005c48:	463e      	mov	r6, r7
 8005c4a:	6820      	ldr	r0, [r4, #0]
 8005c4c:	4632      	mov	r2, r6
 8005c4e:	4641      	mov	r1, r8
 8005c50:	f000 faa8 	bl	80061a4 <memmove>
 8005c54:	68a3      	ldr	r3, [r4, #8]
 8005c56:	1b9b      	subs	r3, r3, r6
 8005c58:	60a3      	str	r3, [r4, #8]
 8005c5a:	6823      	ldr	r3, [r4, #0]
 8005c5c:	4433      	add	r3, r6
 8005c5e:	6023      	str	r3, [r4, #0]
 8005c60:	2000      	movs	r0, #0
 8005c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c66:	462a      	mov	r2, r5
 8005c68:	f000 fad4 	bl	8006214 <_realloc_r>
 8005c6c:	4606      	mov	r6, r0
 8005c6e:	2800      	cmp	r0, #0
 8005c70:	d1e0      	bne.n	8005c34 <__ssputs_r+0x5c>
 8005c72:	6921      	ldr	r1, [r4, #16]
 8005c74:	4650      	mov	r0, sl
 8005c76:	f7ff feb7 	bl	80059e8 <_free_r>
 8005c7a:	230c      	movs	r3, #12
 8005c7c:	f8ca 3000 	str.w	r3, [sl]
 8005c80:	89a3      	ldrh	r3, [r4, #12]
 8005c82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c86:	81a3      	strh	r3, [r4, #12]
 8005c88:	f04f 30ff 	mov.w	r0, #4294967295
 8005c8c:	e7e9      	b.n	8005c62 <__ssputs_r+0x8a>
	...

08005c90 <_svfiprintf_r>:
 8005c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c94:	4698      	mov	r8, r3
 8005c96:	898b      	ldrh	r3, [r1, #12]
 8005c98:	061b      	lsls	r3, r3, #24
 8005c9a:	b09d      	sub	sp, #116	@ 0x74
 8005c9c:	4607      	mov	r7, r0
 8005c9e:	460d      	mov	r5, r1
 8005ca0:	4614      	mov	r4, r2
 8005ca2:	d510      	bpl.n	8005cc6 <_svfiprintf_r+0x36>
 8005ca4:	690b      	ldr	r3, [r1, #16]
 8005ca6:	b973      	cbnz	r3, 8005cc6 <_svfiprintf_r+0x36>
 8005ca8:	2140      	movs	r1, #64	@ 0x40
 8005caa:	f7ff ff09 	bl	8005ac0 <_malloc_r>
 8005cae:	6028      	str	r0, [r5, #0]
 8005cb0:	6128      	str	r0, [r5, #16]
 8005cb2:	b930      	cbnz	r0, 8005cc2 <_svfiprintf_r+0x32>
 8005cb4:	230c      	movs	r3, #12
 8005cb6:	603b      	str	r3, [r7, #0]
 8005cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cbc:	b01d      	add	sp, #116	@ 0x74
 8005cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc2:	2340      	movs	r3, #64	@ 0x40
 8005cc4:	616b      	str	r3, [r5, #20]
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cca:	2320      	movs	r3, #32
 8005ccc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005cd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cd4:	2330      	movs	r3, #48	@ 0x30
 8005cd6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005e74 <_svfiprintf_r+0x1e4>
 8005cda:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005cde:	f04f 0901 	mov.w	r9, #1
 8005ce2:	4623      	mov	r3, r4
 8005ce4:	469a      	mov	sl, r3
 8005ce6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cea:	b10a      	cbz	r2, 8005cf0 <_svfiprintf_r+0x60>
 8005cec:	2a25      	cmp	r2, #37	@ 0x25
 8005cee:	d1f9      	bne.n	8005ce4 <_svfiprintf_r+0x54>
 8005cf0:	ebba 0b04 	subs.w	fp, sl, r4
 8005cf4:	d00b      	beq.n	8005d0e <_svfiprintf_r+0x7e>
 8005cf6:	465b      	mov	r3, fp
 8005cf8:	4622      	mov	r2, r4
 8005cfa:	4629      	mov	r1, r5
 8005cfc:	4638      	mov	r0, r7
 8005cfe:	f7ff ff6b 	bl	8005bd8 <__ssputs_r>
 8005d02:	3001      	adds	r0, #1
 8005d04:	f000 80a7 	beq.w	8005e56 <_svfiprintf_r+0x1c6>
 8005d08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d0a:	445a      	add	r2, fp
 8005d0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d0e:	f89a 3000 	ldrb.w	r3, [sl]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f000 809f 	beq.w	8005e56 <_svfiprintf_r+0x1c6>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d22:	f10a 0a01 	add.w	sl, sl, #1
 8005d26:	9304      	str	r3, [sp, #16]
 8005d28:	9307      	str	r3, [sp, #28]
 8005d2a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d2e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d30:	4654      	mov	r4, sl
 8005d32:	2205      	movs	r2, #5
 8005d34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d38:	484e      	ldr	r0, [pc, #312]	@ (8005e74 <_svfiprintf_r+0x1e4>)
 8005d3a:	f7fa fa59 	bl	80001f0 <memchr>
 8005d3e:	9a04      	ldr	r2, [sp, #16]
 8005d40:	b9d8      	cbnz	r0, 8005d7a <_svfiprintf_r+0xea>
 8005d42:	06d0      	lsls	r0, r2, #27
 8005d44:	bf44      	itt	mi
 8005d46:	2320      	movmi	r3, #32
 8005d48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d4c:	0711      	lsls	r1, r2, #28
 8005d4e:	bf44      	itt	mi
 8005d50:	232b      	movmi	r3, #43	@ 0x2b
 8005d52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d56:	f89a 3000 	ldrb.w	r3, [sl]
 8005d5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d5c:	d015      	beq.n	8005d8a <_svfiprintf_r+0xfa>
 8005d5e:	9a07      	ldr	r2, [sp, #28]
 8005d60:	4654      	mov	r4, sl
 8005d62:	2000      	movs	r0, #0
 8005d64:	f04f 0c0a 	mov.w	ip, #10
 8005d68:	4621      	mov	r1, r4
 8005d6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d6e:	3b30      	subs	r3, #48	@ 0x30
 8005d70:	2b09      	cmp	r3, #9
 8005d72:	d94b      	bls.n	8005e0c <_svfiprintf_r+0x17c>
 8005d74:	b1b0      	cbz	r0, 8005da4 <_svfiprintf_r+0x114>
 8005d76:	9207      	str	r2, [sp, #28]
 8005d78:	e014      	b.n	8005da4 <_svfiprintf_r+0x114>
 8005d7a:	eba0 0308 	sub.w	r3, r0, r8
 8005d7e:	fa09 f303 	lsl.w	r3, r9, r3
 8005d82:	4313      	orrs	r3, r2
 8005d84:	9304      	str	r3, [sp, #16]
 8005d86:	46a2      	mov	sl, r4
 8005d88:	e7d2      	b.n	8005d30 <_svfiprintf_r+0xa0>
 8005d8a:	9b03      	ldr	r3, [sp, #12]
 8005d8c:	1d19      	adds	r1, r3, #4
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	9103      	str	r1, [sp, #12]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	bfbb      	ittet	lt
 8005d96:	425b      	neglt	r3, r3
 8005d98:	f042 0202 	orrlt.w	r2, r2, #2
 8005d9c:	9307      	strge	r3, [sp, #28]
 8005d9e:	9307      	strlt	r3, [sp, #28]
 8005da0:	bfb8      	it	lt
 8005da2:	9204      	strlt	r2, [sp, #16]
 8005da4:	7823      	ldrb	r3, [r4, #0]
 8005da6:	2b2e      	cmp	r3, #46	@ 0x2e
 8005da8:	d10a      	bne.n	8005dc0 <_svfiprintf_r+0x130>
 8005daa:	7863      	ldrb	r3, [r4, #1]
 8005dac:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dae:	d132      	bne.n	8005e16 <_svfiprintf_r+0x186>
 8005db0:	9b03      	ldr	r3, [sp, #12]
 8005db2:	1d1a      	adds	r2, r3, #4
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	9203      	str	r2, [sp, #12]
 8005db8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005dbc:	3402      	adds	r4, #2
 8005dbe:	9305      	str	r3, [sp, #20]
 8005dc0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005e84 <_svfiprintf_r+0x1f4>
 8005dc4:	7821      	ldrb	r1, [r4, #0]
 8005dc6:	2203      	movs	r2, #3
 8005dc8:	4650      	mov	r0, sl
 8005dca:	f7fa fa11 	bl	80001f0 <memchr>
 8005dce:	b138      	cbz	r0, 8005de0 <_svfiprintf_r+0x150>
 8005dd0:	9b04      	ldr	r3, [sp, #16]
 8005dd2:	eba0 000a 	sub.w	r0, r0, sl
 8005dd6:	2240      	movs	r2, #64	@ 0x40
 8005dd8:	4082      	lsls	r2, r0
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	3401      	adds	r4, #1
 8005dde:	9304      	str	r3, [sp, #16]
 8005de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005de4:	4824      	ldr	r0, [pc, #144]	@ (8005e78 <_svfiprintf_r+0x1e8>)
 8005de6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005dea:	2206      	movs	r2, #6
 8005dec:	f7fa fa00 	bl	80001f0 <memchr>
 8005df0:	2800      	cmp	r0, #0
 8005df2:	d036      	beq.n	8005e62 <_svfiprintf_r+0x1d2>
 8005df4:	4b21      	ldr	r3, [pc, #132]	@ (8005e7c <_svfiprintf_r+0x1ec>)
 8005df6:	bb1b      	cbnz	r3, 8005e40 <_svfiprintf_r+0x1b0>
 8005df8:	9b03      	ldr	r3, [sp, #12]
 8005dfa:	3307      	adds	r3, #7
 8005dfc:	f023 0307 	bic.w	r3, r3, #7
 8005e00:	3308      	adds	r3, #8
 8005e02:	9303      	str	r3, [sp, #12]
 8005e04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e06:	4433      	add	r3, r6
 8005e08:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e0a:	e76a      	b.n	8005ce2 <_svfiprintf_r+0x52>
 8005e0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e10:	460c      	mov	r4, r1
 8005e12:	2001      	movs	r0, #1
 8005e14:	e7a8      	b.n	8005d68 <_svfiprintf_r+0xd8>
 8005e16:	2300      	movs	r3, #0
 8005e18:	3401      	adds	r4, #1
 8005e1a:	9305      	str	r3, [sp, #20]
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	f04f 0c0a 	mov.w	ip, #10
 8005e22:	4620      	mov	r0, r4
 8005e24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e28:	3a30      	subs	r2, #48	@ 0x30
 8005e2a:	2a09      	cmp	r2, #9
 8005e2c:	d903      	bls.n	8005e36 <_svfiprintf_r+0x1a6>
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d0c6      	beq.n	8005dc0 <_svfiprintf_r+0x130>
 8005e32:	9105      	str	r1, [sp, #20]
 8005e34:	e7c4      	b.n	8005dc0 <_svfiprintf_r+0x130>
 8005e36:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e3a:	4604      	mov	r4, r0
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e7f0      	b.n	8005e22 <_svfiprintf_r+0x192>
 8005e40:	ab03      	add	r3, sp, #12
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	462a      	mov	r2, r5
 8005e46:	4b0e      	ldr	r3, [pc, #56]	@ (8005e80 <_svfiprintf_r+0x1f0>)
 8005e48:	a904      	add	r1, sp, #16
 8005e4a:	4638      	mov	r0, r7
 8005e4c:	f3af 8000 	nop.w
 8005e50:	1c42      	adds	r2, r0, #1
 8005e52:	4606      	mov	r6, r0
 8005e54:	d1d6      	bne.n	8005e04 <_svfiprintf_r+0x174>
 8005e56:	89ab      	ldrh	r3, [r5, #12]
 8005e58:	065b      	lsls	r3, r3, #25
 8005e5a:	f53f af2d 	bmi.w	8005cb8 <_svfiprintf_r+0x28>
 8005e5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e60:	e72c      	b.n	8005cbc <_svfiprintf_r+0x2c>
 8005e62:	ab03      	add	r3, sp, #12
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	462a      	mov	r2, r5
 8005e68:	4b05      	ldr	r3, [pc, #20]	@ (8005e80 <_svfiprintf_r+0x1f0>)
 8005e6a:	a904      	add	r1, sp, #16
 8005e6c:	4638      	mov	r0, r7
 8005e6e:	f000 f879 	bl	8005f64 <_printf_i>
 8005e72:	e7ed      	b.n	8005e50 <_svfiprintf_r+0x1c0>
 8005e74:	08006a19 	.word	0x08006a19
 8005e78:	08006a23 	.word	0x08006a23
 8005e7c:	00000000 	.word	0x00000000
 8005e80:	08005bd9 	.word	0x08005bd9
 8005e84:	08006a1f 	.word	0x08006a1f

08005e88 <_printf_common>:
 8005e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e8c:	4616      	mov	r6, r2
 8005e8e:	4698      	mov	r8, r3
 8005e90:	688a      	ldr	r2, [r1, #8]
 8005e92:	690b      	ldr	r3, [r1, #16]
 8005e94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	bfb8      	it	lt
 8005e9c:	4613      	movlt	r3, r2
 8005e9e:	6033      	str	r3, [r6, #0]
 8005ea0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ea4:	4607      	mov	r7, r0
 8005ea6:	460c      	mov	r4, r1
 8005ea8:	b10a      	cbz	r2, 8005eae <_printf_common+0x26>
 8005eaa:	3301      	adds	r3, #1
 8005eac:	6033      	str	r3, [r6, #0]
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	0699      	lsls	r1, r3, #26
 8005eb2:	bf42      	ittt	mi
 8005eb4:	6833      	ldrmi	r3, [r6, #0]
 8005eb6:	3302      	addmi	r3, #2
 8005eb8:	6033      	strmi	r3, [r6, #0]
 8005eba:	6825      	ldr	r5, [r4, #0]
 8005ebc:	f015 0506 	ands.w	r5, r5, #6
 8005ec0:	d106      	bne.n	8005ed0 <_printf_common+0x48>
 8005ec2:	f104 0a19 	add.w	sl, r4, #25
 8005ec6:	68e3      	ldr	r3, [r4, #12]
 8005ec8:	6832      	ldr	r2, [r6, #0]
 8005eca:	1a9b      	subs	r3, r3, r2
 8005ecc:	42ab      	cmp	r3, r5
 8005ece:	dc26      	bgt.n	8005f1e <_printf_common+0x96>
 8005ed0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ed4:	6822      	ldr	r2, [r4, #0]
 8005ed6:	3b00      	subs	r3, #0
 8005ed8:	bf18      	it	ne
 8005eda:	2301      	movne	r3, #1
 8005edc:	0692      	lsls	r2, r2, #26
 8005ede:	d42b      	bmi.n	8005f38 <_printf_common+0xb0>
 8005ee0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ee4:	4641      	mov	r1, r8
 8005ee6:	4638      	mov	r0, r7
 8005ee8:	47c8      	blx	r9
 8005eea:	3001      	adds	r0, #1
 8005eec:	d01e      	beq.n	8005f2c <_printf_common+0xa4>
 8005eee:	6823      	ldr	r3, [r4, #0]
 8005ef0:	6922      	ldr	r2, [r4, #16]
 8005ef2:	f003 0306 	and.w	r3, r3, #6
 8005ef6:	2b04      	cmp	r3, #4
 8005ef8:	bf02      	ittt	eq
 8005efa:	68e5      	ldreq	r5, [r4, #12]
 8005efc:	6833      	ldreq	r3, [r6, #0]
 8005efe:	1aed      	subeq	r5, r5, r3
 8005f00:	68a3      	ldr	r3, [r4, #8]
 8005f02:	bf0c      	ite	eq
 8005f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f08:	2500      	movne	r5, #0
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	bfc4      	itt	gt
 8005f0e:	1a9b      	subgt	r3, r3, r2
 8005f10:	18ed      	addgt	r5, r5, r3
 8005f12:	2600      	movs	r6, #0
 8005f14:	341a      	adds	r4, #26
 8005f16:	42b5      	cmp	r5, r6
 8005f18:	d11a      	bne.n	8005f50 <_printf_common+0xc8>
 8005f1a:	2000      	movs	r0, #0
 8005f1c:	e008      	b.n	8005f30 <_printf_common+0xa8>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	4652      	mov	r2, sl
 8005f22:	4641      	mov	r1, r8
 8005f24:	4638      	mov	r0, r7
 8005f26:	47c8      	blx	r9
 8005f28:	3001      	adds	r0, #1
 8005f2a:	d103      	bne.n	8005f34 <_printf_common+0xac>
 8005f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f34:	3501      	adds	r5, #1
 8005f36:	e7c6      	b.n	8005ec6 <_printf_common+0x3e>
 8005f38:	18e1      	adds	r1, r4, r3
 8005f3a:	1c5a      	adds	r2, r3, #1
 8005f3c:	2030      	movs	r0, #48	@ 0x30
 8005f3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f42:	4422      	add	r2, r4
 8005f44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f4c:	3302      	adds	r3, #2
 8005f4e:	e7c7      	b.n	8005ee0 <_printf_common+0x58>
 8005f50:	2301      	movs	r3, #1
 8005f52:	4622      	mov	r2, r4
 8005f54:	4641      	mov	r1, r8
 8005f56:	4638      	mov	r0, r7
 8005f58:	47c8      	blx	r9
 8005f5a:	3001      	adds	r0, #1
 8005f5c:	d0e6      	beq.n	8005f2c <_printf_common+0xa4>
 8005f5e:	3601      	adds	r6, #1
 8005f60:	e7d9      	b.n	8005f16 <_printf_common+0x8e>
	...

08005f64 <_printf_i>:
 8005f64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f68:	7e0f      	ldrb	r7, [r1, #24]
 8005f6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f6c:	2f78      	cmp	r7, #120	@ 0x78
 8005f6e:	4691      	mov	r9, r2
 8005f70:	4680      	mov	r8, r0
 8005f72:	460c      	mov	r4, r1
 8005f74:	469a      	mov	sl, r3
 8005f76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f7a:	d807      	bhi.n	8005f8c <_printf_i+0x28>
 8005f7c:	2f62      	cmp	r7, #98	@ 0x62
 8005f7e:	d80a      	bhi.n	8005f96 <_printf_i+0x32>
 8005f80:	2f00      	cmp	r7, #0
 8005f82:	f000 80d2 	beq.w	800612a <_printf_i+0x1c6>
 8005f86:	2f58      	cmp	r7, #88	@ 0x58
 8005f88:	f000 80b9 	beq.w	80060fe <_printf_i+0x19a>
 8005f8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f94:	e03a      	b.n	800600c <_printf_i+0xa8>
 8005f96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f9a:	2b15      	cmp	r3, #21
 8005f9c:	d8f6      	bhi.n	8005f8c <_printf_i+0x28>
 8005f9e:	a101      	add	r1, pc, #4	@ (adr r1, 8005fa4 <_printf_i+0x40>)
 8005fa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fa4:	08005ffd 	.word	0x08005ffd
 8005fa8:	08006011 	.word	0x08006011
 8005fac:	08005f8d 	.word	0x08005f8d
 8005fb0:	08005f8d 	.word	0x08005f8d
 8005fb4:	08005f8d 	.word	0x08005f8d
 8005fb8:	08005f8d 	.word	0x08005f8d
 8005fbc:	08006011 	.word	0x08006011
 8005fc0:	08005f8d 	.word	0x08005f8d
 8005fc4:	08005f8d 	.word	0x08005f8d
 8005fc8:	08005f8d 	.word	0x08005f8d
 8005fcc:	08005f8d 	.word	0x08005f8d
 8005fd0:	08006111 	.word	0x08006111
 8005fd4:	0800603b 	.word	0x0800603b
 8005fd8:	080060cb 	.word	0x080060cb
 8005fdc:	08005f8d 	.word	0x08005f8d
 8005fe0:	08005f8d 	.word	0x08005f8d
 8005fe4:	08006133 	.word	0x08006133
 8005fe8:	08005f8d 	.word	0x08005f8d
 8005fec:	0800603b 	.word	0x0800603b
 8005ff0:	08005f8d 	.word	0x08005f8d
 8005ff4:	08005f8d 	.word	0x08005f8d
 8005ff8:	080060d3 	.word	0x080060d3
 8005ffc:	6833      	ldr	r3, [r6, #0]
 8005ffe:	1d1a      	adds	r2, r3, #4
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6032      	str	r2, [r6, #0]
 8006004:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006008:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800600c:	2301      	movs	r3, #1
 800600e:	e09d      	b.n	800614c <_printf_i+0x1e8>
 8006010:	6833      	ldr	r3, [r6, #0]
 8006012:	6820      	ldr	r0, [r4, #0]
 8006014:	1d19      	adds	r1, r3, #4
 8006016:	6031      	str	r1, [r6, #0]
 8006018:	0606      	lsls	r6, r0, #24
 800601a:	d501      	bpl.n	8006020 <_printf_i+0xbc>
 800601c:	681d      	ldr	r5, [r3, #0]
 800601e:	e003      	b.n	8006028 <_printf_i+0xc4>
 8006020:	0645      	lsls	r5, r0, #25
 8006022:	d5fb      	bpl.n	800601c <_printf_i+0xb8>
 8006024:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006028:	2d00      	cmp	r5, #0
 800602a:	da03      	bge.n	8006034 <_printf_i+0xd0>
 800602c:	232d      	movs	r3, #45	@ 0x2d
 800602e:	426d      	negs	r5, r5
 8006030:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006034:	4859      	ldr	r0, [pc, #356]	@ (800619c <_printf_i+0x238>)
 8006036:	230a      	movs	r3, #10
 8006038:	e011      	b.n	800605e <_printf_i+0xfa>
 800603a:	6821      	ldr	r1, [r4, #0]
 800603c:	6833      	ldr	r3, [r6, #0]
 800603e:	0608      	lsls	r0, r1, #24
 8006040:	f853 5b04 	ldr.w	r5, [r3], #4
 8006044:	d402      	bmi.n	800604c <_printf_i+0xe8>
 8006046:	0649      	lsls	r1, r1, #25
 8006048:	bf48      	it	mi
 800604a:	b2ad      	uxthmi	r5, r5
 800604c:	2f6f      	cmp	r7, #111	@ 0x6f
 800604e:	4853      	ldr	r0, [pc, #332]	@ (800619c <_printf_i+0x238>)
 8006050:	6033      	str	r3, [r6, #0]
 8006052:	bf14      	ite	ne
 8006054:	230a      	movne	r3, #10
 8006056:	2308      	moveq	r3, #8
 8006058:	2100      	movs	r1, #0
 800605a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800605e:	6866      	ldr	r6, [r4, #4]
 8006060:	60a6      	str	r6, [r4, #8]
 8006062:	2e00      	cmp	r6, #0
 8006064:	bfa2      	ittt	ge
 8006066:	6821      	ldrge	r1, [r4, #0]
 8006068:	f021 0104 	bicge.w	r1, r1, #4
 800606c:	6021      	strge	r1, [r4, #0]
 800606e:	b90d      	cbnz	r5, 8006074 <_printf_i+0x110>
 8006070:	2e00      	cmp	r6, #0
 8006072:	d04b      	beq.n	800610c <_printf_i+0x1a8>
 8006074:	4616      	mov	r6, r2
 8006076:	fbb5 f1f3 	udiv	r1, r5, r3
 800607a:	fb03 5711 	mls	r7, r3, r1, r5
 800607e:	5dc7      	ldrb	r7, [r0, r7]
 8006080:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006084:	462f      	mov	r7, r5
 8006086:	42bb      	cmp	r3, r7
 8006088:	460d      	mov	r5, r1
 800608a:	d9f4      	bls.n	8006076 <_printf_i+0x112>
 800608c:	2b08      	cmp	r3, #8
 800608e:	d10b      	bne.n	80060a8 <_printf_i+0x144>
 8006090:	6823      	ldr	r3, [r4, #0]
 8006092:	07df      	lsls	r7, r3, #31
 8006094:	d508      	bpl.n	80060a8 <_printf_i+0x144>
 8006096:	6923      	ldr	r3, [r4, #16]
 8006098:	6861      	ldr	r1, [r4, #4]
 800609a:	4299      	cmp	r1, r3
 800609c:	bfde      	ittt	le
 800609e:	2330      	movle	r3, #48	@ 0x30
 80060a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80060a8:	1b92      	subs	r2, r2, r6
 80060aa:	6122      	str	r2, [r4, #16]
 80060ac:	f8cd a000 	str.w	sl, [sp]
 80060b0:	464b      	mov	r3, r9
 80060b2:	aa03      	add	r2, sp, #12
 80060b4:	4621      	mov	r1, r4
 80060b6:	4640      	mov	r0, r8
 80060b8:	f7ff fee6 	bl	8005e88 <_printf_common>
 80060bc:	3001      	adds	r0, #1
 80060be:	d14a      	bne.n	8006156 <_printf_i+0x1f2>
 80060c0:	f04f 30ff 	mov.w	r0, #4294967295
 80060c4:	b004      	add	sp, #16
 80060c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	f043 0320 	orr.w	r3, r3, #32
 80060d0:	6023      	str	r3, [r4, #0]
 80060d2:	4833      	ldr	r0, [pc, #204]	@ (80061a0 <_printf_i+0x23c>)
 80060d4:	2778      	movs	r7, #120	@ 0x78
 80060d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80060da:	6823      	ldr	r3, [r4, #0]
 80060dc:	6831      	ldr	r1, [r6, #0]
 80060de:	061f      	lsls	r7, r3, #24
 80060e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80060e4:	d402      	bmi.n	80060ec <_printf_i+0x188>
 80060e6:	065f      	lsls	r7, r3, #25
 80060e8:	bf48      	it	mi
 80060ea:	b2ad      	uxthmi	r5, r5
 80060ec:	6031      	str	r1, [r6, #0]
 80060ee:	07d9      	lsls	r1, r3, #31
 80060f0:	bf44      	itt	mi
 80060f2:	f043 0320 	orrmi.w	r3, r3, #32
 80060f6:	6023      	strmi	r3, [r4, #0]
 80060f8:	b11d      	cbz	r5, 8006102 <_printf_i+0x19e>
 80060fa:	2310      	movs	r3, #16
 80060fc:	e7ac      	b.n	8006058 <_printf_i+0xf4>
 80060fe:	4827      	ldr	r0, [pc, #156]	@ (800619c <_printf_i+0x238>)
 8006100:	e7e9      	b.n	80060d6 <_printf_i+0x172>
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	f023 0320 	bic.w	r3, r3, #32
 8006108:	6023      	str	r3, [r4, #0]
 800610a:	e7f6      	b.n	80060fa <_printf_i+0x196>
 800610c:	4616      	mov	r6, r2
 800610e:	e7bd      	b.n	800608c <_printf_i+0x128>
 8006110:	6833      	ldr	r3, [r6, #0]
 8006112:	6825      	ldr	r5, [r4, #0]
 8006114:	6961      	ldr	r1, [r4, #20]
 8006116:	1d18      	adds	r0, r3, #4
 8006118:	6030      	str	r0, [r6, #0]
 800611a:	062e      	lsls	r6, r5, #24
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	d501      	bpl.n	8006124 <_printf_i+0x1c0>
 8006120:	6019      	str	r1, [r3, #0]
 8006122:	e002      	b.n	800612a <_printf_i+0x1c6>
 8006124:	0668      	lsls	r0, r5, #25
 8006126:	d5fb      	bpl.n	8006120 <_printf_i+0x1bc>
 8006128:	8019      	strh	r1, [r3, #0]
 800612a:	2300      	movs	r3, #0
 800612c:	6123      	str	r3, [r4, #16]
 800612e:	4616      	mov	r6, r2
 8006130:	e7bc      	b.n	80060ac <_printf_i+0x148>
 8006132:	6833      	ldr	r3, [r6, #0]
 8006134:	1d1a      	adds	r2, r3, #4
 8006136:	6032      	str	r2, [r6, #0]
 8006138:	681e      	ldr	r6, [r3, #0]
 800613a:	6862      	ldr	r2, [r4, #4]
 800613c:	2100      	movs	r1, #0
 800613e:	4630      	mov	r0, r6
 8006140:	f7fa f856 	bl	80001f0 <memchr>
 8006144:	b108      	cbz	r0, 800614a <_printf_i+0x1e6>
 8006146:	1b80      	subs	r0, r0, r6
 8006148:	6060      	str	r0, [r4, #4]
 800614a:	6863      	ldr	r3, [r4, #4]
 800614c:	6123      	str	r3, [r4, #16]
 800614e:	2300      	movs	r3, #0
 8006150:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006154:	e7aa      	b.n	80060ac <_printf_i+0x148>
 8006156:	6923      	ldr	r3, [r4, #16]
 8006158:	4632      	mov	r2, r6
 800615a:	4649      	mov	r1, r9
 800615c:	4640      	mov	r0, r8
 800615e:	47d0      	blx	sl
 8006160:	3001      	adds	r0, #1
 8006162:	d0ad      	beq.n	80060c0 <_printf_i+0x15c>
 8006164:	6823      	ldr	r3, [r4, #0]
 8006166:	079b      	lsls	r3, r3, #30
 8006168:	d413      	bmi.n	8006192 <_printf_i+0x22e>
 800616a:	68e0      	ldr	r0, [r4, #12]
 800616c:	9b03      	ldr	r3, [sp, #12]
 800616e:	4298      	cmp	r0, r3
 8006170:	bfb8      	it	lt
 8006172:	4618      	movlt	r0, r3
 8006174:	e7a6      	b.n	80060c4 <_printf_i+0x160>
 8006176:	2301      	movs	r3, #1
 8006178:	4632      	mov	r2, r6
 800617a:	4649      	mov	r1, r9
 800617c:	4640      	mov	r0, r8
 800617e:	47d0      	blx	sl
 8006180:	3001      	adds	r0, #1
 8006182:	d09d      	beq.n	80060c0 <_printf_i+0x15c>
 8006184:	3501      	adds	r5, #1
 8006186:	68e3      	ldr	r3, [r4, #12]
 8006188:	9903      	ldr	r1, [sp, #12]
 800618a:	1a5b      	subs	r3, r3, r1
 800618c:	42ab      	cmp	r3, r5
 800618e:	dcf2      	bgt.n	8006176 <_printf_i+0x212>
 8006190:	e7eb      	b.n	800616a <_printf_i+0x206>
 8006192:	2500      	movs	r5, #0
 8006194:	f104 0619 	add.w	r6, r4, #25
 8006198:	e7f5      	b.n	8006186 <_printf_i+0x222>
 800619a:	bf00      	nop
 800619c:	08006a2a 	.word	0x08006a2a
 80061a0:	08006a3b 	.word	0x08006a3b

080061a4 <memmove>:
 80061a4:	4288      	cmp	r0, r1
 80061a6:	b510      	push	{r4, lr}
 80061a8:	eb01 0402 	add.w	r4, r1, r2
 80061ac:	d902      	bls.n	80061b4 <memmove+0x10>
 80061ae:	4284      	cmp	r4, r0
 80061b0:	4623      	mov	r3, r4
 80061b2:	d807      	bhi.n	80061c4 <memmove+0x20>
 80061b4:	1e43      	subs	r3, r0, #1
 80061b6:	42a1      	cmp	r1, r4
 80061b8:	d008      	beq.n	80061cc <memmove+0x28>
 80061ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061c2:	e7f8      	b.n	80061b6 <memmove+0x12>
 80061c4:	4402      	add	r2, r0
 80061c6:	4601      	mov	r1, r0
 80061c8:	428a      	cmp	r2, r1
 80061ca:	d100      	bne.n	80061ce <memmove+0x2a>
 80061cc:	bd10      	pop	{r4, pc}
 80061ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061d6:	e7f7      	b.n	80061c8 <memmove+0x24>

080061d8 <_sbrk_r>:
 80061d8:	b538      	push	{r3, r4, r5, lr}
 80061da:	4d06      	ldr	r5, [pc, #24]	@ (80061f4 <_sbrk_r+0x1c>)
 80061dc:	2300      	movs	r3, #0
 80061de:	4604      	mov	r4, r0
 80061e0:	4608      	mov	r0, r1
 80061e2:	602b      	str	r3, [r5, #0]
 80061e4:	f7fb fe4e 	bl	8001e84 <_sbrk>
 80061e8:	1c43      	adds	r3, r0, #1
 80061ea:	d102      	bne.n	80061f2 <_sbrk_r+0x1a>
 80061ec:	682b      	ldr	r3, [r5, #0]
 80061ee:	b103      	cbz	r3, 80061f2 <_sbrk_r+0x1a>
 80061f0:	6023      	str	r3, [r4, #0]
 80061f2:	bd38      	pop	{r3, r4, r5, pc}
 80061f4:	20000368 	.word	0x20000368

080061f8 <memcpy>:
 80061f8:	440a      	add	r2, r1
 80061fa:	4291      	cmp	r1, r2
 80061fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006200:	d100      	bne.n	8006204 <memcpy+0xc>
 8006202:	4770      	bx	lr
 8006204:	b510      	push	{r4, lr}
 8006206:	f811 4b01 	ldrb.w	r4, [r1], #1
 800620a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800620e:	4291      	cmp	r1, r2
 8006210:	d1f9      	bne.n	8006206 <memcpy+0xe>
 8006212:	bd10      	pop	{r4, pc}

08006214 <_realloc_r>:
 8006214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006218:	4680      	mov	r8, r0
 800621a:	4615      	mov	r5, r2
 800621c:	460c      	mov	r4, r1
 800621e:	b921      	cbnz	r1, 800622a <_realloc_r+0x16>
 8006220:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006224:	4611      	mov	r1, r2
 8006226:	f7ff bc4b 	b.w	8005ac0 <_malloc_r>
 800622a:	b92a      	cbnz	r2, 8006238 <_realloc_r+0x24>
 800622c:	f7ff fbdc 	bl	80059e8 <_free_r>
 8006230:	2400      	movs	r4, #0
 8006232:	4620      	mov	r0, r4
 8006234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006238:	f000 f81a 	bl	8006270 <_malloc_usable_size_r>
 800623c:	4285      	cmp	r5, r0
 800623e:	4606      	mov	r6, r0
 8006240:	d802      	bhi.n	8006248 <_realloc_r+0x34>
 8006242:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006246:	d8f4      	bhi.n	8006232 <_realloc_r+0x1e>
 8006248:	4629      	mov	r1, r5
 800624a:	4640      	mov	r0, r8
 800624c:	f7ff fc38 	bl	8005ac0 <_malloc_r>
 8006250:	4607      	mov	r7, r0
 8006252:	2800      	cmp	r0, #0
 8006254:	d0ec      	beq.n	8006230 <_realloc_r+0x1c>
 8006256:	42b5      	cmp	r5, r6
 8006258:	462a      	mov	r2, r5
 800625a:	4621      	mov	r1, r4
 800625c:	bf28      	it	cs
 800625e:	4632      	movcs	r2, r6
 8006260:	f7ff ffca 	bl	80061f8 <memcpy>
 8006264:	4621      	mov	r1, r4
 8006266:	4640      	mov	r0, r8
 8006268:	f7ff fbbe 	bl	80059e8 <_free_r>
 800626c:	463c      	mov	r4, r7
 800626e:	e7e0      	b.n	8006232 <_realloc_r+0x1e>

08006270 <_malloc_usable_size_r>:
 8006270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006274:	1f18      	subs	r0, r3, #4
 8006276:	2b00      	cmp	r3, #0
 8006278:	bfbc      	itt	lt
 800627a:	580b      	ldrlt	r3, [r1, r0]
 800627c:	18c0      	addlt	r0, r0, r3
 800627e:	4770      	bx	lr

08006280 <_init>:
 8006280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006282:	bf00      	nop
 8006284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006286:	bc08      	pop	{r3}
 8006288:	469e      	mov	lr, r3
 800628a:	4770      	bx	lr

0800628c <_fini>:
 800628c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800628e:	bf00      	nop
 8006290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006292:	bc08      	pop	{r3}
 8006294:	469e      	mov	lr, r3
 8006296:	4770      	bx	lr
